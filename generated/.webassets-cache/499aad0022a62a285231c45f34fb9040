V// source: plugin/gcodeviewer/js/gcodeviewer.js\u000a$(function () {\u000a    function GcodeViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a        self.access = parameters[2];\u000a\u000a        self.sizeThresholdStr = undefined;\u000a        self.mobileSizeThresholdStr = undefined;\u000a\u000a        self.ui_progress_percentage = ko.observable();\u000a        self.ui_progress_type = ko.observable();\u000a        self.ui_progress_text = ko.pureComputed(function () {\u000a            var text = "";\u000a            switch (self.ui_progress_type()) {\u000a                case "loading": {\u000a                    text =\u000a                        gettext("Loading...") +\u000a                        " (" +\u000a                        self.ui_progress_percentage().toFixed(0) +\u000a                        "%)";\u000a                    break;\u000a                }\u000a                case "analyzing": {\u000a                    text =\u000a                        gettext("Analyzing...") +\u000a                        " (" +\u000a                        self.ui_progress_percentage().toFixed(0) +\u000a                        "%)";\u000a                    break;\u000a                }\u000a                case "done": {\u000a                    text = gettext("Analyzed");\u000a                    break;\u000a                }\u000a            }\u000a\u000a            return text;\u000a        });\u000a        self.ui_modelInfo = ko.observable("");\u000a        self.ui_layerInfo = ko.observable("");\u000a\u000a        self.tabActive = false;\u000a        self.enableReload = ko.observable(false);\u000a\u000a        self.waitForApproval = ko.observable(false);\u000a        self.selectedFile = {\u000a            path: ko.observable(undefined),\u000a            date: ko.observable(undefined),\u000a            size: ko.observable(undefined)\u000a        };\u000a\u000a        self.needsLoad = false;\u000a\u000a        self.renderer_centerModel = ko.observable(false);\u000a        self.renderer_centerViewport = ko.observable(false);\u000a        self.renderer_zoomOnModel = ko.observable(false);\u000a        self.renderer_showMoves = ko.observable(true);\u000a        self.renderer_showRetracts = ko.observable(true);\u000a        self.renderer_showPrinthead = ko.observable(true);\u000a        self.renderer_showBoundingBox = ko.observable(false);\u000a        self.renderer_showFullSize = ko.observable(false);\u000a        self.renderer_extrusionWidthEnabled = ko.observable(false);\u000a        self.renderer_extrusionWidth = ko.observable(2);\u000a        self.renderer_showNext = ko.observable(false);\u000a        self.renderer_showCurrent = ko.observable(false);\u000a        self.renderer_showPrevious = ko.observable(false);\u000a        self.renderer_syncProgress = ko.observable(true);\u000a\u000a        self.reader_sortLayers = ko.observable(true);\u000a        self.reader_hideEmptyLayers = ko.observable(true);\u000a        self.reader_ignoreOutsideBed = ko.observable(true);\u000a\u000a        self.layerSelectionEnabled = ko.observable(false);\u000a        self.layerUpEnabled = ko.observable(false);\u000a        self.layerDownEnabled = ko.observable(false);\u000a\u000a        self.synchronizeOptionsAndReload = function (\u000a            additionalRendererOptions,\u000a            additionalReaderOptions\u000a        ) {\u000a            self.synchronizeOptions(additionalRendererOptions, additionalReaderOptions);\u000a            self.reload();\u000a        };\u000a\u000a        self.synchronizeOptions = function (\u000a            additionalRendererOptions,\u000a            additionalReaderOptions\u000a        ) {\u000a            var renderer = {\u000a                moveModel: self.renderer_centerModel(),\u000a                centerViewport: self.renderer_centerViewport(),\u000a                showMoves: self.renderer_showMoves(),\u000a                showRetracts: self.renderer_showRetracts(),\u000a                showHead: self.renderer_showPrinthead(),\u000a                showBoundingBox: self.renderer_showBoundingBox(),\u000a                showFullSize: self.renderer_showFullSize(),\u000a                extrusionWidth: self.renderer_extrusionWidthEnabled()\u000a                    ? self.renderer_extrusionWidth()\u000a                    : 1,\u000a                showNextLayer: self.renderer_showNext(),\u000a                showCurrentLayer: self.renderer_showCurrent(),\u000a                showPreviousLayer: self.renderer_showPrevious(),\u000a                zoomInOnModel: self.renderer_zoomOnModel(),\u000a                onInternalOptionChange: self._onInternalRendererOptionChange\u000a            };\u000a            if (additionalRendererOptions) {\u000a                _.extend(renderer, additionalRendererOptions);\u000a            }\u000a\u000a            var reader = {\u000a                sortLayers: self.reader_sortLayers(),\u000a                purgeEmptyLayers: self.reader_hideEmptyLayers(),\u000a                ignoreOutsideBed: self.reader_ignoreOutsideBed()\u000a            };\u000a            if (additionalReaderOptions) {\u000a                _.extend(reader, additionalReaderOptions);\u000a            }\u000a\u000a            GCODE.ui.updateOptions({\u000a                renderer: renderer,\u000a                reader: reader\u000a            });\u000a        };\u000a\u000a        self.rendererOptionUpdated = function () {\u000a            self.synchronizeOptions();\u000a            self._toLocalStorage();\u000a        };\u000a\u000a        self.readerOptionUpdated = function () {\u000a            self.synchronizeOptionsAndReload();\u000a            self._toLocalStorage();\u000a        };\u000a\u000a        // subscribe to update Gcode view on updates...\u000a        self.renderer_centerModel.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_centerViewport.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_zoomOnModel.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showMoves.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showRetracts.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showPrinthead.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showBoundingBox.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showFullSize.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_extrusionWidthEnabled.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_extrusionWidth.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showNext.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showCurrent.subscribe(self.rendererOptionUpdated);\u000a        self.renderer_showPrevious.subscribe(self.rendererOptionUpdated);\u000a\u000a        self.reader_sortLayers.subscribe(self.readerOptionUpdated);\u000a        self.reader_hideEmptyLayers.subscribe(self.readerOptionUpdated);\u000a        self.reader_ignoreOutsideBed.subscribe(self.readerOptionUpdated);\u000a\u000a        self._printerProfileUpdated = function () {\u000a            if (!self.enabled) return;\u000a\u000a            var currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            if (!currentProfileData) return;\u000a\u000a            var options = {\u000a                reader: {},\u000a                renderer: {}\u000a            };\u000a            var dirty = false;\u000a\u000a            var toolOffsets = self._retrieveToolOffsets(currentProfileData);\u000a            if (toolOffsets) {\u000a                options.reader.toolOffsets = toolOffsets;\u000a                dirty = true;\u000a            }\u000a\u000a            var bedDimensions = self._retrieveBedDimensions(currentProfileData);\u000a            if (bedDimensions) {\u000a                options.renderer.bed = bedDimensions;\u000a                options.reader.bed = bedDimensions;\u000a                dirty = true;\u000a            }\u000a\u000a            if (dirty) {\u000a                GCODE.ui.updateOptions(options);\u000a            }\u000a        };\u000a\u000a        // subscribe to relevant printer settings...\u000a        self.settings.printerProfiles.currentProfileData.subscribe(function () {\u000a            self._printerProfileUpdated();\u000a            if (self.settings.printerProfiles.currentProfileData()) {\u000a                if (self.settings.printerProfiles.currentProfileData().extruder) {\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .extruder.count.subscribe(self._printerProfileUpdated);\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .extruder.sharedNozzle.subscribe(self._printerProfileUpdated);\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .extruder.offsets.subscribe(self._printerProfileUpdated);\u000a                }\u000a                if (self.settings.printerProfiles.currentProfileData().volume) {\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .volume.width.subscribe(self._printerProfileUpdated);\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .volume.depth.subscribe(self._printerProfileUpdated);\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .volume.formFactor.subscribe(self._printerProfileUpdated);\u000a                }\u000a                if (self.settings.printerProfiles.currentProfileData().axes) {\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .axes.x.inverted.subscribe(self._printerProfileUpdated);\u000a                    self.settings.printerProfiles\u000a                        .currentProfileData()\u000a                        .axes.y.inverted.subscribe(self._printerProfileUpdated);\u000a                }\u000a            }\u000a        });\u000a\u000a        self.settings.feature_g90InfluencesExtruder.subscribe(function () {\u000a            GCODE.ui.updateOptions({\u000a                reader: {\u000a                    g90InfluencesExtruder: self.settings.feature_g90InfluencesExtruder()\u000a                }\u000a            });\u000a        });\u000a\u000a        self._retrieveBedDimensions = function (currentProfileData) {\u000a            if (currentProfileData === undefined) {\u000a                currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            }\u000a\u000a            if (\u000a                currentProfileData &&\u000a                currentProfileData.volume &&\u000a                currentProfileData.volume.formFactor() &&\u000a                currentProfileData.volume.width() &&\u000a                currentProfileData.volume.depth()\u000a            ) {\u000a                var x = undefined,\u000a                    y = undefined,\u000a                    r = undefined,\u000a                    circular = false,\u000a                    centeredOrigin = false;\u000a\u000a                var formFactor = currentProfileData.volume.formFactor();\u000a                if (formFactor === "circular") {\u000a                    r = currentProfileData.volume.width() / 2;\u000a                    circular = true;\u000a                    centeredOrigin = true;\u000a                } else {\u000a                    x = currentProfileData.volume.width();\u000a                    y = currentProfileData.volume.depth();\u000a                    if (currentProfileData.volume.origin) {\u000a                        centeredOrigin = currentProfileData.volume.origin() === "center";\u000a                    }\u000a                }\u000a\u000a                return {\u000a                    x: x,\u000a                    y: y,\u000a                    r: r,\u000a                    circular: circular,\u000a                    centeredOrigin: centeredOrigin\u000a                };\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self._retrieveToolOffsets = function (currentProfileData) {\u000a            if (currentProfileData == undefined) {\u000a                currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            }\u000a\u000a            if (currentProfileData && currentProfileData.extruder) {\u000a                var offsets = [];\u000a                if (\u000a                    currentProfileData.extruder.offsets() &&\u000a                    !currentProfileData.extruder.sharedNozzle()\u000a                ) {\u000a                    _.each(currentProfileData.extruder.offsets(), function (offset) {\u000a                        offsets.push({x: offset[0], y: offset[1]});\u000a                    });\u000a                }\u000a                return offsets;\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self._retrieveAxesConfiguration = function (currentProfileData) {\u000a            if (currentProfileData == undefined) {\u000a                currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            }\u000a\u000a            if (currentProfileData && currentProfileData.axes) {\u000a                var invertX = false,\u000a                    invertY = false;\u000a                if (currentProfileData.axes.x) {\u000a                    invertX = currentProfileData.axes.x.inverted();\u000a                }\u000a                if (currentProfileData.axes.y) {\u000a                    invertY = currentProfileData.axes.y.inverted();\u000a                }\u000a\u000a                return {\u000a                    x: invertX,\u000a                    y: invertY\u000a                };\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self.loadedFilepath = undefined;\u000a        self.loadedFileDate = undefined;\u000a        self.status = "idle";\u000a        self.enabled = false;\u000a\u000a        self.currentlyPrinting = false;\u000a\u000a        self.errorCount = 0;\u000a\u000a        self.layerSlider = undefined;\u000a        self.layerCommandSlider = undefined;\u000a\u000a        self.currentLayer = undefined;\u000a        self.currentCommand = undefined;\u000a        self.maxLayer = undefined;\u000a\u000a        self.initialize = function () {\u000a            self.sizeThresholdStr = sizeObservable(\u000a                self.settings.settings.plugins.gcodeviewer.sizeThreshold\u000a            );\u000a            self.mobileSizeThresholdStr = sizeObservable(\u000a                self.settings.settings.plugins.gcodeviewer.mobileSizeThreshold\u000a            );\u000a\u000a            var layerSliderElement = $("#gcode_slider_layers");\u000a            var commandSliderElement = $("#gcode_slider_commands");\u000a            var containerElement = $("#gcode_canvas");\u000a\u000a            if (\u000a                !(\u000a                    layerSliderElement.length &&\u000a                    commandSliderElement.length &&\u000a                    containerElement.length\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            self._configureLayerSlider(layerSliderElement);\u000a            self._configureLayerCommandSlider(commandSliderElement);\u000a\u000a            self.settings.firstRequest.done(function () {\u000a                var initResult = GCODE.ui.init({\u000a                    container: "#gcode_canvas",\u000a                    onProgress: self._onProgress,\u000a                    onModelLoaded: self._onModelLoaded,\u000a                    onLayerSelected: self._onLayerSelected,\u000a                    bed: self._retrieveBedDimensions(),\u000a                    toolOffsets: self._retrieveToolOffsets(),\u000a                    invertAxes: self._retrieveAxesConfiguration()\u000a                });\u000a\u000a                if (!initResult) {\u000a                    log.info("Could not initialize GCODE viewer component");\u000a                    return;\u000a                }\u000a\u000a                self.synchronizeOptions();\u000a                self.enabled = true;\u000a                self._fromLocalStorage();\u000a            });\u000a        };\u000a\u000a        self.reset = function () {\u000a            self.enableReload(false);\u000a            self.loadedFilepath = undefined;\u000a            self.loadedFileDate = undefined;\u000a            self.clear();\u000a        };\u000a\u000a        self.resetOptions = function () {\u000a            self.renderer_centerModel(false);\u000a            self.renderer_centerViewport(false);\u000a            self.renderer_zoomOnModel(false);\u000a            self.renderer_showMoves(true);\u000a            self.renderer_showRetracts(true);\u000a            self.renderer_showPrinthead(true);\u000a            self.renderer_showBoundingBox(false);\u000a            self.renderer_showFullSize(false);\u000a            self.renderer_extrusionWidthEnabled(false);\u000a            self.renderer_extrusionWidth(2);\u000a            self.renderer_showNext(false);\u000a            self.renderer_showCurrent(false);\u000a            self.renderer_showPrevious(false);\u000a            self.renderer_syncProgress(true);\u000a\u000a            self.reader_sortLayers(true);\u000a            self.reader_hideEmptyLayers(true);\u000a            self.reader_ignoreOutsideBed(true);\u000a        };\u000a\u000a        self.clear = function () {\u000a            GCODE.ui.clear();\u000a        };\u000a\u000a        self._configureLayerSlider = function (layerSliderElement) {\u000a            self.layerSlider = layerSliderElement\u000a                .slider({\u000a                    id: "gcode_layer_slider",\u000a                    reversed: true,\u000a                    selection: "after",\u000a                    orientation: "vertical",\u000a                    min: 0,\u000a                    max: 1,\u000a                    step: 1,\u000a                    value: 0,\u000a                    enabled: false,\u000a                    formatter: function (value) {\u000a                        return (\u000a                            "Layer #" +\u000a                            (value + 1) +\u000a                            " (Z = " +\u000a                            GCODE.renderer.getZ(value) +\u000a                            ")"\u000a                        );\u000a                    }\u000a                })\u000a                .on("slide", self.changeLayer);\u000a        };\u000a\u000a        self._configureLayerCommandSlider = function (commandSliderElement) {\u000a            self.layerCommandSlider = commandSliderElement\u000a                .slider({\u000a                    id: "gcode_command_slider",\u000a                    orientation: "horizontal",\u000a                    min: 0,\u000a                    max: 1,\u000a                    step: 1,\u000a                    value: [0, 1],\u000a                    enabled: false,\u000a                    tooltip: "hide"\u000a                })\u000a                .on("slide", self.changeCommandRange);\u000a        };\u000a\u000a        self.loadFile = function (path, date) {\u000a            self.enableReload(false);\u000a            self.needsLoad = false;\u000a            if (self.status === "idle" && self.errorCount < 3) {\u000a                self.status = "request";\u000a                OctoPrint.files\u000a                    .download("local", path)\u000a                    .done(function (response, rstatus) {\u000a                        if (rstatus === "success") {\u000a                            self.showGCodeViewer(response, rstatus);\u000a                            self.loadedFilepath = path;\u000a                            self.loadedFileDate = date;\u000a                            self.status = "idle";\u000a                            self.enableReload(true);\u000a                        }\u000a                    })\u000a                    .fail(function () {\u000a                        self.status = "idle";\u000a                        self.errorCount++;\u000a                    });\u000a            }\u000a        };\u000a\u000a        self.showGCodeViewer = function (response, rstatus) {\u000a            var par = {\u000a                target: {\u000a                    result: response\u000a                }\u000a            };\u000a            GCODE.renderer.clear();\u000a            GCODE.gCodeReader.loadFile(par);\u000a\u000a            if (self.layerSlider !== undefined) {\u000a                self.layerSlider.slider("disable");\u000a            }\u000a            if (self.layerCommandSlider !== undefined) {\u000a                self.layerCommandSlider.slider("disable");\u000a            }\u000a        };\u000a\u000a        self.reload = function () {\u000a            if (!self.enableReload()) return;\u000a            self.loadFile(self.loadedFilepath, self.loadedFileDate);\u000a        };\u000a\u000a        self.fromHistoryData = function (data) {\u000a            self._processData(data);\u000a        };\u000a\u000a        self.fromCurrentData = function (data) {\u000a            self._processData(data);\u000a        };\u000a\u000a        self._renderPercentage = function (percentage) {\u000a            var cmdIndex = GCODE.gCodeReader.getCmdIndexForPercentage(percentage);\u000a            if (!cmdIndex) return;\u000a\u000a            GCODE.renderer.render(cmdIndex.layer, 0, cmdIndex.cmd);\u000a            GCODE.ui.updateLayerInfo(cmdIndex.layer);\u000a\u000a            if (self.layerSlider !== undefined) {\u000a                self.layerSlider.slider("setValue", cmdIndex.layer);\u000a            }\u000a            if (self.layerCommandSlider !== undefined) {\u000a                self.layerCommandSlider.slider("setValue", [0, cmdIndex.cmd]);\u000a            }\u000a        };\u000a\u000a        self._processData = function (data) {\u000a            if (\u000a                !data.job.file ||\u000a                (!data.job.file.path && (self.loadedFilepath || self.loadedFileDate))\u000a            ) {\u000a                self.waitForApproval(false);\u000a\u000a                self.loadedFilepath = undefined;\u000a                self.loadedFileDate = undefined;\u000a                self.selectedFile.path(undefined);\u000a                self.selectedFile.date(undefined);\u000a                self.selectedFile.size(undefined);\u000a\u000a                self.clear();\u000a                return;\u000a            }\u000a            if (!self.enabled) return;\u000a            self.currentlyPrinting =\u000a                data.state.flags &&\u000a                (data.state.flags.printing || data.state.flags.paused);\u000a\u000a            if (\u000a                self.loadedFilepath &&\u000a                self.loadedFilepath === data.job.file.path &&\u000a                self.loadedFileDate === data.job.file.date\u000a            ) {\u000a                if (\u000a                    OctoPrint.coreui.browserTabVisible &&\u000a                    self.tabActive &&\u000a                    self.currentlyPrinting &&\u000a                    self.renderer_syncProgress() &&\u000a                    !self.waitForApproval()\u000a                ) {\u000a                    self._renderPercentage(data.progress.completion);\u000a                }\u000a                self.errorCount = 0;\u000a            } else {\u000a                self.clear();\u000a                if (\u000a                    data.job.file.path &&\u000a                    data.job.file.origin !== "sdcard" &&\u000a                    self.status !== "request" &&\u000a                    (!self.waitForApproval() ||\u000a                        self.selectedFile.path() !== data.job.file.path ||\u000a                        self.selectedFile.date() !== data.job.file.date)\u000a                ) {\u000a                    self.selectedFile.path(data.job.file.path);\u000a                    self.selectedFile.date(data.job.file.date);\u000a                    self.selectedFile.size(data.job.file.size);\u000a\u000a                    if (\u000a                        data.job.file.size >\u000a                            self.settings.settings.plugins.gcodeviewer.sizeThreshold() ||\u000a                        (OctoPrint.coreui.browser.mobile &&\u000a                            data.job.file.size >\u000a                                self.settings.settings.plugins.gcodeviewer.mobileSizeThreshold())\u000a                    ) {\u000a                        self.waitForApproval(true);\u000a                        self.loadedFilepath = undefined;\u000a                        self.loadedFileDate = undefined;\u000a                    } else {\u000a                        self.waitForApproval(false);\u000a                        if (self.tabActive) {\u000a                            self.loadFile(data.job.file.path, data.job.file.date);\u000a                        } else {\u000a                            self.needsLoad = true;\u000a                        }\u000a                    }\u000a                }\u000a            }\u000a        };\u000a\u000a        self.onEventPrintDone = function () {\u000a            if (self.renderer_syncProgress() && !self.waitForApproval()) {\u000a                self._renderPercentage(100.0);\u000a            }\u000a        };\u000a\u000a        self.approveLargeFile = function () {\u000a            self.waitForApproval(false);\u000a            self.loadFile(self.selectedFile.path(), self.selectedFile.date());\u000a        };\u000a\u000a        self._onProgress = function (type, percentage) {\u000a            self.ui_progress_type(type);\u000a            self.ui_progress_percentage(percentage);\u000a        };\u000a\u000a        self._onModelLoaded = function (model) {\u000a            if (!model) {\u000a                self.ui_modelInfo("");\u000a                if (self.layerSlider !== undefined) {\u000a                    self.layerSlider.slider("disable");\u000a                    self.layerSlider.slider("setMax", 1);\u000a                    self.layerSlider.slider("setValue", 0);\u000a                    self.layerSelectionEnabled(false);\u000a                    self.layerDownEnabled(false);\u000a                    self.layerUpEnabled(false);\u000a                }\u000a                self.currentLayer = 0;\u000a                self.maxLayer = 0;\u000a            } else {\u000a                var output = [];\u000a                output.push(\u000a                    gettext("Model size") +\u000a                        ": " +\u000a                        model.width.toFixed(2) +\u000a                        "mm &times; " +\u000a                        model.depth.toFixed(2) +\u000a                        "mm &times; " +\u000a                        model.height.toFixed(2) +\u000a                        "mm"\u000a                );\u000a                output.push(\u000a                    gettext("Estimated layer height") +\u000a                        ": " +\u000a                        model.layerHeight.toFixed(2) +\u000a                        gettext("mm")\u000a                );\u000a                output.push(\u000a                    gettext("Estimated total print time") +\u000a                        ": " +\u000a                        formatFuzzyPrintTime(model.printTime)\u000a                );\u000a                output.push(\u000a                    gettext("Layers with extrusion") +\u000a                        ": " +\u000a                        model.layersPrinted.toFixed(0)\u000a                );\u000a\u000a                self.ui_modelInfo(output.join("<br>"));\u000a\u000a                self.maxLayer = model.layersActive - 1;\u000a                if (self.layerSlider !== undefined) {\u000a                    self.layerSlider.slider("enable");\u000a                    self.layerSlider.slider("setMax", self.maxLayer);\u000a                    self.layerSlider.slider("setValue", 0);\u000a                    self.layerSelectionEnabled(true);\u000a                    self.layerDownEnabled(false);\u000a                    self.layerUpEnabled(self.maxLayer > 0);\u000a                }\u000a            }\u000a        };\u000a\u000a        self._onLayerSelected = function (layer) {\u000a            if (!layer) {\u000a                self.ui_layerInfo("");\u000a                if (self.layerCommandSlider !== undefined) {\u000a                    self.layerCommandSlider.slider("disable");\u000a                    self.layerCommandSlider.slider("setMax", 1);\u000a                    self.layerCommandSlider.slider("setValue", [0, 1]);\u000a\u000a                    self.layerDownEnabled(false);\u000a                    self.layerUpEnabled(false);\u000a                }\u000a                self.currentCommand = [0, 1];\u000a            } else {\u000a                var output = [];\u000a                output.push(gettext("Layer number") + ": " + (layer.number + 1));\u000a                output.push(gettext("Layer height") + " (mm): " + layer.height);\u000a                output.push(gettext("GCODE commands") + ": " + layer.commands);\u000a                if (layer.filament !== undefined) {\u000a                    if (layer.filament.length === 1) {\u000a                        output.push(\u000a                            gettext("Filament") +\u000a                                ": " +\u000a                                layer.filament[0].toFixed(2) +\u000a                                "mm"\u000a                        );\u000a                    } else {\u000a                        for (var i = 0; i < layer.filament.length; i++) {\u000a                            if (layer.filament[i] !== undefined) {\u000a                                output.push(\u000a                                    gettext("Filament") +\u000a                                        " (" +\u000a                                        gettext("Tool") +\u000a                                        " " +\u000a                                        i +\u000a                                        "): " +\u000a                                        layer.filament[i].toFixed(2) +\u000a                                        "mm"\u000a                                );\u000a                            }\u000a                        }\u000a                    }\u000a                }\u000a                output.push(\u000a                    gettext("Estimated print time") +\u000a                        ": " +\u000a                        formatDuration(layer.printTime)\u000a                );\u000a\u000a                self.ui_layerInfo(output.join("<br>"));\u000a\u000a                if (self.layerCommandSlider !== undefined) {\u000a                    self.layerCommandSlider.slider("enable");\u000a                    self.layerCommandSlider.slider("setMax", layer.commands - 1);\u000a                    self.layerCommandSlider.slider("setValue", [0, layer.commands - 1]);\u000a\u000a                    self.layerDownEnabled(layer.number > 0);\u000a                    self.layerUpEnabled(layer.number < self.maxLayer);\u000a                }\u000a            }\u000a        };\u000a\u000a        self._onInternalRendererOptionChange = function (options) {\u000a            if (!options) return;\u000a\u000a            for (var opt in options) {\u000a                if (!options.hasOwnProperty(opt)) continue;\u000a                if (\u000a                    opt === "zoomInOnModel" &&\u000a                    options[opt] !== self.renderer_zoomOnModel()\u000a                ) {\u000a                    self.renderer_zoomOnModel(false);\u000a                } else if (\u000a                    opt === "centerViewport" &&\u000a                    options[opt] !== self.renderer_centerViewport()\u000a                ) {\u000a                    self.renderer_centerViewport(false);\u000a                } else if (\u000a                    opt === "moveModel" &&\u000a                    options[opt] !== self.renderer_centerModel()\u000a                ) {\u000a                    self.renderer_centerModel(false);\u000a                }\u000a            }\u000a        };\u000a\u000a        self.changeLayer = function (event) {\u000a            if (self.currentlyPrinting && self.renderer_syncProgress())\u000a                self.renderer_syncProgress(false);\u000a\u000a            var value = event.value;\u000a            if (self.currentLayer !== undefined && self.currentLayer === value) return;\u000a            self.currentLayer = value;\u000a\u000a            GCODE.ui.changeSelectedLayer(value);\u000a        };\u000a\u000a        self.onMouseOver = function (data, event) {\u000a            if (!self.settings.feature_keyboardControl()) return;\u000a            $("#canvas_container").focus();\u000a        };\u000a        self.onMouseOut = function (data, event) {\u000a            if (!self.settings.feature_keyboardControl()) return;\u000a            $("#canvas_container").blur();\u000a        };\u000a        self.onKeyDown = function (data, event) {\u000a            if (\u000a                !self.settings.feature_keyboardControl() ||\u000a                self.layerSlider === undefined\u000a            )\u000a                return;\u000a\u000a            var value = self.currentLayer;\u000a            switch (event.which) {\u000a                case 33: // Pg up\u000a                    value = value + 10; // No need to check against max this is done by the Slider anyway\u000a                    break;\u000a                case 34: // Pg down\u000a                    value = value - 10; // No need to check against min, this is done by the Slider anyway\u000a                    break;\u000a                case 38: // up arrow key\u000a                    value = value + 1; // No need to check against max this is done by the Slider anyway\u000a                    break;\u000a                case 40: // down arrow key\u000a                    value = value - 1; // No need to check against min, this is done by the Slider anyway\u000a                    break;\u000a            }\u000a            self.shiftLayer(value);\u000a        };\u000a\u000a        self.changeCommandRange = function (event) {\u000a            if (self.currentlyPrinting && self.renderer_syncProgress())\u000a                self.renderer_syncProgress(false);\u000a\u000a            var tuple = event.value;\u000a            if (\u000a                self.currentCommand !== undefined &&\u000a                self.currentCommand[0] === tuple[0] &&\u000a                self.currentCommand[1] === tuple[1]\u000a            )\u000a                return;\u000a            self.currentCommand = tuple;\u000a\u000a            GCODE.ui.changeSelectedCommands(\u000a                self.layerSlider.slider("getValue"),\u000a                tuple[0],\u000a                tuple[1]\u000a            );\u000a        };\u000a\u000a        self.onDataUpdaterReconnect = function () {\u000a            self.reset();\u000a        };\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.initialize();\u000a        };\u000a\u000a        self.onTabChange = function (current, previous) {\u000a            self.tabActive = current === "#gcode";\u000a            if (self.tabActive && self.needsLoad) {\u000a                self.loadFile(self.selectedFile.path(), self.selectedFile.date());\u000a            }\u000a        };\u000a\u000a        self.shiftLayer = function (value) {\u000a            if (value !== self.currentLayer) {\u000a                self.layerSlider.slider("setValue", value);\u000a                value = self.layerSlider.slider("getValue");\u000a                //This sets the scroll bar to the appropriate position.\u000a                self.layerSlider\u000a                    .trigger({\u000a                        type: "slideStart",\u000a                        value: value\u000a                    })\u000a                    .trigger({\u000a                        type: "slide",\u000a                        value: value\u000a                    })\u000a                    .trigger({\u000a                        type: "slideStop",\u000a                        value: value\u000a                    });\u000a            }\u000a        };\u000a\u000a        self.incrementLayer = function () {\u000a            var value = self.layerSlider.slider("getValue") + 1;\u000a            self.shiftLayer(value);\u000a        };\u000a\u000a        self.decrementLayer = function () {\u000a            var value = self.layerSlider.slider("getValue") - 1;\u000a            self.shiftLayer(value);\u000a        };\u000a\u000a        var optionsLocalStorageKey = "core.gcodeviewer.options";\u000a        self._toLocalStorage = function () {\u000a            saveToLocalStorage(optionsLocalStorageKey, {\u000a                centerViewPort: self.renderer_centerViewport(),\u000a                zoomOnModel: self.renderer_zoomOnModel(),\u000a                showMoves: self.renderer_showMoves(),\u000a                showRetracts: self.renderer_showRetracts(),\u000a                showPrinthead: self.renderer_showPrinthead(),\u000a                showPrevious: self.renderer_showPrevious(),\u000a                showCurrent: self.renderer_showCurrent(),\u000a                showNext: self.renderer_showNext(),\u000a                showFullsize: self.renderer_showFullSize(),\u000a                showBoundingBox: self.renderer_showBoundingBox(),\u000a                hideEmptyLayers: self.reader_hideEmptyLayers(),\u000a                sortLayers: self.reader_sortLayers()\u000a            });\u000a        };\u000a        self._fromLocalStorage = function () {\u000a            self.resetOptions();\u000a\u000a            var current = loadFromLocalStorage(optionsLocalStorageKey);\u000a            if (current["centerViewport"] !== undefined)\u000a                self.renderer_centerViewport(current["centerViewport"]);\u000a            if (current["zoomOnModel"] !== undefined)\u000a                self.renderer_zoomOnModel(current["zoomOnModel"]);\u000a            if (current["showMoves"] !== undefined)\u000a                self.renderer_showMoves(current["showMoves"]);\u000a            if (current["showRetracts"] !== undefined)\u000a                self.renderer_showRetracts(current["showRetracts"]);\u000a            if (current["showPrinthead"] !== undefined)\u000a                self.renderer_showPrinthead(current["showPrinthead"]);\u000a            if (current["showPrevious"] !== undefined)\u000a                self.renderer_showPrevious(current["showPrevious"]);\u000a            if (current["showCurrent"] !== undefined)\u000a                self.renderer_showCurrent(current["showCurrent"]);\u000a            if (current["showNext"] !== undefined)\u000a                self.renderer_showNext(current["showNext"]);\u000a            if (current["showFullsize"] !== undefined)\u000a                self.renderer_showFullSize(current["showFullsize"]);\u000a            if (current["showBoundingBox"] !== undefined)\u000a                self.renderer_showBoundingBox(current["showBoundingBox"]);\u000a            if (current["hideEmptyLayers"] !== undefined)\u000a                self.reader_hideEmptyLayers(current["hideEmptyLayers"]);\u000a            if (current["sortLayers"] !== undefined)\u000a                self.reader_sortLayers(current["sortLayers"]);\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: GcodeViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel", "accessViewModel"],\u000a        elements: ["#gcode", "#gcode_link", "#settings_plugin_gcodeviewer"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.