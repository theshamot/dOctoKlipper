V// source: plugin/logging/js/logging.js\u000a$(function () {\u000a    function LoggingViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.access = parameters[1];\u000a\u000a        self.availableLoggers = ko.observableArray();\u000a        self.availableLoggersName = ko.observable();\u000a        self.availableLoggersLevel = ko.observable();\u000a        self.configuredLoggers = ko.observableArray();\u000a        self.configuredLoggersChanged = false;\u000a        self.serialLogEnabled = ko.observable();\u000a        self.pluginTimingsLogEnabled = ko.observable();\u000a        self.freeSpace = ko.observable(undefined);\u000a        self.totalSpace = ko.observable(undefined);\u000a\u000a        self.markedForDeletion = ko.observableArray([]);\u000a\u000a        self.availableLoggersSorted = ko.computed(function () {\u000a            return _.sortBy(self.availableLoggers());\u000a        });\u000a\u000a        self.configuredLoggersSorted = ko.computed(function () {\u000a            return _.sortBy(self.configuredLoggers(), function (o) {\u000a                o.level();\u000a                return o.component;\u000a            });\u000a        });\u000a\u000a        // initialize list helper\u000a        self.listHelper = new ItemListHelper(\u000a            "logFiles",\u000a            {\u000a                name: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                },\u000a                modification: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                size: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["size"] > b["size"]) return -1;\u000a                    if (a["size"] < b["size"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            CONFIG_LOGFILESPERPAGE\u000a        );\u000a\u000a        self.requestData = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            OctoPrint.plugins.logging.get().done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            self.fromLogsResponse(response.logs);\u000a            self.fromSetupResponse(response.setup);\u000a            self.fromSerialLogResponse(response.serial_log);\u000a            self.fromPluginTimingsLogResponse(response.plugintimings_log);\u000a        };\u000a\u000a        self.fromLogsResponse = function (response) {\u000a            if (!response) return;\u000a\u000a            var files = response.files;\u000a            if (files === undefined) return;\u000a\u000a            self.listHelper.updateItems(files);\u000a\u000a            self.freeSpace(response.free);\u000a            self.totalSpace(response.total);\u000a        };\u000a\u000a        self.fromSetupResponse = function (response) {\u000a            if (!response) return;\u000a\u000a            // levels\u000a            var levels = [];\u000a            var configuredLoggers = [];\u000a            _.each(response.levels, function (level, logger) {\u000a                var item = {component: logger, level: ko.observable(level)};\u000a                item.level.subscribe(function () {\u000a                    self.configuredLoggersHasChanged();\u000a                });\u000a                levels.push(item);\u000a                configuredLoggers.push(logger);\u000a            });\u000a            self.configuredLoggers(levels);\u000a\u000a            // loggers\u000a            var availableLoggers = _.without(response.loggers, configuredLoggers);\u000a            self.availableLoggers(availableLoggers);\u000a        };\u000a\u000a        self.fromSerialLogResponse = function (response) {\u000a            if (!response) return;\u000a\u000a            self.serialLogEnabled(response.enabled);\u000a        };\u000a\u000a        self.fromPluginTimingsLogResponse = function (response) {\u000a            if (!response) return;\u000a\u000a            self.pluginTimingsLogEnabled(response.enabled);\u000a        };\u000a\u000a        self.serialLogPopoverContent = function () {\u000a            return self.popoverContent("serial.log");\u000a        };\u000a\u000a        self.pluginTimingsLogPopoverContent = function () {\u000a            return self.popoverContent("plugintimings.log");\u000a        };\u000a\u000a        self.popoverContent = function (logfile) {\u000a            var free = self.freeSpace();\u000a            var total = self.totalSpace();\u000a\u000a            var content =\u000a                "<p>" +\u000a                _.sprintf(\u000a                    gettext(\u000a                        "You currently have <code>%(logfile)s</code> enabled. Please remember to turn it off " +\u000a                            "again once your are done debugging whatever issue prompted you to turn it on."\u000a                    ),\u000a                    {logfile: logfile}\u000a                ) +\u000a                "</p><p>" +\u000a                gettext(\u000a                    "It can negatively impact print performance and also take up a lot of storage space " +\u000a                        "depending on how long you keep it enabled and thus should only be used for " +\u000a                        "debugging."\u000a                ) +\u000a                "</p>";\u000a\u000a            if (free !== undefined && total !== undefined) {\u000a                content +=\u000a                    "<p class='muted'><small><strong>" +\u000a                    gettext("Log storage:") +\u000a                    "</strong> " +\u000a                    formatSize(free) +\u000a                    " / " +\u000a                    formatSize(total) +\u000a                    "</small></p>";\u000a            }\u000a\u000a            return content;\u000a        };\u000a\u000a        self.configuredLoggersHasChanged = function () {\u000a            self.configuredLoggersChanged = true;\u000a        };\u000a\u000a        self.addLogger = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            var component = self.availableLoggersName();\u000a            var level = self.availableLoggersLevel();\u000a\u000a            self.configuredLoggers.push({\u000a                component: component,\u000a                level: ko.observable(level)\u000a            });\u000a            self.availableLoggers.remove(component);\u000a\u000a            self.configuredLoggersHasChanged();\u000a        };\u000a\u000a        self.removeLogger = function (logger) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            self.configuredLoggers.remove(logger);\u000a            self.availableLoggers.push(logger.component);\u000a\u000a            self.configuredLoggersHasChanged();\u000a        };\u000a\u000a        self.removeFile = function (filename) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            var perform = function () {\u000a                OctoPrint.plugins.logging.deleteLog(filename).done(self.requestData);\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(gettext('You are about to delete log file "%(name)s".'), {\u000a                    name: _.escape(filename)\u000a                }),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.markFilesOnPage = function () {\u000a            self.markedForDeletion(\u000a                _.uniq(\u000a                    self\u000a                        .markedForDeletion()\u000a                        .concat(_.map(self.listHelper.paginatedItems(), "name"))\u000a                )\u000a            );\u000a        };\u000a\u000a        self.markAllFiles = function () {\u000a            self.markedForDeletion(_.map(self.listHelper.allItems, "name"));\u000a        };\u000a\u000a        self.clearMarkedFiles = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            self.markedForDeletion.removeAll();\u000a        };\u000a\u000a        self.removeMarkedFiles = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            var perform = function () {\u000a                self._bulkRemove(self.markedForDeletion(), "files").done(function () {\u000a                    self.markedForDeletion.removeAll();\u000a                });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(gettext("You are about to delete %(count)d log files."), {\u000a                    count: self.markedForDeletion().length\u000a                }),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.onServerReconnect = self.onUserLoggedIn = self.onEventSettingsUpdated = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            self.requestData();\u000a        };\u000a\u000a        self.onSettingsBeforeSave = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            if (self.configuredLoggersChanged) {\u000a                console.log("ConfiguredLoggers has changed. Saving!");\u000a                var levels = {};\u000a                _.each(self.configuredLoggers(), function (data) {\u000a                    levels[data.component] = data.level();\u000a                });\u000a                OctoPrint.plugins.logging.updateLevels(levels);\u000a            } else {\u000a                console.log("ConfiguredLoggers has not changed. Not saving.");\u000a            }\u000a        };\u000a\u000a        self._bulkRemove = function (files) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_LOGGING_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            var title = gettext("Deleting log files");\u000a            var message = _.sprintf(gettext("Deleting %(count)d log files..."), {\u000a                count: files.length\u000a            });\u000a            var handler = function (filename) {\u000a                return OctoPrint.plugins.logging\u000a                    .deleteLog(filename)\u000a                    .done(function () {\u000a                        deferred.notify(\u000a                            _.sprintf(gettext("Deleted %(filename)s..."), {\u000a                                filename: _.escape(filename)\u000a                            }),\u000a                            true\u000a                        );\u000a                    })\u000a                    .fail(function (jqXHR) {\u000a                        var short = _.sprintf(\u000a                            gettext("Deletion of %(filename)s failed, continuing..."),\u000a                            {filename: _.escape(filename)}\u000a                        );\u000a                        var long = _.sprintf(\u000a                            gettext("Deletion of %(filename)s failed: %(error)s"),\u000a                            {\u000a                                filename: _.escape(filename),\u000a                                error: _.escape(jqXHR.responseText)\u000a                            }\u000a                        );\u000a                        deferred.notify(short, long, false);\u000a                    });\u000a            };\u000a\u000a            var deferred = $.Deferred();\u000a\u000a            var promise = deferred.promise();\u000a\u000a            var options = {\u000a                title: title,\u000a                message: message,\u000a                max: files.length,\u000a                output: true\u000a            };\u000a            showProgressModal(options, promise);\u000a\u000a            var requests = [];\u000a            _.each(files, function (filename) {\u000a                var request = handler(filename);\u000a                requests.push(request);\u000a            });\u000a            $.when.apply($, _.map(requests, wrapPromiseWithAlways)).done(function () {\u000a                deferred.resolve();\u000a                self.requestData();\u000a            });\u000a\u000a            return promise;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: LoggingViewModel,\u000a        additionalNames: ["logsViewModel"],\u000a        dependencies: ["loginStateViewModel", "accessViewModel"],\u000a        elements: [\u000a            "#settings_plugin_logging",\u000a            "#navbar_plugin_logging_seriallog",\u000a            "#navbar_plugin_logging_plugintimingslog"\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.