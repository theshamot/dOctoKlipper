V// source: plugin/gcodeviewer/js/viewer/reader.js\u000a/**\u000a * User: hudbrog (hudbrog@gmail.com)\u000a * Date: 10/21/12\u000a * Time: 7:31 AM\u000a */\u000a\u000aGCODE.gCodeReader = (function () {\u000a    // ***** PRIVATE ******\u000a    var gcode, lines;\u000a    var z_heights = {};\u000a    var model = [];\u000a    var max = {x: undefined, y: undefined, z: undefined};\u000a    var min = {x: undefined, y: undefined, z: undefined};\u000a    var modelSize = {x: undefined, y: undefined, z: undefined};\u000a    var boundingBox = {\u000a        minX: undefined,\u000a        maxX: undefined,\u000a        minY: undefined,\u000a        maxY: undefined,\u000a        minZ: undefined,\u000a        maxZ: undefined\u000a    };\u000a    var filamentByLayer = {};\u000a    var printTimeByLayer;\u000a    var totalFilament = 0;\u000a    var printTime = 0;\u000a    var speeds = {};\u000a    var speedsByLayer = {};\u000a    var gCodeOptions = {\u000a        sortLayers: false,\u000a        purgeEmptyLayers: true,\u000a        analyzeModel: false,\u000a        toolOffsets: [{x: 0, y: 0}],\u000a        bed: {\u000a            x: undefined,\u000a            y: undefined,\u000a            r: undefined,\u000a            circular: undefined,\u000a            centeredOrigin: undefined\u000a        },\u000a        ignoreOutsideBed: false,\u000a        g90InfluencesExtruder: false\u000a    };\u000a\u000a    var percentageTree = undefined;\u000a\u000a    var prepareGCode = function (totalSize) {\u000a        if (!lines) return;\u000a        gcode = [];\u000a        var i, byteCount;\u000a\u000a        byteCount = 0;\u000a        for (i = 0; i < lines.length; i++) {\u000a            byteCount += lines[i].length + 1; // line length + line ending\u000a            gcode.push({line: lines[i], percentage: (byteCount * 100) / totalSize});\u000a        }\u000a        lines = [];\u000a    };\u000a\u000a    var sortLayers = function (m) {\u000a        var sortedZ = [];\u000a        var tmpModel = [];\u000a\u000a        for (var layer in z_heights) {\u000a            sortedZ[z_heights[layer]] = layer;\u000a        }\u000a\u000a        sortedZ.sort(function (a, b) {\u000a            return a - b;\u000a        });\u000a\u000a        for (var i = 0; i < sortedZ.length; i++) {\u000a            if (typeof z_heights[sortedZ[i]] === "undefined") continue;\u000a            tmpModel[i] = m[z_heights[sortedZ[i]]];\u000a        }\u000a        return tmpModel;\u000a    };\u000a\u000a    var prepareLinesIndex = function (m) {\u000a        percentageTree = undefined;\u000a\u000a        for (var l = 0; l < m.length; l++) {\u000a            if (m[l] === undefined) continue;\u000a            for (var i = 0; i < m[l].length; i++) {\u000a                var percentage = m[l][i].percentage;\u000a                var value = {layer: l, cmd: i};\u000a                if (!percentageTree) {\u000a                    percentageTree = new AVLTree({key: percentage, value: value}, "key");\u000a                } else {\u000a                    percentageTree.add({key: percentage, value: value});\u000a                }\u000a            }\u000a        }\u000a    };\u000a\u000a    var searchInPercentageTree = function (key) {\u000a        if (percentageTree === undefined) {\u000a            return undefined;\u000a        }\u000a\u000a        var elements = percentageTree.findBest(key);\u000a        if (elements.length === 0) {\u000a            return undefined;\u000a        }\u000a\u000a        return elements[0];\u000a    };\u000a\u000a    var purgeLayers = function (m) {\u000a        if (!m) return;\u000a        var tmpModel = [];\u000a\u000a        var purge;\u000a        for (var i = 0; i < m.length; i++) {\u000a            purge = true;\u000a\u000a            if (typeof m[i] !== "undefined") {\u000a                for (var j = 0; j < m[i].length; j++) {\u000a                    if (m[i][j].extrude) {\u000a                        purge = false;\u000a                        break;\u000a                    }\u000a                }\u000a            }\u000a\u000a            if (!purge) {\u000a                tmpModel.push(m[i]);\u000a            }\u000a        }\u000a\u000a        return tmpModel;\u000a    };\u000a\u000a    // ***** PUBLIC *******\u000a    return {\u000a        clear: function () {\u000a            model = [];\u000a            z_heights = [];\u000a            max = {x: undefined, y: undefined, z: undefined};\u000a            min = {x: undefined, y: undefined, z: undefined};\u000a            modelSize = {x: undefined, y: undefined, z: undefined};\u000a            boundingBox = {\u000a                minX: undefined,\u000a                maxX: undefined,\u000a                minY: undefined,\u000a                maxY: undefined,\u000a                minZ: undefined,\u000a                maxZ: undefined\u000a            };\u000a        },\u000a\u000a        loadFile: function (reader) {\u000a            this.clear();\u000a\u000a            var totalSize = reader.target.result.length;\u000a            lines = reader.target.result.split(/[\u005cr\u005cn]/g);\u000a            reader.target.result = null;\u000a            prepareGCode(totalSize);\u000a\u000a            GCODE.ui.worker.postMessage({\u000a                cmd: "parseGCode",\u000a                msg: {\u000a                    gcode: gcode,\u000a                    options: {\u000a                        firstReport: 5,\u000a                        toolOffsets: gCodeOptions["toolOffsets"],\u000a                        bed: gCodeOptions["bed"],\u000a                        ignoreOutsideBed: gCodeOptions["ignoreOutsideBed"],\u000a                        g90InfluencesExtruder: gCodeOptions["g90InfluencesExtruder"]\u000a                    }\u000a                }\u000a            });\u000a        },\u000a\u000a        setOption: function (options) {\u000a            var dirty = false;\u000a            for (var opt in options) {\u000a                if (options[opt] === undefined) continue;\u000a                dirty = dirty || gCodeOptions[opt] != options[opt];\u000a                gCodeOptions[opt] = options[opt];\u000a            }\u000a            if (dirty) {\u000a                if (model && model.length > 0) this.passDataToRenderer();\u000a            }\u000a        },\u000a\u000a        passDataToRenderer: function () {\u000a            var m = model;\u000a            if (gCodeOptions["sortLayers"]) m = sortLayers(m);\u000a            if (gCodeOptions["purgeEmptyLayers"]) m = purgeLayers(m);\u000a            prepareLinesIndex(m);\u000a            GCODE.renderer.doRender(m, 0);\u000a            return m;\u000a        },\u000a\u000a        processLayerFromWorker: function (msg) {\u000a            model[msg.layerNum] = msg.cmds;\u000a            z_heights[msg.zHeightObject.zValue] = msg.zHeightObject.layer;\u000a        },\u000a\u000a        processMultiLayerFromWorker: function (msg) {\u000a            for (var i = 0; i < msg.layerNum.length; i++) {\u000a                model[msg.layerNum[i]] = msg.model[msg.layerNum[i]];\u000a                z_heights[msg.zHeightObject.zValue[i]] = msg.layerNum[i];\u000a            }\u000a        },\u000a\u000a        processAnalyzeModelDone: function (msg) {\u000a            min = msg.min;\u000a            max = msg.max;\u000a            modelSize = msg.modelSize;\u000a            boundingBox = msg.boundingBox;\u000a            totalFilament = msg.totalFilament;\u000a            filamentByLayer = msg.filamentByLayer;\u000a            speeds = msg.speeds;\u000a            speedsByLayer = msg.speedsByLayer;\u000a            printTime = msg.printTime;\u000a            printTimeByLayer = msg.printTimeByLayer;\u000a        },\u000a\u000a        getLayerFilament: function (z) {\u000a            return filamentByLayer[z];\u000a        },\u000a\u000a        getLayerSpeeds: function (z) {\u000a            return speedsByLayer[z] ? speedsByLayer[z] : {};\u000a        },\u000a\u000a        getModelInfo: function () {\u000a            return {\u000a                min: min,\u000a                max: max,\u000a                modelSize: modelSize,\u000a                boundingBox: boundingBox,\u000a                totalFilament: totalFilament,\u000a                speeds: speeds,\u000a                speedsByLayer: speedsByLayer,\u000a                printTime: printTime,\u000a                printTimeByLayer: printTimeByLayer\u000a            };\u000a        },\u000a\u000a        getGCodeLines: function (layer, fromSegments, toSegments) {\u000a            var result = {\u000a                first: model[layer][fromSegments].gcodeLine,\u000a                last: model[layer][toSegments].gcodeLine\u000a            };\u000a            return result;\u000a        },\u000a\u000a        getCmdIndexForPercentage: function (percentage) {\u000a            var command = searchInPercentageTree(percentage);\u000a            if (command === undefined) {\u000a                return undefined;\u000a            } else {\u000a                return command.value;\u000a            }\u000a        }\u000a    };\u000a})();\u000a\u000a;\u000a
p0
.