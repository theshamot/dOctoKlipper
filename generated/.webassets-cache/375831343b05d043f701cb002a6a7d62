V// source: plugin/gcodeviewer/js/viewer/ui.js\u000a/**\u000a * User: hudbrog (hudbrog@gmail.com)\u000a * Date: 10/21/12\u000a * Time: 7:45 AM\u000a */\u000a\u000avar GCODE = {};\u000a\u000aGCODE.ui = (function () {\u000a    var uiOptions = {\u000a        container: undefined,\u000a        toolOffsets: undefined,\u000a        bedDimensions: undefined,\u000a        onProgress: undefined,\u000a        onModelLoaded: undefined,\u000a        onLayerSelected: undefined\u000a    };\u000a\u000a    var setProgress = function (type, progress) {\u000a        if (uiOptions["onProgress"]) {\u000a            uiOptions.onProgress(type, progress);\u000a        }\u000a    };\u000a\u000a    var switchLayer = function (layerNum, onlyInfo) {\u000a        if (!onlyInfo) {\u000a            var segmentCount = GCODE.renderer.getLayerNumSegments(layerNum);\u000a            GCODE.renderer.render(layerNum, 0, segmentCount - 1);\u000a        }\u000a\u000a        if (uiOptions["onLayerSelected"]) {\u000a            var z = GCODE.renderer.getZ(layerNum);\u000a            var modelInfo = GCODE.gCodeReader.getModelInfo();\u000a            uiOptions.onLayerSelected({\u000a                number: layerNum,\u000a                height: z,\u000a                commands: GCODE.renderer.getLayerNumSegments(layerNum),\u000a                filament: GCODE.gCodeReader.getLayerFilament(z),\u000a                printTime: modelInfo ? modelInfo.printTimeByLayer[z] : undefined\u000a            });\u000a        }\u000a    };\u000a\u000a    var switchCommands = function (layerNum, first, last) {\u000a        GCODE.renderer.render(layerNum, first, last);\u000a    };\u000a\u000a    var processMessage = function (e) {\u000a        var data = e.data;\u000a        switch (data.cmd) {\u000a            case "returnModel":\u000a                GCODE.ui.worker.postMessage({\u000a                    cmd: "analyzeModel",\u000a                    msg: {}\u000a                });\u000a                break;\u000a\u000a            case "analyzeDone":\u000a                setProgress("done", 100);\u000a\u000a                GCODE.gCodeReader.processAnalyzeModelDone(data.msg);\u000a                var activeModel = GCODE.gCodeReader.passDataToRenderer();\u000a\u000a                if (uiOptions["onModelLoaded"]) {\u000a                    uiOptions.onModelLoaded({\u000a                        width: data.msg.modelSize.x,\u000a                        depth: data.msg.modelSize.y,\u000a                        height: data.msg.modelSize.z,\u000a                        filament: data.msg.totalFilament,\u000a                        printTime: data.msg.printTime,\u000a                        layerHeight: data.msg.layerHeight,\u000a                        layersPrinted: data.msg.layerCnt,\u000a                        layersTotal: data.msg.layerTotal,\u000a                        layersActive: activeModel.length\u000a                    });\u000a                }\u000a                switchLayer(0);\u000a                break;\u000a\u000a            case "returnLayer":\u000a                GCODE.gCodeReader.processLayerFromWorker(data.msg);\u000a                setProgress("loading", data.msg.progress / 2);\u000a                break;\u000a\u000a            case "returnMultiLayer":\u000a                GCODE.gCodeReader.processMultiLayerFromWorker(data.msg);\u000a                setProgress("loading", data.msg.progress / 2);\u000a                break;\u000a\u000a            case "analyzeProgress":\u000a                setProgress("analyzing", 50 + data.msg.progress / 2);\u000a                break;\u000a        }\u000a    };\u000a\u000a    var checkCapabilities = function () {\u000a        var warnings = [];\u000a        var fatal = [];\u000a\u000a        var errorList = document.getElementById("errorList");\u000a        if (fatal.length > 0) {\u000a            if (errorList) {\u000a                errorList.innerHTML = "<ul>" + fatal.join("") + "</ul>";\u000a            }\u000a            console.log("Initialization failed: unsupported browser.");\u000a            return false;\u000a        }\u000a\u000a        if (!Modernizr.webgl && GCODE.renderer3d) {\u000a            warnings.push(\u000a                "<li>Your browser doesn't seem to support HTML5 Web GL, 3d mode is not recommended, going to be SLOW!</li>"\u000a            );\u000a            GCODE.renderer3d.setOption({rendererType: "canvas"});\u000a        }\u000a\u000a        if (warnings.length > 0) {\u000a            if (errorList) {\u000a                errorList.innerHTML = "<ul>" + warnings.join("") + "</ul>";\u000a            }\u000a            console.log("Initialization succeeded with warnings.", warnings);\u000a        }\u000a        return true;\u000a    };\u000a\u000a    var setOptions = function (options) {\u000a        if (!options) return;\u000a        for (var opt in options) {\u000a            if (options[opt] === undefined) continue;\u000a            if (options.hasOwnProperty(opt)) {\u000a                uiOptions[opt] = options[opt];\u000a            }\u000a        }\u000a    };\u000a\u000a    return {\u000a        worker: undefined,\u000a        init: function (options) {\u000a            if (options) setOptions(options);\u000a            if (!options.container) {\u000a                return false;\u000a            }\u000a\u000a            var capabilitiesResult = checkCapabilities();\u000a            if (!capabilitiesResult) {\u000a                return false;\u000a            }\u000a\u000a            setProgress("", 0);\u000a\u000a            this.worker = new Worker(GCODE_WORKER);\u000a            this.worker.addEventListener("message", processMessage, false);\u000a\u000a            GCODE.renderer.setOption({\u000a                container: options.container,\u000a                bed: options.bed\u000a            });\u000a            GCODE.gCodeReader.setOption({\u000a                toolOffsets: options.toolOffsets,\u000a                bed: options.bed\u000a            });\u000a            GCODE.renderer.render(0, 0);\u000a\u000a            return true;\u000a        },\u000a\u000a        clear: function () {\u000a            GCODE.gCodeReader.clear();\u000a            GCODE.renderer.clear();\u000a\u000a            setProgress("", 0);\u000a            if (uiOptions["onLayerSelected"]) {\u000a                uiOptions.onLayerSelected();\u000a            }\u000a            if (uiOptions["onModelLoaded"]) {\u000a                uiOptions.onModelLoaded();\u000a            }\u000a        },\u000a\u000a        updateLayerInfo: function (layerNum) {\u000a            switchLayer(layerNum, true);\u000a        },\u000a\u000a        updateOptions: function (options) {\u000a            setOptions(options.ui);\u000a            if (options.reader) {\u000a                GCODE.gCodeReader.setOption(options.reader);\u000a            }\u000a            if (options.renderer) {\u000a                GCODE.renderer.setOption(options.renderer);\u000a            }\u000a        },\u000a\u000a        changeSelectedLayer: function (newLayerNum) {\u000a            switchLayer(newLayerNum);\u000a        },\u000a\u000a        changeSelectedCommands: function (layerNum, first, last) {\u000a            switchCommands(layerNum, first, last);\u000a        }\u000a    };\u000a})();\u000a\u000a;\u000a
p0
.