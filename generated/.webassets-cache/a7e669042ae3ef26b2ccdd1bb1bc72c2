V// source: plugin/backup/js/backup.js\u000a$(function () {\u000a    function BackupViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a\u000a        self.backups = new ItemListHelper(\u000a            "plugin.backup.backups",\u000a            {\u000a                date: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "date",\u000a            [],\u000a            [],\u000a            10\u000a        );\u000a\u000a        self.markedForBackupDeletion = ko.observableArray([]);\u000a\u000a        self.excludeFromBackup = ko.observableArray([]);\u000a        self.backupInProgress = ko.observable(false);\u000a        self.restoreSupported = ko.observable(true);\u000a\u000a        self.backupUploadData = undefined;\u000a        self.backupUploadName = ko.observable();\u000a\u000a        var backupFileuploadOptions = {\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            headers: OctoPrint.getRequestHeaders(),\u000a            add: function (e, data) {\u000a                if (data.files.length === 0) {\u000a                    // no files? ignore\u000a                    return false;\u000a                }\u000a\u000a                self.backupUploadName(data.files[0].name);\u000a                self.backupUploadData = data;\u000a            },\u000a            done: function (e, data) {\u000a                self.backupUploadName(undefined);\u000a                self.backupUploadData = undefined;\u000a            }\u000a        };\u000a\u000a        $("#settings-backup-upload").fileupload(backupFileuploadOptions);\u000a        $("#wizard-backup-upload").fileupload(backupFileuploadOptions);\u000a\u000a        self.restoreInProgress = ko.observable(false);\u000a        self.restoreTitle = ko.observable();\u000a        self.restoreDialog = undefined;\u000a        self.restoreOutput = undefined;\u000a        self.unknownPlugins = ko.observableArray([]);\u000a\u000a        self.loglines = ko.observableArray([]);\u000a\u000a        self.requestData = function () {\u000a            OctoPrint.plugins.backup.get().done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            self.backups.updateItems(response.backups);\u000a            self.unknownPlugins(response.unknown_plugins);\u000a            self.restoreSupported(response.restore_supported);\u000a        };\u000a\u000a        self.createBackup = function () {\u000a            var excluded = self.excludeFromBackup();\u000a            OctoPrint.plugins.backup.createBackup(excluded).done(function () {\u000a                self.excludeFromBackup([]);\u000a            });\u000a        };\u000a\u000a        self.removeBackup = function (backup) {\u000a            var perform = function () {\u000a                OctoPrint.plugins.backup.deleteBackup(backup).done(function () {\u000a                    self.requestData();\u000a                });\u000a            };\u000a            showConfirmationDialog(\u000a                _.sprintf(gettext('You are about to delete backup file "%(name)s".'), {\u000a                    name: _.escape(backup)\u000a                }),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.restoreBackup = function (backup) {\u000a            if (!self.restoreSupported()) return;\u000a\u000a            var perform = function () {\u000a                self.restoreInProgress(true);\u000a                self.loglines.removeAll();\u000a                self.loglines.push({line: "Preparing to restore...", stream: "message"});\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.restoreDialog.modal({\u000a                    keyboard: false,\u000a                    backdrop: "static",\u000a                    show: true\u000a                });\u000a\u000a                OctoPrint.plugins.backup.restoreBackup(backup);\u000a            };\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext(\u000a                        'You are about to restore the backup file "%(name)s". This cannot be undone.'\u000a                    ),\u000a                    {name: _.escape(backup)}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.performRestoreFromUpload = function () {\u000a            if (self.backupUploadData === undefined) return;\u000a\u000a            var perform = function () {\u000a                self.restoreInProgress(true);\u000a                self.loglines.removeAll();\u000a                self.loglines.push({\u000a                    line: "Uploading backup, this can take a while. Please wait...",\u000a                    stream: "message"\u000a                });\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.restoreDialog.modal({\u000a                    keyboard: false,\u000a                    backdrop: "static",\u000a                    show: true\u000a                });\u000a\u000a                self.backupUploadData.submit();\u000a            };\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext(\u000a                        'You are about to upload and restore the backup file "%(name)s". This cannot be undone.'\u000a                    ),\u000a                    {name: _.escape(self.backupUploadName())}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.deleteUnknownPluginRecord = function () {\u000a            var perform = function () {\u000a                OctoPrint.plugins.backup.deleteUnknownPlugins().done(function () {\u000a                    self.requestData();\u000a                });\u000a            };\u000a            showConfirmationDialog(\u000a                gettext(\u000a                    "You are about to delete the record of plugins unknown during the last restore."\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.markFilesOnPage = function () {\u000a            self.markedForBackupDeletion(\u000a                _.uniq(\u000a                    self\u000a                        .markedForBackupDeletion()\u000a                        .concat(_.map(self.backups.paginatedItems(), "name"))\u000a                )\u000a            );\u000a        };\u000a\u000a        self.markAllFiles = function () {\u000a            self.markedForBackupDeletion(_.map(self.backups.allItems, "name"));\u000a        };\u000a\u000a        self.clearMarkedFiles = function () {\u000a            self.markedForBackupDeletion.removeAll();\u000a        };\u000a\u000a        self.removeMarkedFiles = function () {\u000a            var perform = function () {\u000a                self._bulkRemove(self.markedForBackupDeletion()).done(function () {\u000a                    self.markedForBackupDeletion.removeAll();\u000a                });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(gettext("You are about to delete %(count)d backups."), {\u000a                    count: self.markedForBackupDeletion().length\u000a                }),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            self.restoreDialog = $("#settings_plugin_backup_restoredialog");\u000a            self.restoreOutput = $("#settings_plugin_backup_restoredialog_output");\u000a        };\u000a\u000a        self.onSettingsShown = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a            if (plugin !== "backup") return;\u000a\u000a            if (data.type === "backup_done") {\u000a                self.requestData();\u000a                self.backupInProgress(false);\u000a                new PNotify({\u000a                    title: gettext("Backup created successfully"),\u000a                    type: "success"\u000a                });\u000a            } else if (data.type === "backup_started") {\u000a                self.backupInProgress(true);\u000a            } else if (data.type === "backup_error") {\u000a                self.requestData();\u000a                self.backupInProgress(false);\u000a                new PNotify({\u000a                    title: gettext("Creating the backup failed"),\u000a                    text: _.sprintf(\u000a                        gettext(\u000a                            "OctoPrint could not create your backup. Please consult <code>octoprint.log</code> for details. Error: %(error)s"\u000a                        ),\u000a                        {error: _.escape(data.error)}\u000a                    ),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a            } else if (data.type === "restore_started") {\u000a                self.loglines.push({\u000a                    line: gettext("Restoring from backup..."),\u000a                    stream: "message"\u000a                });\u000a                self.loglines.push({line: " ", stream: "message"});\u000a            } else if (data.type === "restore_failed") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({\u000a                    line: gettext(\u000a                        "Restore failed! Check the above output and octoprint.log for reasons as to why."\u000a                    ),\u000a                    stream: "error"\u000a                });\u000a                self.restoreInProgress(false);\u000a            } else if (data.type === "restore_done") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({\u000a                    line: gettext(\u000a                        "Restore successful! The server will now be restarted!"\u000a                    ),\u000a                    stream: "message"\u000a                });\u000a                self.restoreInProgress(false);\u000a            } else if (data.type === "installing_plugin") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({\u000a                    line: _.sprintf(gettext('Installing plugin "%(plugin)s"...'), {\u000a                        plugin: _.escape(data.plugin)\u000a                    }),\u000a                    stream: "message"\u000a                });\u000a            } else if (data.type === "plugin_incompatible") {\u000a                self.loglines.push({line: " ", stream: "message"});\u000a                self.loglines.push({\u000a                    line: _.sprintf(\u000a                        gettext(\u000a                            'Cannot install plugin "%(plugin)s" due to it being incompatible to this OctoPrint version and/or underlying operating system'\u000a                        ),\u000a                        {plugin: _.escape(data.plugin.key)}\u000a                    ),\u000a                    stream: "stderr"\u000a                });\u000a            } else if (data.type === "unknown_plugins") {\u000a                if (data.plugins.length > 0) {\u000a                    self.loglines.push({line: " ", stream: "message"});\u000a                    self.loglines.push({\u000a                        line: _.sprintf(\u000a                            gettext(\u000a                                "There are %(count)d plugins you'll need to install manually since they aren't registered on the repository:"\u000a                            ),\u000a                            {count: data.plugins.length}\u000a                        ),\u000a                        stream: "message"\u000a                    });\u000a                    _.each(data.plugins, function (plugin) {\u000a                        self.loglines.push({\u000a                            line: plugin.name + ": " + plugin.url,\u000a                            stream: "message"\u000a                        });\u000a                    });\u000a                    self.loglines.push({line: " ", stream: "message"});\u000a                    self.unknownPlugins(data.plugins);\u000a                }\u000a            } else if (data.type === "logline") {\u000a                self.loglines.push(\u000a                    self._preprocessLine({line: data.line, stream: data.stream})\u000a                );\u000a                self._scrollRestoreOutputToEnd();\u000a            }\u000a        };\u000a\u000a        self._scrollRestoreOutputToEnd = function () {\u000a            self.restoreOutput.scrollTop(\u000a                self.restoreOutput[0].scrollHeight - self.restoreOutput.height()\u000a            );\u000a        };\u000a\u000a        self._forcedStdoutLine = /You are using pip version .*?, however version .*? is available\u005c.|You should consider upgrading via the '.*?' command\u005c./;\u000a        self._preprocessLine = function (line) {\u000a            if (line.stream === "stderr" && line.line.match(self._forcedStdoutLine)) {\u000a                line.stream = "stdout";\u000a            }\u000a            return line;\u000a        };\u000a\u000a        self._bulkRemove = function (files) {\u000a            var title, message, handler;\u000a\u000a            title = gettext("Deleting backups");\u000a            message = _.sprintf(gettext("Deleting %(count)d backups..."), {\u000a                count: files.length\u000a            });\u000a            handler = function (filename) {\u000a                return OctoPrint.plugins.backup\u000a                    .deleteBackup(filename)\u000a                    .done(function () {\u000a                        deferred.notify(\u000a                            _.sprintf(gettext("Deleted %(filename)s..."), {\u000a                                filename: _.escape(filename)\u000a                            }),\u000a                            true\u000a                        );\u000a                    })\u000a                    .fail(function (jqXHR) {\u000a                        var short = _.sprintf(\u000a                            gettext("Deletion of %(filename)s failed, continuing..."),\u000a                            {filename: _.escape(filename)}\u000a                        );\u000a                        var long = _.sprintf(\u000a                            gettext("Deletion of %(filename)s failed: %(error)s"),\u000a                            {\u000a                                filename: _.escape(filename),\u000a                                error: _.escape(jqXHR.responseText)\u000a                            }\u000a                        );\u000a                        deferred.notify(short, long, false);\u000a                    });\u000a            };\u000a\u000a            var deferred = $.Deferred();\u000a\u000a            var promise = deferred.promise();\u000a\u000a            var options = {\u000a                title: title,\u000a                message: message,\u000a                max: files.length,\u000a                output: true\u000a            };\u000a            showProgressModal(options, promise);\u000a\u000a            var requests = [];\u000a            _.each(files, function (filename) {\u000a                var request = handler(filename);\u000a                requests.push(request);\u000a            });\u000a            $.when.apply($, _.map(requests, wrapPromiseWithAlways)).done(function () {\u000a                deferred.resolve();\u000a                self.requestData();\u000a            });\u000a\u000a            return promise;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: BackupViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel"],\u000a        elements: ["#settings_plugin_backup", "#wizard_plugin_backup"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.