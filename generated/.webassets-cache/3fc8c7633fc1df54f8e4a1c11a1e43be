V// source: js/app/viewmodels/connection.js\u000a$(function () {\u000a    function ConnectionViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a        self.printerProfiles = parameters[2];\u000a        self.access = parameters[3];\u000a\u000a        self.printerProfiles.profiles.items.subscribe(function () {\u000a            var allProfiles = self.printerProfiles.profiles.items();\u000a\u000a            var printerOptions = [];\u000a            _.each(allProfiles, function (profile) {\u000a                printerOptions.push({id: profile.id, name: profile.name});\u000a            });\u000a            self.printerOptions(printerOptions);\u000a        });\u000a\u000a        self.printerProfiles.currentProfile.subscribe(function () {\u000a            self.selectedPrinter(self.printerProfiles.currentProfile());\u000a        });\u000a\u000a        self.portOptions = ko.observableArray(undefined);\u000a        self.baudrateOptions = ko.observableArray(undefined);\u000a        self.printerOptions = ko.observableArray(undefined);\u000a        self.selectedPort = ko.observable(undefined);\u000a        self.selectedBaudrate = ko.observable(undefined);\u000a        self.selectedPrinter = ko.observable(undefined);\u000a        self.saveSettings = ko.observable(undefined);\u000a        self.autoconnect = ko.observable(undefined);\u000a\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a\u000a        self.buttonText = ko.pureComputed(function () {\u000a            if (self.isErrorOrClosed()) return gettext("Connect");\u000a            else return gettext("Disconnect");\u000a        });\u000a\u000a        self.previousIsOperational = undefined;\u000a\u000a        self.refreshVisible = ko.observable(true);\u000a\u000a        self.requestData = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.CONNECTION)) {\u000a                return;\u000a            }\u000a\u000a            OctoPrint.connection.getSettings().done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            var ports = response.options.ports;\u000a            var baudrates = response.options.baudrates;\u000a            var currentPort = response.current.port;\u000a            var currentBaudrate = response.current.baudrate;\u000a            var currentPrinterProfile = response.current.printerProfile;\u000a            var portPreference = response.options.portPreference;\u000a            var baudratePreference = response.options.baudratePreference;\u000a            var printerPreference = response.options.printerProfilePreference;\u000a            var printerProfiles = response.options.printerProfiles;\u000a\u000a            self.portOptions(ports);\u000a            self.baudrateOptions(baudrates);\u000a\u000a            if (!self.selectedPort() && ports) {\u000a                if (ports.indexOf(currentPort) >= 0) {\u000a                    self.selectedPort(currentPort);\u000a                } else if (ports.indexOf(portPreference) >= 0) {\u000a                    self.selectedPort(portPreference);\u000a                }\u000a            }\u000a            if (!self.selectedBaudrate() && baudrates) {\u000a                if (baudrates.indexOf(currentBaudrate) >= 0) {\u000a                    self.selectedBaudrate(currentBaudrate);\u000a                } else if (baudrates.indexOf(baudratePreference) >= 0) {\u000a                    self.selectedBaudrate(baudratePreference);\u000a                }\u000a            }\u000a            if (!self.selectedPrinter() && printerProfiles) {\u000a                if (printerProfiles.indexOf(currentPrinterProfile) >= 0) {\u000a                    self.selectedPrinter(currentPrinterProfile);\u000a                } else if (printerProfiles.indexOf(printerPreference) >= 0) {\u000a                    self.selectedPrinter(printerPreference);\u000a                }\u000a            }\u000a\u000a            self.saveSettings(false);\u000a        };\u000a\u000a        self.fromHistoryData = function (data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self.fromCurrentData = function (data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self.openOrCloseOnStateChange = function (force) {\u000a            if (!self._startupComplete && !force) return;\u000a\u000a            var connectionTab = $("#connection");\u000a            if (self.isOperational() && connectionTab.hasClass("in")) {\u000a                connectionTab.collapse("hide");\u000a                self.refreshVisible(false);\u000a            } else if (!self.isOperational() && !connectionTab.hasClass("in")) {\u000a                connectionTab.collapse("show");\u000a                self.refreshVisible(true);\u000a            }\u000a        };\u000a\u000a        self._processStateData = function (data) {\u000a            self.previousIsOperational = self.isOperational();\u000a\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a\u000a            if (self.previousIsOperational !== self.isOperational()) {\u000a                // only open or close if the panel is visible (for admins) and\u000a                // the state just changed to avoid thwarting manual open/close\u000a                self.openOrCloseOnStateChange();\u000a            }\u000a        };\u000a\u000a        self.connect = function () {\u000a            if (self.isErrorOrClosed()) {\u000a                var data = {\u000a                    port: self.selectedPort() || "AUTO",\u000a                    baudrate: self.selectedBaudrate() || 0,\u000a                    printerProfile: self.selectedPrinter(),\u000a                    autoconnect: self.settings.serial_autoconnect()\u000a                };\u000a\u000a                if (self.saveSettings()) data["save"] = true;\u000a\u000a                OctoPrint.connection.connect(data).done(function () {\u000a                    self.settings.requestData();\u000a                    self.settings.printerProfiles.requestData();\u000a                });\u000a            } else {\u000a                if (!self.isPrinting() && !self.isPaused()) {\u000a                    self.requestData();\u000a                    OctoPrint.connection.disconnect();\u000a                } else {\u000a                    showConfirmationDialog({\u000a                        title: gettext("Are you sure?"),\u000a                        message: gettext(\u000a                            "<p><strong>You are about to disconnect from the printer while a print " +\u000a                                "is in progress.</strong></p>" +\u000a                                "<p>Disconnecting while a print is in progress will prevent OctoPrint from " +\u000a                                "completing the print. If you're printing from an SD card attached directly " +\u000a                                "to the printer, any attempt to restart OctoPrint or reconnect to the printer " +\u000a                                "could interrupt the print.<p>"\u000a                        ),\u000a                        question: gettext(\u000a                            "Are you sure you want to disconnect from the printer?"\u000a                        ),\u000a                        cancel: gettext("Stay Connected"),\u000a                        proceed: gettext("Disconnect"),\u000a                        onproceed: function () {\u000a                            self.requestData();\u000a                            OctoPrint.connection.disconnect();\u000a                        }\u000a                    });\u000a                }\u000a            }\u000a        };\u000a\u000a        self.onEventSettingsUpdated = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventConnected = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventDisconnected = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            var connectionTab = $("#connection");\u000a            connectionTab.on("show", function () {\u000a                self.refreshVisible(true);\u000a            });\u000a            connectionTab.on("hide", function () {\u000a                self.refreshVisible(false);\u000a            });\u000a        };\u000a\u000a        self.onStartupComplete = function () {\u000a            self.openOrCloseOnStateChange(true);\u000a        };\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            self.requestData();\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: ConnectionViewModel,\u000a        dependencies: [\u000a            "loginStateViewModel",\u000a            "settingsViewModel",\u000a            "printerProfilesViewModel",\u000a            "accessViewModel"\u000a        ],\u000a        elements: ["#connection_wrapper"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.