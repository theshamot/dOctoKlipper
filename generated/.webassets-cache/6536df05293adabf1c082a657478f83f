V// source: plugin/klipper/js/klipper_graph.js\u000a// <Octoprint Klipper Plugin>\u000a\u000a// This program is free software: you can redistribute it and/or modify\u000a// it under the terms of the GNU Affero General Public License as\u000a// published by the Free Software Foundation, either version 3 of the\u000a// License, or (at your option) any later version.\u000a \u000a// This program is distributed in the hope that it will be useful,\u000a// but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a// GNU Affero General Public License for more details.\u000a \u000a// You should have received a copy of the GNU Affero General Public License\u000a// along with this program.  If not, see <https://www.gnu.org/licenses/>.\u000a\u000a$(function() {\u000a\u000afunction KlipperGraphViewModel(parameters) {\u000a   var self = this;\u000a   self.loginState = parameters[0];\u000a   \u000a   self.header = OctoPrint.getRequestHeaders({\u000a      "content-type": "application/json",\u000a      "cache-control": "no-cache"\u000a   });\u000a   \u000a   self.apiUrl = OctoPrint.getSimpleApiUrl("klipper");\u000a   \u000a   self.availableLogFiles = ko.observableArray();\u000a   self.logFile = ko.observable();\u000a   self.status = ko.observable();\u000a   self.datasets = ko.observableArray();\u000a   self.datasetFill = ko.observable(false);\u000a   self.canvas;\u000a   self.canvasContext;\u000a   self.chart;\u000a   self.spinnerDialog;\u000a\u000a   self.onStartup = function() {\u000a      self.canvas = $("#klipper_graph_canvas")[0]\u000a      self.canvasContext = self.canvas.getContext("2d");\u000a      self.spinnerDialog = $("#klipper_graph_spinner");\u000a      \u000a      Chart.defaults.global.elements.line.borderWidth=1;\u000a      Chart.defaults.global.elements.line.fill= false;\u000a      Chart.defaults.global.elements.point.radius= 0;\u000a      \u000a      var myChart = new Chart(self.canvas, {\u000a         type: "line"\u000a      });\u000a      \u000a      if(self.loginState.loggedIn()) {\u000a         self.listLogFiles();\u000a      }\u000a   }\u000a   \u000a   self.onUserLoggedIn = function(user) {\u000a      self.listLogFiles();\u000a   }\u000a   \u000a   self.listLogFiles = function() {\u000a      var settings = {\u000a        "crossDomain": true,\u000a        "url": self.apiUrl,\u000a        "method": "POST",\u000a        "headers": self.header,\u000a        "processData": false,\u000a        "dataType": "json",\u000a        "data": JSON.stringify({command: "listLogFiles"})\u000a      }\u000a      \u000a      $.ajax(settings).done(function (response) {\u000a         self.availableLogFiles.removeAll();\u000a         self.availableLogFiles(response["data"]);\u000a      });\u000a   }\u000a   \u000a   self.saveGraphToPng = function() {\u000a      button =  $('#download-btn');\u000a      var dataURL = self.canvas.toDataURL("image/png");//.replace("image/png", "image/octet-stream");\u000a      button.attr("href", dataURL);\u000a   }\u000a   \u000a   self.showSpinner = function(showDialog) {\u000a      if (showDialog) {\u000a         self.spinnerDialog.modal({\u000a            show: true,\u000a            keyboard: false,\u000a            backdrop: "static" \u000a         });\u000a      } else {\u000a         self.spinnerDialog.modal("hide");\u000a      }\u000a   }\u000a   \u000a   self.toggleDatasetFill = function() {\u000a      if(self.datasets) {\u000a         for (i=0; i < self.datasets().length; i++) {\u000a            self.datasets()[i].fill = self.datasetFill();\u000a         }\u000a         self.chart.update();\u000a      }\u000a      return true\u000a   }\u000a   \u000a   self.convertTime = function(val) {\u000a      return moment(val, "X");\u000a   }\u000a   \u000a   self.loadData = function() {\u000a      var settings = {\u000a        "crossDomain": true,\u000a        "url": self.apiUrl,\u000a        "method": "POST",\u000a        "headers": self.header,\u000a        "processData": false,\u000a        "dataType": "json",\u000a        "data": JSON.stringify(\u000a           {\u000a              command: "getStats",\u000a              logFile: self.logFile()\u000a           }\u000a        )\u000a      }\u000a      \u000a      self.showSpinner(true);\u000a      \u000a      $.ajax(settings).done(function (response) {\u000a         self.status("")\u000a         self.datasetFill(false);\u000a         \u000a         self.showSpinner(false);\u000a         \u000a         if("error" in response) {\u000a            self.status(response.error);\u000a         } else {\u000a            self.datasets.removeAll();\u000a            self.datasets.push(\u000a            {\u000a               label: "MCU Load",\u000a               backgroundColor: "rgba(199, 44, 59, 0.5)",\u000a               borderColor: "rgb(199, 44, 59)",\u000a               yAxisID: 'y-axis-1',\u000a               data: response.loads\u000a            });\u000a            \u000a            self.datasets.push(\u000a            {\u000a               label: "Bandwith",\u000a               backgroundColor: "rgba(255, 130, 1, 0.5)",\u000a               borderColor: "rgb(255, 130, 1)",\u000a               yAxisID: 'y-axis-1',\u000a               data: response.bwdeltas\u000a            });\u000a            \u000a            self.datasets.push(\u000a            {\u000a               label: "Host Buffer",\u000a               backgroundColor: "rgba(0, 145, 106, 0.5)",\u000a               borderColor: "rgb(0, 145, 106)",\u000a               yAxisID: 'y-axis-1',\u000a               data: response.buffers\u000a            });\u000a            \u000a            self.datasets.push(\u000a            {\u000a               label: "Awake Time",\u000a               backgroundColor: "rgba(33, 64, 95, 0.5)",\u000a               borderColor: "rgb(33, 64, 95)",\u000a               yAxisID: 'y-axis-1',\u000a               data: response.awake\u000a            });\u000a            \u000a            self.chart = new Chart(self.canvas, {\u000a               type: "line",\u000a               data: {\u000a                  labels: response.times,\u000a                  datasets: self.datasets()\u000a               },\u000a               options: {\u000a                  elements:{\u000a                     line: {\u000a                        tension: 0\u000a                     }\u000a                  },\u000a                  scales: {\u000a                     xAxes: [{\u000a                        type: 'time',\u000a                        time: {\u000a                           parser:  self.convertTime,\u000a                           tooltipFormat: "HH:mm",\u000a                           displayFormats: {\u000a                              minute: "HH:mm",\u000a                              second: "HH:mm",\u000a                              millisecond: "HH:mm"\u000a                           }\u000a                        },\u000a                        scaleLabel: {\u000a                           display: true,\u000a                           labelString: 'Time'\u000a                        }\u000a                     }],\u000a                     yAxes: [{\u000a                        scaleLabel: {\u000a                           display: true,\u000a                           labelString: '%'\u000a                        },\u000a                        position: 'left',\u000a                        id: 'y-axis-1'\u000a                     }\u000a                     ]\u000a                  },\u000a                  legend: {\u000a                     \u000a                  }\u000a               }\u000a            });\u000a         }\u000a      });\u000a   }\u000a}\u000a\u000aOCTOPRINT_VIEWMODELS.push({\u000a      construct: KlipperGraphViewModel,\u000a      dependencies: ["loginStateViewModel"],\u000a      elements: ["#klipper_graph_dialog"]\u000a   });\u000a});\u000a\u000a;\u000a
p0
.