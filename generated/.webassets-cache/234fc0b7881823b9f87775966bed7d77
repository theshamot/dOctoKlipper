V// source: plugin/firmware_check/js/firmware_check.js\u000a$(function () {\u000a    function FirmwareCheckViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.printerState = parameters[1];\u000a        self.access = parameters[2];\u000a        self.settings = parameters[3];\u000a\u000a        self.warnings = ko.observableArray([]);\u000a        self.infos = ko.observableArray([]);\u000a\u000a        self.disablingInfos = ko.observable(false);\u000a\u000a        self.requestData = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_FIRMWARE_CHECK_DISPLAY\u000a                )\u000a            ) {\u000a                self.warnings([]);\u000a                return;\u000a            }\u000a\u000a            OctoPrint.plugins.firmware_check\u000a                .get()\u000a                .done(self.fromResponse)\u000a                .fail(function () {\u000a                    self.warnings([]);\u000a                });\u000a        };\u000a\u000a        self.fromResponse = function (data) {\u000a            var warnings = [];\u000a            var infos = [];\u000a            _.each(data, function (data, warning_type) {\u000a                var item = {\u000a                    type: warning_type,\u000a                    message: gettext(data.message),\u000a                    severity: data.severity,\u000a                    url: data.url\u000a                };\u000a                if (data.severity === "info") {\u000a                    if (!self.settings.settings.plugins.firmware_check.ignore_infos()) {\u000a                        infos.push(item);\u000a                    }\u000a                } else {\u000a                    warnings.push(item);\u000a                }\u000a            });\u000a            self.warnings(warnings);\u000a            self.infos(infos);\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        var subbed = false;\u000a        self.onStartup = self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            if (\u000a                self.settings &&\u000a                self.settings.settings &&\u000a                self.settings.settings.plugins &&\u000a                self.settings.settings.plugins.firmware_check &&\u000a                !subbed\u000a            ) {\u000a                subbed = true;\u000a                self.settings.settings.plugins.firmware_check.ignore_infos.subscribe(\u000a                    function () {\u000a                        self.requestData();\u000a                    }\u000a                );\u000a            }\u000a\u000a            self.requestData();\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a            if (plugin !== "firmware_check") return;\u000a            if (!data.hasOwnProperty("type")) return;\u000a\u000a            if (data.type === "update") {\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self.cssClass = function (data) {\u000a            if (data.severity) {\u000a                return "firmware_check_warning_" + data.severity;\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self.warningText = function (data) {\u000a            switch (data.type) {\u000a                case "firmware-unsafe":\u000a                    return gettext("Critical Warning: Firmware Unsafe");\u000a                case "firmware-broken":\u000a                    return gettext("Warning: Firmware Broken");\u000a                case "firmware-development":\u000a                    return gettext("Info: Firmware Development Build");\u000a                default:\u000a                    return data.severity === "critical"\u000a                        ? gettext("Critical Warning")\u000a                        : data.severity === "warning"\u000a                        ? gettext("Warning")\u000a                        : gettext("Info");\u000a            }\u000a        };\u000a\u000a        self.disableInfos = function () {\u000a            if (self.loginState.hasPermission(self.access.permissions.SETTINGS)) {\u000a                self.disablingInfos(true);\u000a                OctoPrint.settings\u000a                    .savePluginSettings("firmware_check", {ignore_infos: true})\u000a                    .always(function () {\u000a                        self.disablingInfos(false);\u000a                    });\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: FirmwareCheckViewModel,\u000a        dependencies: [\u000a            "loginStateViewModel",\u000a            "printerStateViewModel",\u000a            "accessViewModel",\u000a            "settingsViewModel"\u000a        ],\u000a        elements: [\u000a            "#sidebar_plugin_firmware_check_warning_wrapper",\u000a            "#sidebar_plugin_firmware_check_info_wrapper"\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.