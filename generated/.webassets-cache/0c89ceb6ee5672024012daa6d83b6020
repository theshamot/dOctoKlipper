V// source: plugin/softwareupdate/js/softwareupdate.js\u000a$(function () {\u000a    function SoftwareUpdateViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.printerState = parameters[1];\u000a        self.settings = parameters[2];\u000a        self.access = parameters[3];\u000a\u000a        // optional\u000a\u000a        self.piSupport = parameters[4]; // might be null!\u000a\u000a        self.popup = undefined;\u000a\u000a        self.updateInProgress = false;\u000a        self.waitingForRestart = false;\u000a        self.restartTimeout = undefined;\u000a\u000a        self.currentlyBeingUpdated = [];\u000a\u000a        self.working = ko.observable(false);\u000a        self.workingTitle = ko.observable();\u000a        self.workingDialog = undefined;\u000a        self.workingOutput = undefined;\u000a        self.loglines = ko.observableArray([]);\u000a\u000a        self.checking = ko.observable(false);\u000a\u000a        self.octoprintReleasedVersion = ko.observable();\u000a\u000a        self.octoprintUnconfigured = ko.pureComputed(function () {\u000a            return (\u000a                self.settings.settings.plugins.softwareupdate.octoprint_type() ===\u000a                    "git_commit" && self.error_checkoutFolder()\u000a            );\u000a        });\u000a        self.octoprintUnreleased = ko.pureComputed(function () {\u000a            return (\u000a                self.settings.settings.plugins.softwareupdate.octoprint_type() ===\u000a                    "github_release" && !self.octoprintReleasedVersion()\u000a            );\u000a        });\u000a\u000a        self.environmentSupported = ko.observable(true);\u000a        self.environmentVersions = ko.observableArray([]);\u000a\u000a        self.storageSufficient = ko.observable(true);\u000a        self.storageFree = ko.observableArray([]);\u000a\u000a        self.cacheTimestamp = ko.observable();\u000a        self.cacheTimestampText = ko.pureComputed(function () {\u000a            return formatDate(self.cacheTimestamp());\u000a        });\u000a\u000a        self.config_cacheTtl = ko.observable();\u000a        self.config_notifyUsers = ko.observable();\u000a        self.config_trackedBranch = ko.observable();\u000a        self.config_checkoutFolder = ko.observable();\u000a        self.config_pipTarget = ko.observable();\u000a        self.config_checkType = ko.observable();\u000a        self.config_releaseChannel = ko.observable();\u000a        self.config_pipEnableCheck = ko.observable();\u000a        self.config_minimumFreeStorage = ko.observable();\u000a\u000a        self.error_checkoutFolder = ko.pureComputed(function () {\u000a            return (\u000a                self.config_checkType() === "git_commit" &&\u000a                (!self.config_checkoutFolder() ||\u000a                    self.config_checkoutFolder().trim() === "")\u000a            );\u000a        });\u000a\u000a        self.enableUpdate = ko.pureComputed(function () {\u000a            return (\u000a                !self.updateInProgress &&\u000a                self.environmentSupported() &&\u000a                self.storageSufficient() &&\u000a                !self.printerState.isPrinting() &&\u000a                !self.throttled()\u000a            );\u000a        });\u000a\u000a        self.enable_configSave = ko.pureComputed(function () {\u000a            return (\u000a                self.config_checkType() === "github_release" ||\u000a                self.config_checkType() === "github_commit" ||\u000a                (self.config_checkType() === "git_commit" && !self.error_checkoutFolder())\u000a            );\u000a        });\u000a\u000a        self.configurationDialog = undefined;\u000a        self._updateClicked = false;\u000a\u000a        self.config_availableCheckTypes = ko.observableArray([]);\u000a        self.config_availableReleaseChannels = ko.observableArray([]);\u000a\u000a        self.reloadOverlay = $("#reloadui_overlay");\u000a\u000a        self.versions = new ItemListHelper(\u000a            "plugin.softwareupdate.versions",\u000a            {\u000a                name: function (a, b) {\u000a                    // sorts ascending, puts octoprint first\u000a                    if (a.key.toLocaleLowerCase() === "octoprint") return -1;\u000a                    if (b.key.toLocaleLowerCase() === "octoprint") return 1;\u000a\u000a                    if (\u000a                        a.displayName.toLocaleLowerCase() <\u000a                        b.displayName.toLocaleLowerCase()\u000a                    )\u000a                        return -1;\u000a                    if (\u000a                        a.displayName.toLocaleLowerCase() >\u000a                        b.displayName.toLocaleLowerCase()\u000a                    )\u000a                        return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            0\u000a        );\u000a\u000a        self.availableAndPossible = ko.pureComputed(function () {\u000a            return _.filter(self.versions.items(), function (info) {\u000a                return info.updateAvailable && info.updatePossible;\u000a            });\u000a        });\u000a\u000a        self.availableAndPossibleAndEnabled = ko.pureComputed(function () {\u000a            return _.filter(self.versions.items(), function (info) {\u000a                return info.updateAvailable && info.updatePossible && !info.disabled;\u000a            });\u000a        });\u000a\u000a        self.throttled = ko.pureComputed(function () {\u000a            return (\u000a                self.piSupport &&\u000a                self.piSupport.currentIssue() &&\u000a                !self.settings.settings.plugins.pluginmanager.ignore_throttled()\u000a            );\u000a        });\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            if (\u000a                self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_SOFTWAREUPDATE_CHECK\u000a                )\u000a            ) {\u000a                self.performCheck();\u000a            } else {\u000a                self._closePopup();\u000a            }\u000a        };\u000a\u000a        self._showPopup = function (options, eventListeners, singleButtonNotify) {\u000a            singleButtonNotify = singleButtonNotify || false;\u000a\u000a            self._closePopup();\u000a\u000a            if (singleButtonNotify) {\u000a                self.popup = PNotify.singleButtonNotify(options);\u000a            } else {\u000a                self.popup = new PNotify(options);\u000a            }\u000a\u000a            if (eventListeners) {\u000a                var popupObj = self.popup.get();\u000a                _.each(eventListeners, function (value, key) {\u000a                    popupObj.on(key, value);\u000a                });\u000a            }\u000a        };\u000a\u000a        self._updatePopup = function (options) {\u000a            if (self.popup === undefined) {\u000a                self._showPopup(options);\u000a            } else {\u000a                self.popup.update(options);\u000a            }\u000a        };\u000a\u000a        self._closePopup = function () {\u000a            if (self.popup !== undefined) {\u000a                self.popup.remove();\u000a            }\u000a        };\u000a\u000a        self.showPluginSettings = function () {\u000a            self._copyConfig();\u000a            self.configurationDialog.modal();\u000a        };\u000a\u000a        self.savePluginSettings = function (viewModel, event) {\u000a            var target = $(event.target);\u000a            target.prepend('<i class="fa fa-spinner fa-spin"></i> ');\u000a\u000a            var data = {\u000a                plugins: {\u000a                    softwareupdate: {\u000a                        cache_ttl: parseInt(self.config_cacheTtl()),\u000a                        notify_users: self.config_notifyUsers(),\u000a                        octoprint_type: self.config_checkType(),\u000a                        octoprint_release_channel: self.config_releaseChannel(),\u000a                        octoprint_checkout_folder: self.config_checkoutFolder(),\u000a                        octoprint_tracked_branch: self.config_trackedBranch(),\u000a                        octoprint_pip_target: self.config_pipTarget(),\u000a                        pip_enable_check: self.config_pipEnableCheck(),\u000a                        minimum_free_storage: self.config_minimumFreeStorage()\u000a                    }\u000a                }\u000a            };\u000a            self.settings.saveData(data, {\u000a                success: function () {\u000a                    self.configurationDialog.modal("hide");\u000a                    self._copyConfig();\u000a                    self.performCheck();\u000a                },\u000a                complete: function () {\u000a                    $("i.fa-spinner", target).remove();\u000a                },\u000a                sending: true\u000a            });\u000a        };\u000a\u000a        self._copyConfig = function () {\u000a            var availableCheckTypes = [\u000a                {key: "github_release", name: gettext("Release")},\u000a                {key: "github_commit", name: gettext("Github Commit")},\u000a                {key: "git_commit", name: gettext("Local checkout")}\u000a            ];\u000a            self.config_availableCheckTypes(availableCheckTypes);\u000a\u000a            var availableReleaseChannels = [];\u000a            _.each(\u000a                self.settings.settings.plugins.softwareupdate.octoprint_branch_mappings(),\u000a                function (mapping) {\u000a                    availableReleaseChannels.push({\u000a                        key: mapping.branch(),\u000a                        name: gettext(mapping.name() || mapping.branch())\u000a                    });\u000a                }\u000a            );\u000a            self.config_availableReleaseChannels(availableReleaseChannels);\u000a\u000a            self.config_cacheTtl(\u000a                self.settings.settings.plugins.softwareupdate.cache_ttl()\u000a            );\u000a            self.config_notifyUsers(\u000a                self.settings.settings.plugins.softwareupdate.notify_users()\u000a            );\u000a\u000a            self.config_checkType(\u000a                self.settings.settings.plugins.softwareupdate.octoprint_type()\u000a            );\u000a            self.config_releaseChannel(\u000a                self.settings.settings.plugins.softwareupdate.octoprint_release_channel()\u000a            );\u000a            self.config_checkoutFolder(\u000a                self.settings.settings.plugins.softwareupdate.octoprint_checkout_folder()\u000a            );\u000a            self.config_trackedBranch(\u000a                self.settings.settings.plugins.softwareupdate.octoprint_tracked_branch()\u000a            );\u000a            self.config_pipTarget(\u000a                self.settings.settings.plugins.softwareupdate.octoprint_pip_target()\u000a            );\u000a\u000a            self.config_pipEnableCheck(\u000a                self.settings.settings.plugins.softwareupdate.pip_enable_check()\u000a            );\u000a\u000a            self.config_minimumFreeStorage(\u000a                self.settings.settings.plugins.softwareupdate.minimum_free_storage()\u000a            );\u000a        };\u000a\u000a        self._copyConfigBack = function () {\u000a            self.settings.settings.plugins.softwareupdate.octoprint_checkout_folder(\u000a                self.config_checkoutFolder()\u000a            );\u000a            self.settings.settings.plugins.softwareupdate.octoprint_type(\u000a                self.config_checkType()\u000a            );\u000a        };\u000a\u000a        self.fromCheckResponse = function (data, ignoreSeen, showIfNothingNew) {\u000a            self.cacheTimestamp(data.timestamp);\u000a\u000a            var versions = [];\u000a            _.each(data.information, function (value, key) {\u000a                value["key"] = key;\u000a\u000a                if (!value.hasOwnProperty("displayName") || value.displayName === "") {\u000a                    value.displayName = value.key;\u000a                }\u000a                if (\u000a                    !value.hasOwnProperty("displayVersion") ||\u000a                    value.displayVersion === ""\u000a                ) {\u000a                    value.displayVersion = value.information.local.name;\u000a                }\u000a                if (!value.hasOwnProperty("releaseNotes") || value.releaseNotes === "") {\u000a                    value.releaseNotes = undefined;\u000a                }\u000a\u000a                var fullNameTemplate = gettext("%(name)s: %(version)s");\u000a                value.fullNameLocal = _.sprintf(fullNameTemplate, {\u000a                    name: _.escape(value.displayName),\u000a                    version: _.escape(value.displayVersion)\u000a                });\u000a\u000a                var fullNameRemoteVars = {\u000a                    name: _.escape(value.displayName),\u000a                    version: gettext("unknown")\u000a                };\u000a                if (\u000a                    value.hasOwnProperty("information") &&\u000a                    value.information.hasOwnProperty("remote") &&\u000a                    value.information.remote.hasOwnProperty("name")\u000a                ) {\u000a                    fullNameRemoteVars.version = _.escape(value.information.remote.name);\u000a                }\u000a                value.fullNameRemote = _.sprintf(fullNameTemplate, fullNameRemoteVars);\u000a\u000a                if (value.releaseChannels && value.releaseChannels.current) {\u000a                    value.releaseChannels.current = ko.observable(\u000a                        value.releaseChannels.current\u000a                    );\u000a                    value.releaseChannels.current.subscribe(function (selected) {\u000a                        var patch = {};\u000a                        patch[key] = {channel: selected};\u000a                        OctoPrint.plugins.softwareupdate\u000a                            .configure(patch)\u000a                            .done(function () {\u000a                                self.performCheck(false, false, false, [key]);\u000a                            });\u000a                    });\u000a                }\u000a\u000a                value.toggleDisabled = function () {\u000a                    var patch = {};\u000a                    patch[key] = {disabled: !value.disabled};\u000a                    OctoPrint.plugins.softwareupdate.configure(patch).done(function () {\u000a                        self.performCheck(false, false, false, [key]);\u000a                    });\u000a                };\u000a\u000a                versions.push(value);\u000a            });\u000a            self.versions.updateItems(versions);\u000a\u000a            var octoprint = data.information["octoprint"];\u000a            self.octoprintReleasedVersion(!octoprint || octoprint.releasedVersion);\u000a\u000a            self.environmentSupported(data.environment.supported);\u000a            self.environmentVersions(data.environment.versions);\u000a\u000a            self.storageSufficient(data.storage.sufficient);\u000a            self.storageFree(data.storage.free);\u000a\u000a            if (data.status === "inProgress") {\u000a                self._markWorking(\u000a                    gettext("Updating..."),\u000a                    gettext("Updating, please wait.")\u000a                );\u000a                return;\u000a            }\u000a\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_SOFTWAREUPDATE_UPDATE\u000a                ) &&\u000a                !self.settings.settings.plugins.softwareupdate.notify_users()\u000a            )\u000a                return;\u000a\u000a            if (data.status === "updateAvailable" || data.status === "updatePossible") {\u000a                var text =\u000a                    "<div class='softwareupdate_notification'>" +\u000a                    gettext("There are updates available for the following components:");\u000a\u000a                text += "<ul class='fa-ul'>";\u000a                _.each(self.versions.items(), function (update_info) {\u000a                    if (update_info.updateAvailable && !update_info.disabled) {\u000a                        text +=\u000a                            "<li>" +\u000a                            "<i class='fa fa-li " +\u000a                            (update_info.updatePossible &&\u000a                            self.environmentSupported() &&\u000a                            self.storageSufficient()\u000a                                ? "fa-check"\u000a                                : "fa-remove") +\u000a                            "'></i>" +\u000a                            "<span class='name' title='" +\u000a                            update_info.fullNameRemote +\u000a                            "'>" +\u000a                            update_info.fullNameRemote +\u000a                            "</span>" +\u000a                            (update_info.releaseNotes\u000a                                ? '<a href="' +\u000a                                  update_info.releaseNotes +\u000a                                  '" target="_blank">' +\u000a                                  gettext("Release Notes") +\u000a                                  "</a>"\u000a                                : "") +\u000a                            "</li>";\u000a                    }\u000a                });\u000a                text += "</ul>";\u000a\u000a                if (!self.environmentSupported()) {\u000a                    text +=\u000a                        "<p><small>" +\u000a                        gettext(\u000a                            "This version of the Python environment is not supported for direct updates."\u000a                        ) +\u000a                        "</small></p>";\u000a                } else if (!self.storageSufficient()) {\u000a                    text +=\u000a                        "<p><small>" +\u000a                        gettext(\u000a                            "There's currently not enough free disk space available for a direct update."\u000a                        ) +\u000a                        "</small></p>";\u000a                } else {\u000a                    text +=\u000a                        "<p><small>" +\u000a                        gettext(\u000a                            'Those components marked with <i class="fa fa-check"></i> can be updated directly.'\u000a                        ) +\u000a                        "</small></p>";\u000a                }\u000a\u000a                if (\u000a                    !self.loginState.hasPermission(\u000a                        self.access.permissions.PLUGIN_SOFTWAREUPDATE_UPDATE\u000a                    )\u000a                ) {\u000a                    text +=\u000a                        "<p><small>" +\u000a                        gettext(\u000a                            "To have updates applied, get in touch with an administrator of this OctoPrint instance."\u000a                        ) +\u000a                        "</small></p>";\u000a                }\u000a\u000a                text += "</div>";\u000a\u000a                var options = {\u000a                    title: gettext("Update Available"),\u000a                    text: text,\u000a                    hide: false\u000a                };\u000a                var eventListeners = {};\u000a\u000a                var singleButtonNotify = false;\u000a                if (\u000a                    data.status === "updatePossible" &&\u000a                    self.loginState.hasPermission(\u000a                        self.access.permissions.PLUGIN_SOFTWAREUPDATE_UPDATE\u000a                    )\u000a                ) {\u000a                    // if update is possible and user is admin, add action buttons for ignore and update\u000a                    options["confirm"] = {\u000a                        confirm: true,\u000a                        buttons: [\u000a                            {\u000a                                text: gettext("Ignore"),\u000a                                click: function () {\u000a                                    self._markNotificationAsSeen(data.information);\u000a                                    self._showPopup({\u000a                                        text: gettext(\u000a                                            'You can make this message display again via "Settings" > "Software Update" > "Check for update now"'\u000a                                        )\u000a                                    });\u000a                                }\u000a                            },\u000a                            {\u000a                                text: gettext("Update now"),\u000a                                addClass: "btn-primary",\u000a                                click: function () {\u000a                                    if (self._updateClicked) return;\u000a                                    self._updateClicked = true;\u000a                                    self.updateEnabled();\u000a                                }\u000a                            }\u000a                        ]\u000a                    };\u000a                    options["buttons"] = {\u000a                        closer: false,\u000a                        sticker: false\u000a                    };\u000a                } else {\u000a                    // if update is not possible or user is not admin, only add ignore button\u000a                    options["confirm"] = {\u000a                        confirm: true,\u000a                        buttons: [\u000a                            {\u000a                                text: gettext("Ignore"),\u000a                                click: function (notice) {\u000a                                    notice.remove();\u000a                                    self._markNotificationAsSeen(data.information);\u000a                                }\u000a                            }\u000a                        ]\u000a                    };\u000a                    options["buttons"] = {\u000a                        closer: false,\u000a                        sticker: false\u000a                    };\u000a                    singleButtonNotify = true;\u000a                }\u000a\u000a                if (\u000a                    (ignoreSeen || !self._hasNotificationBeenSeen(data.information)) &&\u000a                    !OctoPrint.coreui.wizardOpen\u000a                ) {\u000a                    self._showPopup(options, eventListeners, singleButtonNotify);\u000a                }\u000a            } else if (data.status === "current") {\u000a                if (showIfNothingNew) {\u000a                    self._showPopup({\u000a                        title: gettext("Everything is up-to-date"),\u000a                        type: "success"\u000a                    });\u000a                } else {\u000a                    self._closePopup();\u000a                }\u000a            }\u000a        };\u000a\u000a        self.performCheck = function (showIfNothingNew, force, ignoreSeen, entries) {\u000a            self.checking(true);\u000a            OctoPrint.plugins.softwareupdate\u000a                .check({entries: entries, force: force})\u000a                .done(function (data) {\u000a                    self.fromCheckResponse(data, ignoreSeen, showIfNothingNew);\u000a                })\u000a                .always(function () {\u000a                    self.checking(false);\u000a                });\u000a        };\u000a\u000a        self.iconTitleForEntry = function (data) {\u000a            if (data.updatePossible) {\u000a                return "";\u000a            } else if (\u000a                !data.online &&\u000a                data.information &&\u000a                data.information.needs_online\u000a            ) {\u000a                return gettext("No internet connection");\u000a            } else if (data.error) {\u000a                return self.errorTextForEntry(data);\u000a            } else {\u000a                return gettext("Update not possible");\u000a            }\u000a        };\u000a\u000a        self.errorTextForEntry = function (data) {\u000a            if (!data.error) {\u000a                return "";\u000a            }\u000a\u000a            switch (data.error) {\u000a                case "unknown_check": {\u000a                    return gettext("Unknown update check, configuration ok?");\u000a                }\u000a                case "needs_online": {\u000a                    return gettext("Cannot check for update, need online connection");\u000a                }\u000a                case "network": {\u000a                    return gettext("Network error while checking for update");\u000a                }\u000a                case "ratelimit": {\u000a                    return gettext(\u000a                        "Rate limit exceeded while checking for update, please try again later"\u000a                    );\u000a                }\u000a                case "check": {\u000a                    return gettext("Check internal error while checking for update");\u000a                }\u000a                case "unknown": {\u000a                    return gettext(\u000a                        "Unknown error while checking for update, please check the logs"\u000a                    );\u000a                }\u000a                default: {\u000a                    return "";\u000a                }\u000a            }\u000a        };\u000a\u000a        self._markNotificationAsSeen = function (data) {\u000a            if (!Modernizr.localstorage) return false;\u000a\u000a            var currentString = localStorage["plugin.softwareupdate.seen_information"];\u000a            var current;\u000a            if (currentString === undefined) {\u000a                current = {};\u000a            } else {\u000a                current = JSON.parse(currentString);\u000a            }\u000a            current[self.loginState.username()] = self._informationToRemoteVersions(data);\u000a            localStorage["plugin.softwareupdate.seen_information"] = JSON.stringify(\u000a                current\u000a            );\u000a        };\u000a\u000a        self._hasNotificationBeenSeen = function (data) {\u000a            if (!Modernizr.localstorage) return false;\u000a\u000a            if (localStorage["plugin.softwareupdate.seen_information"] === undefined)\u000a                return false;\u000a\u000a            var knownData = JSON.parse(\u000a                localStorage["plugin.softwareupdate.seen_information"]\u000a            );\u000a\u000a            var userData = knownData[self.loginState.username()];\u000a            if (userData === undefined) return false;\u000a\u000a            var freshData = self._informationToRemoteVersions(data);\u000a\u000a            var hasBeenSeen = true;\u000a            _.each(freshData, function (value, key) {\u000a                if (!_.has(userData, key) || userData[key] !== freshData[key]) {\u000a                    hasBeenSeen = false;\u000a                }\u000a            });\u000a            return hasBeenSeen;\u000a        };\u000a\u000a        self._informationToRemoteVersions = function (data) {\u000a            var result = {};\u000a            _.each(data, function (value, key) {\u000a                result[key] = value.information.remote.value;\u000a            });\u000a            return result;\u000a        };\u000a\u000a        self.performUpdate = function (force, items) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_SOFTWAREUPDATE_UPDATE\u000a                )\u000a            )\u000a                return;\u000a            if (self.printerState.isPrinting()) return;\u000a\u000a            self.updateInProgress = true;\u000a\u000a            var options = {\u000a                title: gettext("Updating..."),\u000a                text: gettext("Now updating, please wait."),\u000a                icon: "fa fa-cog fa-spin",\u000a                hide: false,\u000a                buttons: {\u000a                    closer: false,\u000a                    sticker: false\u000a                }\u000a            };\u000a            self._showPopup(options);\u000a\u000a            OctoPrint.plugins.softwareupdate\u000a                .update(items, force)\u000a                .done(function (data) {\u000a                    self.currentlyBeingUpdated = data.checks;\u000a                    self._markWorking(\u000a                        gettext("Updating..."),\u000a                        gettext("Updating, please wait.")\u000a                    );\u000a                })\u000a                .fail(function () {\u000a                    self.updateInProgress = false;\u000a                    self._showPopup({\u000a                        title: gettext("Update not started!"),\u000a                        text: gettext(\u000a                            "The update could not be started. Is it already active? Please consult octoprint.log for details."\u000a                        ),\u000a                        type: "error",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    });\u000a                });\u000a        };\u000a\u000a        self.updateAll = function (force) {\u000a            return self.update(force, self.availableAndPossible());\u000a        };\u000a\u000a        self.updateEnabled = function (force) {\u000a            return self.update(force, self.availableAndPossibleAndEnabled());\u000a        };\u000a\u000a        self.update = function (force, items) {\u000a            if (\u000a                self.updateInProgress ||\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_SOFTWAREUPDATE_UPDATE\u000a                )\u000a            ) {\u000a                self._updateClicked = false;\u000a                return;\u000a            }\u000a\u000a            if (items === undefined) {\u000a                items = self.availableAndPossibleAndEnabled();\u000a            }\u000a\u000a            if (self.printerState.isPrinting()) {\u000a                self._showPopup({\u000a                    title: gettext("Can't update while printing"),\u000a                    text: gettext(\u000a                        "A print job is currently in progress. Updating will be prevented until it is done."\u000a                    ),\u000a                    type: "error"\u000a                });\u000a                self._updateClicked = false;\u000a                return;\u000a            }\u000a\u000a            if (self.throttled()) {\u000a                self._showPopup({\u000a                    title: gettext("Can't update while throttled"),\u000a                    text: gettext(\u000a                        "Your system is currently throttled. OctoPrint refuses to run updates while in this state due to possible stability issues."\u000a                    ),\u000a                    type: "error"\u000a                });\u000a                self._updateClicked = false;\u000a                return;\u000a            }\u000a\u000a            var html =\u000a                "<p>" +\u000a                gettext(\u000a                    "This will update the following components and restart the server:"\u000a                ) +\u000a                "</p>";\u000a            html += "<ul>";\u000a            _.each(items, function (item) {\u000a                html +=\u000a                    "<li>" +\u000a                    '<span class="name" title="' +\u000a                    item.fullNameRemote +\u000a                    '">' +\u000a                    item.fullNameRemote +\u000a                    "</span>";\u000a                if (item.releaseNotes) {\u000a                    html +=\u000a                        '<br><a href="' +\u000a                        item.releaseNotes +\u000a                        '" target="_blank" rel="noreferrer noopener">' +\u000a                        gettext("Release Notes") +\u000a                        "</a>";\u000a                }\u000a                html += "</li>";\u000a            });\u000a            html += "</ul>";\u000a            html +=\u000a                "<p>" +\u000a                gettext(\u000a                    "Be sure to read through any linked release notes, especially those for OctoPrint since they might contain important information you need to know <strong>before</strong> upgrading."\u000a                ) +\u000a                "</p>" +\u000a                "<p><strong>" +\u000a                gettext("This action may disrupt any ongoing print jobs.") +\u000a                "</strong></p>" +\u000a                "<p>" +\u000a                gettext(\u000a                    "Depending on your printer's controller and general setup, restarting OctoPrint may cause your printer to be reset."\u000a                ) +\u000a                "</p>" +\u000a                "<p>" +\u000a                gettext("Are you sure you want to proceed?") +\u000a                "</p>";\u000a            showConfirmationDialog({\u000a                title: gettext("Are you sure you want to update now?"),\u000a                html: html,\u000a                proceed: gettext("Proceed"),\u000a                onproceed: function () {\u000a                    self.performUpdate(\u000a                        force === true,\u000a                        _.map(items, function (info) {\u000a                            return info.key;\u000a                        })\u000a                    );\u000a                },\u000a                onclose: function () {\u000a                    self._updateClicked = false;\u000a                }\u000a            });\u000a        };\u000a\u000a        self._showWorkingDialog = function (title) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_SOFTWAREUPDATE_CHECK\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            self.working(true);\u000a            self.workingTitle(title);\u000a            self.workingDialog.modal({keyboard: false, backdrop: "static", show: true});\u000a        };\u000a\u000a        self._markWorking = function (title, line, stream) {\u000a            if (stream === undefined) {\u000a                stream = "message";\u000a            }\u000a\u000a            self.loglines.removeAll();\u000a            self.loglines.push({line: line, stream: stream});\u000a            self._showWorkingDialog(title);\u000a        };\u000a\u000a        self._markDone = function (line, stream) {\u000a            if (stream === undefined) {\u000a                stream = "message";\u000a            }\u000a\u000a            self.working(false);\u000a            self.loglines.push({line: "", stream: stream});\u000a            self.loglines.push({line: line, stream: stream});\u000a            self._scrollWorkingOutputToEnd();\u000a        };\u000a\u000a        self._scrollWorkingOutputToEnd = function () {\u000a            self.workingOutput.scrollTop(\u000a                self.workingOutput[0].scrollHeight - self.workingOutput.height()\u000a            );\u000a        };\u000a\u000a        self.onBeforeWizardTabChange = function (next, current) {\u000a            if (next && next === "#wizard_plugin_softwareupdate") {\u000a                // switching to the plugin wizard tab\u000a                self._copyConfig();\u000a            } else if (current && current === "#wizard_plugin_softwareupdate") {\u000a                // switching away from the plugin wizard tab\u000a                self._copyConfigBack();\u000a            }\u000a\u000a            return true;\u000a        };\u000a\u000a        self.onAfterWizardFinish = function () {\u000a            // we might have changed our config, so we need to refresh our check data from the server\u000a            self.performCheck();\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            self.workingDialog = $("#settings_plugin_softwareupdate_workingdialog");\u000a            self.workingOutput = $(\u000a                "#settings_plugin_softwareupdate_workingdialog_output"\u000a            );\u000a            self.configurationDialog = $(\u000a                "#settings_plugin_softwareupdate_configurationdialog"\u000a            );\u000a        };\u000a\u000a        self.onServerDisconnect = function () {\u000a            if (self.restartTimeout !== undefined) {\u000a                clearTimeout(self.restartTimeout);\u000a            }\u000a            return true;\u000a        };\u000a\u000a        self.onEventConnectivityChanged = function (payload) {\u000a            if (!payload || !payload.new) return;\u000a            self.performCheck();\u000a        };\u000a\u000a        self.onDataUpdaterReconnect = function () {\u000a            if (self.waitingForRestart) {\u000a                self.waitingForRestart = false;\u000a                self.updateInProgress = false;\u000a                if (!self.reloadOverlay.is(":visible")) {\u000a                    self.reloadOverlay.show();\u000a                }\u000a            }\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a            if (plugin !== "softwareupdate") {\u000a                return;\u000a            }\u000a\u000a            var messageType = data.type;\u000a            var messageData = data.data;\u000a\u000a            var options = undefined;\u000a\u000a            var restartType = undefined;\u000a            var title = undefined;\u000a            var text = undefined;\u000a\u000a            switch (messageType) {\u000a                // make sure we are marked as working if we get any of the in-progress messages\u000a                case "loglines":\u000a                case "updating":\u000a                case "restarting":\u000a                case "restart_manually":\u000a                case "restart_failed":\u000a                case "success":\u000a                case "error": {\u000a                    if (!self.working()) {\u000a                        self._markWorking(\u000a                            gettext("Updating..."),\u000a                            gettext("Updating, please wait.")\u000a                        );\u000a                    }\u000a                    break;\u000a                }\u000a            }\u000a\u000a            switch (messageType) {\u000a                case "loglines": {\u000a                    _.each(messageData.loglines, function (line) {\u000a                        self.loglines.push(self._preprocessLine(line));\u000a                    });\u000a                    self._scrollWorkingOutputToEnd();\u000a                    break;\u000a                }\u000a                case "updating": {\u000a                    text = _.sprintf(gettext("Now updating %(name)s to %(version)s"), {\u000a                        name: _.escape(messageData.name),\u000a                        version: _.escape(messageData.version)\u000a                    });\u000a                    self.loglines.push({line: "", stream: "separator"});\u000a                    self.loglines.push({\u000a                        line: _.repeat("+", text.length),\u000a                        stream: "separator"\u000a                    });\u000a                    self.loglines.push({line: text, stream: "message"});\u000a                    self.loglines.push({\u000a                        line: _.repeat("+", text.length),\u000a                        stream: "separator"\u000a                    });\u000a                    self._scrollWorkingOutputToEnd();\u000a                    self._updatePopup({\u000a                        text: text,\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    });\u000a\u000a                    break;\u000a                }\u000a                case "restarting": {\u000a                    title = gettext("Update successful, restarting!");\u000a                    text = gettext(\u000a                        "The update finished successfully and the server will now be restarted."\u000a                    );\u000a\u000a                    options = {\u000a                        title: title,\u000a                        text: text,\u000a                        type: "success",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a\u000a                    self.loglines.push({line: text, stream: "message"});\u000a                    self._scrollWorkingOutputToEnd();\u000a\u000a                    self.waitingForRestart = true;\u000a                    self.restartTimeout = setTimeout(function () {\u000a                        title = gettext("Restart failed");\u000a                        text = gettext(\u000a                            "The server apparently did not restart by itself, you'll have to do it manually. Please consult octoprint.log on what went wrong."\u000a                        );\u000a\u000a                        self._showPopup({\u000a                            title: title,\u000a                            text: text,\u000a                            type: "error",\u000a                            hide: false,\u000a                            buttons: {\u000a                                sticker: false\u000a                            }\u000a                        });\u000a                        self.waitingForRestart = false;\u000a\u000a                        self._markDone(text, "message_error");\u000a                    }, 60000);\u000a\u000a                    break;\u000a                }\u000a                case "restart_manually": {\u000a                    restartType = messageData.restart_type;\u000a                    text = gettext(\u000a                        "The update finished successfully, please restart OctoPrint now."\u000a                    );\u000a                    if (restartType === "environment") {\u000a                        text = gettext(\u000a                            "The update finished successfully, please reboot the server now."\u000a                        );\u000a                    }\u000a\u000a                    title = gettext("Update successful, restart required!");\u000a                    options = {\u000a                        title: title,\u000a                        text: text,\u000a                        type: "success",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a                    self.updateInProgress = false;\u000a                    self._markDone(text);\u000a                    break;\u000a                }\u000a                case "restart_failed": {\u000a                    restartType = messageData.restart_type;\u000a                    text = gettext(\u000a                        "Restarting OctoPrint failed, please restart it manually. You might also want to consult octoprint.log on what went wrong here."\u000a                    );\u000a                    if (restartType === "environment") {\u000a                        text = gettext(\u000a                            "Rebooting the server failed, please reboot it manually. You might also want to consult octoprint.log on what went wrong here."\u000a                        );\u000a                    }\u000a\u000a                    title = gettext("Restart failed");\u000a                    options = {\u000a                        title: title,\u000a                        test: text,\u000a                        type: "error",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a                    self.waitingForRestart = false;\u000a                    self.updateInProgress = false;\u000a                    self._markDone(text, "message_error");\u000a                    break;\u000a                }\u000a                case "success": {\u000a                    title = gettext("Update successful!");\u000a                    text = gettext("The update finished successfully.");\u000a                    options = {\u000a                        title: title,\u000a                        text: text,\u000a                        type: "success",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a                    self.updateInProgress = false;\u000a                    self._markDone(text);\u000a                    break;\u000a                }\u000a                case "error": {\u000a                    title = gettext("Update failed!");\u000a                    text = gettext(\u000a                        "The update did not finish successfully. Please consult <code>octoprint.log</code> and <code>plugin_softwareupdate_console.log</code> for details."\u000a                    );\u000a                    self._showPopup({\u000a                        title: title,\u000a                        text: text,\u000a                        type: "error",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    });\u000a                    self.updateInProgress = false;\u000a                    self._markDone(text, "message_error");\u000a                    break;\u000a                }\u000a                case "update_versions": {\u000a                    self.performCheck();\u000a                    break;\u000a                }\u000a            }\u000a\u000a            if (options !== undefined) {\u000a                self._showPopup(options);\u000a            }\u000a        };\u000a\u000a        self._forcedStdoutPatterns = [\u000a            "You are using pip version .*?, however version .*? is available.",\u000a            "You should consider upgrading via the '.*?' command.",\u000a            "'.*?' does not exist -- can't clean it"\u000a        ];\u000a        self._forcedStdoutLine = new RegExp(self._forcedStdoutPatterns.join("|"));\u000a        self._preprocessLine = function (line) {\u000a            if (line.stream === "stderr" && line.line.match(self._forcedStdoutLine)) {\u000a                line.stream = "stdout";\u000a            }\u000a            return line;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: SoftwareUpdateViewModel,\u000a        dependencies: [\u000a            "loginStateViewModel",\u000a            "printerStateViewModel",\u000a            "settingsViewModel",\u000a            "accessViewModel",\u000a            "piSupportViewModel"\u000a        ],\u000a        optional: ["piSupportViewModel"],\u000a        elements: [\u000a            "#settings_plugin_softwareupdate",\u000a            "#softwareupdate_confirmation_dialog",\u000a            "#wizard_plugin_softwareupdate"\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.