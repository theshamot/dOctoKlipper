V// source: js/lib/bootstrap/bootstrap-modalmanager.js\u000a/* ===========================================================\u000a * bootstrap-modalmanager.js v2.2.5\u000a * ===========================================================\u000a * Copyright 2012 Jordan Schroter.\u000a *\u000a * Licensed under the Apache License, Version 2.0 (the "License");\u000a * you may not use this file except in compliance with the License.\u000a * You may obtain a copy of the License at\u000a *\u000a * http://www.apache.org/licenses/LICENSE-2.0\u000a *\u000a * Unless required by applicable law or agreed to in writing, software\u000a * distributed under the License is distributed on an "AS IS" BASIS,\u000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\u000a * See the License for the specific language governing permissions and\u000a * limitations under the License.\u000a * ========================================================== */\u000a\u000a!function ($) {\u000a\u000a	"use strict"; // jshint ;_;\u000a\u000a	/* MODAL MANAGER CLASS DEFINITION\u000a	* ====================== */\u000a\u000a	var ModalManager = function (element, options) {\u000a		this.init(element, options);\u000a	};\u000a\u000a	ModalManager.prototype = {\u000a\u000a		constructor: ModalManager,\u000a\u000a		init: function (element, options) {\u000a			this.$element = $(element);\u000a			this.options = $.extend({}, $.fn.modalmanager.defaults, this.$element.data(), typeof options == 'object' && options);\u000a			this.stack = [];\u000a			this.backdropCount = 0;\u000a\u000a			if (this.options.resize) {\u000a				var resizeTimeout,\u000a					that = this;\u000a\u000a				$(window).on('resize.modal', function(){\u000a					resizeTimeout && clearTimeout(resizeTimeout);\u000a					resizeTimeout = setTimeout(function(){\u000a						for (var i = 0; i < that.stack.length; i++){\u000a							that.stack[i].isShown && that.stack[i].layout();\u000a						}\u000a					}, 10);\u000a				});\u000a			}\u000a		},\u000a\u000a		createModal: function (element, options) {\u000a			$(element).modal($.extend({ manager: this }, options));\u000a		},\u000a\u000a		appendModal: function (modal) {\u000a			this.stack.push(modal);\u000a\u000a			var that = this;\u000a\u000a			modal.$element.on('show.modalmanager', targetIsSelf(function (e) {\u000a\u000a				var showModal = function(){\u000a					modal.isShown = true;\u000a\u000a					var transition = $.support.transition && modal.$element.hasClass('fade');\u000a\u000a					that.$element\u000a						.toggleClass('modal-open', that.hasOpenModal())\u000a						.toggleClass('page-overflow', $(window).height() < that.$element.height());\u000a\u000a					modal.$parent = modal.$element.parent();\u000a\u000a					modal.$container = that.createContainer(modal);\u000a\u000a					modal.$element.appendTo(modal.$container);\u000a\u000a					that.backdrop(modal, function () {\u000a						modal.$element.show();\u000a\u000a						if (transition) {\u000a							//modal.$element[0].style.display = 'run-in';\u000a							modal.$element[0].offsetWidth;\u000a							//modal.$element.one($.support.transition.end, function () { modal.$element[0].style.display = 'block' });\u000a						}\u000a\u000a						modal.layout();\u000a\u000a						modal.$element\u000a							.addClass('in')\u000a							.attr('aria-hidden', false);\u000a\u000a						var complete = function () {\u000a							that.setFocus();\u000a							modal.$element.trigger('shown');\u000a						};\u000a\u000a						transition ?\u000a							modal.$element.one($.support.transition.end, complete) :\u000a							complete();\u000a					});\u000a				};\u000a\u000a				modal.options.replace ?\u000a					that.replace(showModal) :\u000a					showModal();\u000a			}));\u000a\u000a			modal.$element.on('hidden.modalmanager', targetIsSelf(function (e) {\u000a				that.backdrop(modal);\u000a				// handle the case when a modal may have been removed from the dom before this callback executes\u000a				if (!modal.$element.parent().length) {\u000a					that.destroyModal(modal);\u000a				} else if (modal.$backdrop){\u000a					var transition = $.support.transition && modal.$element.hasClass('fade');\u000a\u000a					// trigger a relayout due to firebox's buggy transition end event\u000a					if (transition) { modal.$element[0].offsetWidth; }\u000a					$.support.transition && modal.$element.hasClass('fade') ?\u000a						modal.$backdrop.one($.support.transition.end, function () { modal.destroy(); }) :\u000a						modal.destroy();\u000a				} else {\u000a					modal.destroy();\u000a				}\u000a\u000a			}));\u000a\u000a			modal.$element.on('destroyed.modalmanager', targetIsSelf(function (e) {\u000a				that.destroyModal(modal);\u000a			}));\u000a		},\u000a\u000a		getOpenModals: function () {\u000a			var openModals = [];\u000a			for (var i = 0; i < this.stack.length; i++){\u000a				if (this.stack[i].isShown) openModals.push(this.stack[i]);\u000a			}\u000a\u000a			return openModals;\u000a		},\u000a\u000a		hasOpenModal: function () {\u000a			return this.getOpenModals().length > 0;\u000a		},\u000a\u000a		setFocus: function () {\u000a			var topModal;\u000a\u000a			for (var i = 0; i < this.stack.length; i++){\u000a				if (this.stack[i].isShown) topModal = this.stack[i];\u000a			}\u000a\u000a			if (!topModal) return;\u000a\u000a			topModal.focus();\u000a		},\u000a\u000a		destroyModal: function (modal) {\u000a			modal.$element.off('.modalmanager');\u000a			if (modal.$backdrop) this.removeBackdrop(modal);\u000a			this.stack.splice(this.getIndexOfModal(modal), 1);\u000a\u000a			var hasOpenModal = this.hasOpenModal();\u000a\u000a			this.$element.toggleClass('modal-open', hasOpenModal);\u000a\u000a			if (!hasOpenModal){\u000a				this.$element.removeClass('page-overflow');\u000a			}\u000a\u000a			this.removeContainer(modal);\u000a\u000a			this.setFocus();\u000a		},\u000a\u000a		getModalAt: function (index) {\u000a			return this.stack[index];\u000a		},\u000a\u000a		getIndexOfModal: function (modal) {\u000a			for (var i = 0; i < this.stack.length; i++){\u000a				if (modal === this.stack[i]) return i;\u000a			}\u000a		},\u000a\u000a		replace: function (callback) {\u000a			var topModal;\u000a\u000a			for (var i = 0; i < this.stack.length; i++){\u000a				if (this.stack[i].isShown) topModal = this.stack[i];\u000a			}\u000a\u000a			if (topModal) {\u000a				this.$backdropHandle = topModal.$backdrop;\u000a				topModal.$backdrop = null;\u000a\u000a				callback && topModal.$element.one('hidden',\u000a					targetIsSelf( $.proxy(callback, this) ));\u000a\u000a				topModal.hide();\u000a			} else if (callback) {\u000a				callback();\u000a			}\u000a		},\u000a\u000a		removeBackdrop: function (modal) {\u000a			modal.$backdrop.remove();\u000a			modal.$backdrop = null;\u000a		},\u000a\u000a		createBackdrop: function (animate, tmpl) {\u000a			var $backdrop;\u000a\u000a			if (!this.$backdropHandle) {\u000a				$backdrop = $(tmpl)\u000a					.addClass(animate)\u000a					.appendTo(this.$element);\u000a			} else {\u000a				$backdrop = this.$backdropHandle;\u000a				$backdrop.off('.modalmanager');\u000a				this.$backdropHandle = null;\u000a				this.isLoading && this.removeSpinner();\u000a			}\u000a\u000a			return $backdrop;\u000a		},\u000a\u000a		removeContainer: function (modal) {\u000a			modal.$container.remove();\u000a			modal.$container = null;\u000a		},\u000a\u000a		createContainer: function (modal) {\u000a			var $container;\u000a\u000a			$container = $('<div class="modal-scrollable">')\u000a				.css('z-index', getzIndex('modal', this.getOpenModals().length))\u000a				.appendTo(this.$element);\u000a\u000a			if (modal && modal.options.backdrop != 'static') {\u000a				$container.on('click.modal', targetIsSelf(function (e) {\u000a					modal.hide();\u000a				}));\u000a			} else if (modal) {\u000a				$container.on('click.modal', targetIsSelf(function (e) {\u000a					modal.attention();\u000a				}));\u000a			}\u000a\u000a			return $container;\u000a\u000a		},\u000a\u000a		backdrop: function (modal, callback) {\u000a			var animate = modal.$element.hasClass('fade') ? 'fade' : '',\u000a				showBackdrop = modal.options.backdrop &&\u000a					this.backdropCount < this.options.backdropLimit;\u000a\u000a			if (modal.isShown && showBackdrop) {\u000a				var doAnimate = $.support.transition && animate && !this.$backdropHandle;\u000a\u000a				modal.$backdrop = this.createBackdrop(animate, modal.options.backdropTemplate);\u000a\u000a				modal.$backdrop.css('z-index', getzIndex( 'backdrop', this.getOpenModals().length ));\u000a\u000a				if (doAnimate) modal.$backdrop[0].offsetWidth; // force reflow\u000a\u000a				modal.$backdrop.addClass('in');\u000a\u000a				this.backdropCount += 1;\u000a\u000a				doAnimate ?\u000a					modal.$backdrop.one($.support.transition.end, callback) :\u000a					callback();\u000a\u000a			} else if (!modal.isShown && modal.$backdrop) {\u000a				modal.$backdrop.removeClass('in');\u000a\u000a				this.backdropCount -= 1;\u000a\u000a				var that = this;\u000a\u000a				$.support.transition && modal.$element.hasClass('fade')?\u000a					modal.$backdrop.one($.support.transition.end, function () { that.removeBackdrop(modal) }) :\u000a					that.removeBackdrop(modal);\u000a\u000a			} else if (callback) {\u000a				callback();\u000a			}\u000a		},\u000a\u000a		removeSpinner: function(){\u000a			this.$spinner && this.$spinner.remove();\u000a			this.$spinner = null;\u000a			this.isLoading = false;\u000a		},\u000a\u000a		removeLoading: function () {\u000a			this.$backdropHandle && this.$backdropHandle.remove();\u000a			this.$backdropHandle = null;\u000a			this.removeSpinner();\u000a		},\u000a\u000a		loading: function (callback) {\u000a			callback = callback || function () { };\u000a\u000a			this.$element\u000a				.toggleClass('modal-open', !this.isLoading || this.hasOpenModal())\u000a				.toggleClass('page-overflow', $(window).height() < this.$element.height());\u000a\u000a			if (!this.isLoading) {\u000a\u000a				this.$backdropHandle = this.createBackdrop('fade', this.options.backdropTemplate);\u000a\u000a				this.$backdropHandle[0].offsetWidth; // force reflow\u000a\u000a				var openModals = this.getOpenModals();\u000a\u000a				this.$backdropHandle\u000a					.css('z-index', getzIndex('backdrop', openModals.length + 1))\u000a					.addClass('in');\u000a\u000a				var $spinner = $(this.options.spinner)\u000a					.css('z-index', getzIndex('modal', openModals.length + 1))\u000a					.appendTo(this.$element)\u000a					.addClass('in');\u000a\u000a				this.$spinner = $(this.createContainer())\u000a					.append($spinner)\u000a					.on('click.modalmanager', $.proxy(this.loading, this));\u000a\u000a				this.isLoading = true;\u000a\u000a				$.support.transition ?\u000a					this.$backdropHandle.one($.support.transition.end, callback) :\u000a					callback();\u000a\u000a			} else if (this.isLoading && this.$backdropHandle) {\u000a				this.$backdropHandle.removeClass('in');\u000a\u000a				var that = this;\u000a				$.support.transition ?\u000a					this.$backdropHandle.one($.support.transition.end, function () { that.removeLoading() }) :\u000a					that.removeLoading();\u000a\u000a			} else if (callback) {\u000a				callback(this.isLoading);\u000a			}\u000a		}\u000a	};\u000a\u000a	/* PRIVATE METHODS\u000a	* ======================= */\u000a\u000a	// computes and caches the zindexes\u000a	var getzIndex = (function () {\u000a		var zIndexFactor,\u000a			baseIndex = {};\u000a\u000a		return function (type, pos) {\u000a\u000a			if (typeof zIndexFactor === 'undefined'){\u000a				var $baseModal = $('<div class="modal hide" />').appendTo('body'),\u000a					$baseBackdrop = $('<div class="modal-backdrop hide" />').appendTo('body');\u000a\u000a				baseIndex['modal'] = +$baseModal.css('z-index');\u000a				baseIndex['backdrop'] = +$baseBackdrop.css('z-index');\u000a				zIndexFactor = baseIndex['modal'] - baseIndex['backdrop'];\u000a\u000a				$baseModal.remove();\u000a				$baseBackdrop.remove();\u000a				$baseBackdrop = $baseModal = null;\u000a			}\u000a\u000a			return baseIndex[type] + (zIndexFactor * pos);\u000a\u000a		}\u000a	}());\u000a\u000a	// make sure the event target is the modal itself in order to prevent\u000a	// other components such as tabsfrom triggering the modal manager.\u000a	// if Boostsrap namespaced events, this would not be needed.\u000a	function targetIsSelf(callback){\u000a		return function (e) {\u000a			if (e && this === e.target){\u000a				return callback.apply(this, arguments);\u000a			}\u000a		}\u000a	}\u000a\u000a\u000a	/* MODAL MANAGER PLUGIN DEFINITION\u000a	* ======================= */\u000a\u000a	$.fn.modalmanager = function (option, args) {\u000a		return this.each(function () {\u000a			var $this = $(this),\u000a				data = $this.data('modalmanager');\u000a\u000a			if (!data) $this.data('modalmanager', (data = new ModalManager(this, option)));\u000a			if (typeof option === 'string') data[option].apply(data, [].concat(args))\u000a		})\u000a	};\u000a\u000a	$.fn.modalmanager.defaults = {\u000a		backdropLimit: 999,\u000a		resize: true,\u000a		spinner: '<div class="loading-spinner fade" style="width: 200px; margin-left: -100px;"><div class="progress progress-striped active"><div class="bar" style="width: 100%;"></div></div></div>',\u000a		backdropTemplate: '<div class="modal-backdrop" />'\u000a	};\u000a\u000a	$.fn.modalmanager.Constructor = ModalManager\u000a\u000a	// ModalManager handles the modal-open class so we need\u000a	// to remove conflicting bootstrap 3 event handlers\u000a	$(function () {\u000a		$(document).off('show.bs.modal').off('hidden.bs.modal');\u000a	});\u000a\u000a}(jQuery);\u000a\u000a;\u000a
p0
.