V// source: plugin/klipper/js/klipper_leveling.js\u000a// <Octoprint Klipper Plugin>\u000a\u000a// This program is free software: you can redistribute it and/or modify\u000a// it under the terms of the GNU Affero General Public License as\u000a// published by the Free Software Foundation, either version 3 of the\u000a// License, or (at your option) any later version.\u000a \u000a// This program is distributed in the hope that it will be useful,\u000a// but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a// GNU Affero General Public License for more details.\u000a \u000a// You should have received a copy of the GNU Affero General Public License\u000a// along with this program.  If not, see <https://www.gnu.org/licenses/>.\u000a\u000a$(function() {\u000a    function KlipperLevelingViewModel(parameters) {\u000a        var self = this;\u000a        self.settings = parameters[0];\u000a        self.loginState = parameters[1];\u000a        \u000a        self.activePoint = ko.observable(-1);\u000a        self.pointCount = ko.observable();\u000a        self.points = ko.observableArray();\u000a        \u000a        self.initView = function() {\u000a           self.points(self.settings.settings.plugins.klipper.probe.points());\u000a           self.pointCount(\u000a             self.points().length\u000a           );\u000a        }\u000a\u000a        self.startLeveling = function() {\u000a           OctoPrint.control.sendGcode("G28")\u000a           self.moveToPoint(0);\u000a        }\u000a        \u000a        self.stopLeveling = function() {\u000a           OctoPrint.control.sendGcode("G1 Z" +\u000a              (self.settings.settings.plugins.klipper.probe.height()*1 +\u000a               self.settings.settings.plugins.klipper.probe.lift()*1)\u000a           );\u000a           self.gotoHome();\u000a        }\u000a        \u000a        self.gotoHome = function() {\u000a           OctoPrint.control.sendGcode("G28");\u000a           self.activePoint(-1);\u000a        }\u000a        \u000a        self.nextPoint = function() {\u000a           self.moveToPoint(self.activePoint()+1);\u000a        }\u000a        \u000a        self.previousPoint = function() {\u000a           self.moveToPoint(self.activePoint()-1);\u000a        }\u000a        \u000a        self.jumpToPoint = function(item) {\u000a           self.moveToPoint(\u000a              self.points().indexOf(item)\u000a           );\u000a        }\u000a        /*\u000a        self.pointCount = function() {\u000a           return self.settings.settings.plugins.klipper.probe.points().length;\u000a        }\u000a        */\u000a        self.moveToPosition = function(x, y) {\u000a           OctoPrint.control.sendGcode([\u000a              // Move Z up \u000a              "G1 Z" + (self.settings.settings.plugins.klipper.probe.height() * 1 + \u000a              self.settings.settings.plugins.klipper.probe.lift()*1) +\u000a              " F" + self.settings.settings.plugins.klipper.probe.speed_z() ,\u000a              // Move XY\u000a              "G1 X" + x + " Y" + y +\u000a              " F" + self.settings.settings.plugins.klipper.probe.speed_xy() ,\u000a              // Move Z down\u000a              "G1 Z" + self.settings.settings.plugins.klipper.probe.height() +\u000a               " F" + self.settings.settings.plugins.klipper.probe.speed_z()\u000a           ]);\u000a        }\u000a        \u000a        self.moveToPoint = function(index) {\u000a           var point = self.points()[index];\u000a\u000a           self.moveToPosition(point.x(), point.y());\u000a           self.activePoint(index);\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: KlipperLevelingViewModel,\u000a        dependencies: ["settingsViewModel", "loginStateViewModel"],\u000a        elements: ["#klipper_leveling_dialog"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.