V// source: js/lib/ResizeSensor.js\u000a'use strict';\u000a\u000a/**\u000a * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\u000a * directory of this distribution and at\u000a * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\u000a */\u000a(function (root, factory) {\u000a    if (typeof define === "function" && define.amd) {\u000a        define(factory);\u000a    } else if (typeof exports === "object") {\u000a        module.exports = factory();\u000a    } else {\u000a        root.ResizeSensor = factory();\u000a    }\u000a}(typeof window !== 'undefined' ? window : this, function () {\u000a\u000a    // Make sure it does not throw in a SSR (Server Side Rendering) situation\u000a    if (typeof window === "undefined") {\u000a        return null;\u000a    }\u000a    // https://github.com/Semantic-Org/Semantic-UI/issues/3855\u000a    // https://github.com/marcj/css-element-queries/issues/257\u000a    var globalWindow = typeof window != 'undefined' && window.Math == Math\u000a        ? window\u000a        : typeof self != 'undefined' && self.Math == Math\u000a            ? self\u000a            : Function('return this')();\u000a    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\u000a    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\u000a    // would generate too many unnecessary events.\u000a    var requestAnimationFrame = globalWindow.requestAnimationFrame ||\u000a        globalWindow.mozRequestAnimationFrame ||\u000a        globalWindow.webkitRequestAnimationFrame ||\u000a        function (fn) {\u000a            return globalWindow.setTimeout(fn, 20);\u000a        };\u000a\u000a    var cancelAnimationFrame = globalWindow.cancelAnimationFrame ||\u000a        globalWindow.mozCancelAnimationFrame ||\u000a        globalWindow.webkitCancelAnimationFrame ||\u000a        function (timer) {\u000a            globalWindow.clearTimeout(timer);\u000a        };\u000a\u000a    /**\u000a     * Iterate over each of the provided element(s).\u000a     *\u000a     * @param {HTMLElement|HTMLElement[]} elements\u000a     * @param {Function}                  callback\u000a     */\u000a    function forEachElement(elements, callback){\u000a        var elementsType = Object.prototype.toString.call(elements);\u000a        var isCollectionTyped = ('[object Array]' === elementsType\u000a            || ('[object NodeList]' === elementsType)\u000a            || ('[object HTMLCollection]' === elementsType)\u000a            || ('[object Object]' === elementsType)\u000a            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\u000a            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\u000a        );\u000a        var i = 0, j = elements.length;\u000a        if (isCollectionTyped) {\u000a            for (; i < j; i++) {\u000a                callback(elements[i]);\u000a            }\u000a        } else {\u000a            callback(elements);\u000a        }\u000a    }\u000a\u000a    /**\u000a    * Get element size\u000a    * @param {HTMLElement} element\u000a    * @returns {Object} {width, height}\u000a    */\u000a    function getElementSize(element) {\u000a        if (!element.getBoundingClientRect) {\u000a            return {\u000a                width: element.offsetWidth,\u000a                height: element.offsetHeight\u000a            }\u000a        }\u000a\u000a        var rect = element.getBoundingClientRect();\u000a        return {\u000a            width: Math.round(rect.width),\u000a            height: Math.round(rect.height)\u000a        }\u000a    }\u000a\u000a    /**\u000a     * Apply CSS styles to element.\u000a     *\u000a     * @param {HTMLElement} element\u000a     * @param {Object} style\u000a     */\u000a    function setStyle(element, style) {\u000a        Object.keys(style).forEach(function(key) {\u000a            element.style[key] = style[key];\u000a        });\u000a    }\u000a\u000a    /**\u000a     * Class for dimension change detection.\u000a     *\u000a     * @param {Element|Element[]|Elements|jQuery} element\u000a     * @param {Function} callback\u000a     *\u000a     * @constructor\u000a     */\u000a    var ResizeSensor = function(element, callback) {\u000a        //Is used when checking in reset() only for invisible elements\u000a        var lastAnimationFrameForInvisibleCheck = 0;\u000a\u000a        /**\u000a         *\u000a         * @constructor\u000a         */\u000a        function EventQueue() {\u000a            var q = [];\u000a            this.add = function(ev) {\u000a                q.push(ev);\u000a            };\u000a\u000a            var i, j;\u000a            this.call = function(sizeInfo) {\u000a                for (i = 0, j = q.length; i < j; i++) {\u000a                    q[i].call(this, sizeInfo);\u000a                }\u000a            };\u000a\u000a            this.remove = function(ev) {\u000a                var newQueue = [];\u000a                for(i = 0, j = q.length; i < j; i++) {\u000a                    if(q[i] !== ev) newQueue.push(q[i]);\u000a                }\u000a                q = newQueue;\u000a            };\u000a\u000a            this.length = function() {\u000a                return q.length;\u000a            }\u000a        }\u000a\u000a        /**\u000a         *\u000a         * @param {HTMLElement} element\u000a         * @param {Function}    resized\u000a         */\u000a        function attachResizeEvent(element, resized) {\u000a            if (!element) return;\u000a            if (element.resizedAttached) {\u000a                element.resizedAttached.add(resized);\u000a                return;\u000a            }\u000a\u000a            element.resizedAttached = new EventQueue();\u000a            element.resizedAttached.add(resized);\u000a\u000a            element.resizeSensor = document.createElement('div');\u000a            element.resizeSensor.dir = 'ltr';\u000a            element.resizeSensor.className = 'resize-sensor';\u000a\u000a            var style = {\u000a                pointerEvents: 'none',\u000a                position: 'absolute',\u000a                left: '0px',\u000a                top: '0px',\u000a                right: '0px',\u000a                bottom: '0px',\u000a                overflow: 'hidden',\u000a                zIndex: '-1',\u000a                visibility: 'hidden',\u000a                maxWidth: '100%'\u000a            };\u000a            var styleChild = {\u000a                position: 'absolute',\u000a                left: '0px',\u000a                top: '0px',\u000a                transition: '0s',\u000a            };\u000a\u000a            setStyle(element.resizeSensor, style);\u000a\u000a            var expand = document.createElement('div');\u000a            expand.className = 'resize-sensor-expand';\u000a            setStyle(expand, style);\u000a\u000a            var expandChild = document.createElement('div');\u000a            setStyle(expandChild, styleChild);\u000a            expand.appendChild(expandChild);\u000a\u000a            var shrink = document.createElement('div');\u000a            shrink.className = 'resize-sensor-shrink';\u000a            setStyle(shrink, style);\u000a\u000a            var shrinkChild = document.createElement('div');\u000a            setStyle(shrinkChild, styleChild);\u000a            setStyle(shrinkChild, { width: '200%', height: '200%' });\u000a            shrink.appendChild(shrinkChild);\u000a\u000a            element.resizeSensor.appendChild(expand);\u000a            element.resizeSensor.appendChild(shrink);\u000a            element.appendChild(element.resizeSensor);\u000a\u000a            var computedStyle = window.getComputedStyle(element);\u000a            var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\u000a            if ('absolute' !== position && 'relative' !== position && 'fixed' !== position && 'sticky' !== position) {\u000a                element.style.position = 'relative';\u000a            }\u000a\u000a            var dirty = false;\u000a\u000a            //last request animation frame id used in onscroll event\u000a            var rafId = 0;\u000a            var size = getElementSize(element);\u000a            var lastWidth = 0;\u000a            var lastHeight = 0;\u000a            var initialHiddenCheck = true;\u000a            lastAnimationFrameForInvisibleCheck = 0;\u000a\u000a            var resetExpandShrink = function () {\u000a                var width = element.offsetWidth;\u000a                var height = element.offsetHeight;\u000a\u000a                expandChild.style.width = (width + 10) + 'px';\u000a                expandChild.style.height = (height + 10) + 'px';\u000a\u000a                expand.scrollLeft = width + 10;\u000a                expand.scrollTop = height + 10;\u000a\u000a                shrink.scrollLeft = width + 10;\u000a                shrink.scrollTop = height + 10;\u000a            };\u000a\u000a            var reset = function() {\u000a                // Check if element is hidden\u000a                if (initialHiddenCheck) {\u000a                    var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\u000a                    if (invisible) {\u000a                        // Check in next frame\u000a                        if (!lastAnimationFrameForInvisibleCheck){\u000a                            lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function(){\u000a                                lastAnimationFrameForInvisibleCheck = 0;\u000a                                reset();\u000a                            });\u000a                        }\u000a\u000a                        return;\u000a                    } else {\u000a                        // Stop checking\u000a                        initialHiddenCheck = false;\u000a                    }\u000a                }\u000a\u000a                resetExpandShrink();\u000a            };\u000a            element.resizeSensor.resetSensor = reset;\u000a\u000a            var onResized = function() {\u000a                rafId = 0;\u000a\u000a                if (!dirty) return;\u000a\u000a                lastWidth = size.width;\u000a                lastHeight = size.height;\u000a\u000a                if (element.resizedAttached) {\u000a                    element.resizedAttached.call(size);\u000a                }\u000a            };\u000a\u000a            var onScroll = function() {\u000a                size = getElementSize(element);\u000a                dirty = size.width !== lastWidth || size.height !== lastHeight;\u000a\u000a                if (dirty && !rafId) {\u000a                    rafId = requestAnimationFrame(onResized);\u000a                }\u000a\u000a                reset();\u000a            };\u000a\u000a            var addEvent = function(el, name, cb) {\u000a                if (el.attachEvent) {\u000a                    el.attachEvent('on' + name, cb);\u000a                } else {\u000a                    el.addEventListener(name, cb);\u000a                }\u000a            };\u000a\u000a            addEvent(expand, 'scroll', onScroll);\u000a            addEvent(shrink, 'scroll', onScroll);\u000a\u000a            // Fix for custom Elements and invisible elements\u000a            lastAnimationFrameForInvisibleCheck = requestAnimationFrame(function(){\u000a                lastAnimationFrameForInvisibleCheck = 0;\u000a                reset();\u000a            });\u000a        }\u000a\u000a        forEachElement(element, function(elem){\u000a            attachResizeEvent(elem, callback);\u000a        });\u000a\u000a        this.detach = function(ev) {\u000a            // clean up the unfinished animation frame to prevent a potential endless requestAnimationFrame of reset\u000a            if (lastAnimationFrameForInvisibleCheck) {\u000a                cancelAnimationFrame(lastAnimationFrameForInvisibleCheck);\u000a                lastAnimationFrameForInvisibleCheck = 0;\u000a            }\u000a            ResizeSensor.detach(element, ev);\u000a        };\u000a\u000a        this.reset = function() {\u000a            //To prevent invoking element.resizeSensor.resetSensor if it's undefined\u000a            if (element.resizeSensor.resetSensor) {\u000a                element.resizeSensor.resetSensor();\u000a            }\u000a        };\u000a    };\u000a\u000a    ResizeSensor.reset = function(element) {\u000a        forEachElement(element, function(elem){\u000a            //To prevent invoking element.resizeSensor.resetSensor if it's undefined\u000a            if (element.resizeSensor.resetSensor) {\u000a                elem.resizeSensor.resetSensor();\u000a            }\u000a        });\u000a    };\u000a\u000a    ResizeSensor.detach = function(element, ev) {\u000a        forEachElement(element, function(elem){\u000a            if (!elem) return;\u000a            if(elem.resizedAttached && typeof ev === "function"){\u000a                elem.resizedAttached.remove(ev);\u000a                if(elem.resizedAttached.length()) return;\u000a            }\u000a            if (elem.resizeSensor) {\u000a                if (elem.contains(elem.resizeSensor)) {\u000a                    elem.removeChild(elem.resizeSensor);\u000a                }\u000a                delete elem.resizeSensor;\u000a                delete elem.resizedAttached;\u000a            }\u000a        });\u000a    };\u000a\u000a    if (typeof MutationObserver !== "undefined") {\u000a        var observer = new MutationObserver(function (mutations) {\u000a            for (var i in mutations) {\u000a                if (mutations.hasOwnProperty(i)) {\u000a                    var items = mutations[i].addedNodes;\u000a                    for (var j = 0; j < items.length; j++) {\u000a                        if (items[j].resizeSensor) {\u000a                            ResizeSensor.reset(items[j]);\u000a                        }\u000a                    }\u000a                }\u000a            }\u000a        });\u000a\u000a        document.addEventListener("DOMContentLoaded", function (event) {\u000a            observer.observe(document.body, {\u000a                childList: true,\u000a                subtree: true,\u000a            });\u000a        });\u000a    }\u000a\u000a    return ResizeSensor;\u000a\u000a}));\u000a\u000a;\u000a
p0
.