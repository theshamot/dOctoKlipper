V// source: js/app/viewmodels/loginstate.js\u000a$(function () {\u000a    function LoginStateViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginUser = ko.observable("");\u000a        self.loginPass = ko.observable("");\u000a        self.loginRemember = ko.observable(false);\u000a\u000a        self.loggedIn = ko.observable(undefined);\u000a        self.username = ko.observable(undefined);\u000a        self.userneeds = ko.observable(undefined);\u000a        self.isAdmin = ko.observable(false);\u000a        self.isUser = ko.observable(false);\u000a\u000a        self.allViewModels = undefined;\u000a        self.startupDeferred = $.Deferred();\u000a\u000a        self.currentUser = ko.observable(undefined);\u000a        self.currentLoginMechanism = ko.observable(undefined);\u000a\u000a        self.elementUsernameInput = undefined;\u000a        self.elementPasswordInput = undefined;\u000a        self.elementLoginButton = undefined;\u000a\u000a        self.externalAddressNotification = undefined;\u000a\u000a        self.userMenuText = ko.pureComputed(function () {\u000a            if (self.loggedIn()) {\u000a                return self.username();\u000a            } else {\u000a                return gettext("Login");\u000a            }\u000a        });\u000a\u000a        self.userMenuTitle = ko.pureComputed(function () {\u000a            if (self.loggedIn()) {\u000a                return _.sprintf(gettext("Logged in as %(name)s"), {\u000a                    name: _.escape(self.username())\u000a                });\u000a            } else {\u000a                return gettext("Login");\u000a            }\u000a        });\u000a\u000a        self.logoutSupported = ko.pureComputed(function () {\u000a            var mechanism = self.currentLoginMechanism();\u000a            return !(mechanism === "apikey" || mechanism === "authheader");\u000a        });\u000a        self.logoutTooltip = ko.pureComputed(function () {\u000a            var mechanism = self.currentLoginMechanism();\u000a            if (!self.logoutSupported()) {\u000a                var methodMap = {\u000a                    apikey: gettext("API key based login"),\u000a                    authheader: gettext("Authorization header based login")\u000a                };\u000a                return _.sprintf(\u000a                    gettext(\u000a                        "Logout not supported for %(method)s, please close the browser instead"\u000a                    ),\u000a                    {method: methodMap[mechanism]}\u000a                );\u000a            } else {\u000a                return gettext("Logout of OctoPrint");\u000a            }\u000a        });\u000a\u000a        self.reloadUser = function () {\u000a            if (self.currentUser() === undefined) {\u000a                return;\u000a            }\u000a\u000a            return OctoPrint.access.users\u000a                .get(self.currentUser().name)\u000a                .done(self.updateCurrentUserData);\u000a        };\u000a\u000a        self.requestData = function () {\u000a            return OctoPrint.browser\u000a                .passiveLogin()\u000a                .done(self.fromResponse)\u000a                .fail(function () {\u000a                    // something went very wrong, still, proceed\u000a                    self.fromResponse();\u000a                });\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            var process = function () {\u000a                var currentLoggedIn = self.loggedIn();\u000a                var currentNeeds = self.userneeds();\u000a                if (response && response.name) {\u000a                    self.loggedIn(true);\u000a                    self.currentLoginMechanism(response._login_mechanism);\u000a                    self.updateCurrentUserData(response);\u000a                    if (!currentLoggedIn || currentLoggedIn === undefined) {\u000a                        callViewModels(self.allViewModels, "onUserLoggedIn", [response]);\u000a                        log.info("User " + response.name + " logged in");\u000a                    } else if (!_.isEqual(currentNeeds, self.userneeds())) {\u000a                        callViewModels(self.allViewModels, "onUserPermissionsChanged");\u000a                        log.info("User needs for " + response.name + " changed");\u000a                    }\u000a\u000a                    if (response.session) {\u000a                        OctoPrint.socket.sendAuth(response.name, response.session);\u000a                    }\u000a\u000a                    // Show warning if connecting from what seems to be an external IP address, unless ignored\u000a                    var ignorePublicAddressWarning =\u000a                        localStorage["loginState.ignorePublicAddressWarning"];\u000a                    if (ignorePublicAddressWarning === undefined) {\u000a                        ignorePublicAddressWarning = false;\u000a                    } else {\u000a                        ignorePublicAddressWarning = JSON.parse(\u000a                            ignorePublicAddressWarning\u000a                        );\u000a                    }\u000a\u000a                    if (response._is_external_client && !ignorePublicAddressWarning) {\u000a                        var text = gettext(\u000a                            "<p>It seems that you are connecting to OctoPrint over the public internet.</p>" +\u000a                                "<p>This is strongly discouraged unless you have taken proper network security precautions. " +\u000a                                "Your printer is an appliance you really should not be giving access to " +\u000a                                "everyone with an internet connection.</p><p><strong>Please see " +\u000a                                '<a href="%(url)s" target="_blank" rel="noreferrer noopener">this blog post</a> for ' +\u000a                                "ways to safely access your OctoPrint instance from remote.</strong></p>" +\u000a                                "<p><small>If you know what you are doing or you are sure this message is " +\u000a                                "mistaken since you are in an isolated LAN, feel free to ignore it.</small></p>"\u000a                        );\u000a                        text = _.sprintf(text, {\u000a                            url:\u000a                                "https://octoprint.org/blog/2018/09/03/safe-remote-access/"\u000a                        });\u000a\u000a                        if (self.externalAddressNotification !== undefined) {\u000a                            self.externalAddressNotification.remove();\u000a                        }\u000a\u000a                        self.externalAddressNotification = new PNotify({\u000a                            title: gettext("Possible external access detected"),\u000a                            text: text,\u000a                            hide: false,\u000a                            type: "error",\u000a                            confirm: {\u000a                                confirm: true,\u000a                                buttons: [\u000a                                    {\u000a                                        text: gettext("Ignore"),\u000a                                        addClass: "btn btn-danger",\u000a                                        click: function (notice) {\u000a                                            notice.remove();\u000a                                            localStorage[\u000a                                                "loginState.ignorePublicAddressWarning"\u000a                                            ] = JSON.stringify(true);\u000a                                        }\u000a                                    },\u000a                                    {\u000a                                        text: gettext("Later"),\u000a                                        addClass: "btn btn-primary",\u000a                                        click: function (notice) {\u000a                                            notice.remove();\u000a                                        }\u000a                                    }\u000a                                ]\u000a                            },\u000a                            buttons: {\u000a                                sticker: false\u000a                            }\u000a                        });\u000a                    }\u000a\u000a                    if (response._login_mechanism) {\u000a                        log.info("Login mechanism: " + response._login_mechanism);\u000a                    }\u000a                } else {\u000a                    self.loggedIn(false);\u000a                    self.currentLoginMechanism(undefined);\u000a                    self.updateCurrentUserData(response);\u000a                    if (currentLoggedIn || currentLoggedIn === undefined) {\u000a                        callViewModels(self.allViewModels, "onUserLoggedOut");\u000a                        log.info("User logged out");\u000a                    } else if (!_.isEqual(currentNeeds, self.userneeds())) {\u000a                        callViewModels(self.allViewModels, "onUserPermissionsChanged");\u000a                        log.info("User needs for guest changed");\u000a                    }\u000a                }\u000a                OctoPrint.coreui.updateTab();\u000a            };\u000a\u000a            if (self.startupDeferred !== undefined) {\u000a                // Make sure we only fire our "onUserLogged(In|Out)" message after the application\u000a                // has started up.\u000a                self.startupDeferred.done(process);\u000a            } else {\u000a                process();\u000a            }\u000a        };\u000a\u000a        self.updateCurrentUserData = function (data) {\u000a            if (data) {\u000a                self.userneeds(data.needs);\u000a            } else {\u000a                self.userneeds({});\u000a            }\u000a\u000a            if (data && data.name) {\u000a                self.username(data.name);\u000a                self.currentUser(data);\u000a\u000a                // TODO: deprecated, remove in 1.5.0\u000a                self.isUser(data.user);\u000a                self.isAdmin(data.admin);\u000a            } else {\u000a                self.username(undefined);\u000a                self.currentUser(undefined);\u000a\u000a                // TODO: deprecated, remove in 1.5.0\u000a                self.isUser(false);\u000a                self.isAdmin(false);\u000a            }\u000a        };\u000a\u000a        self.login = function (u, p, r, notifications) {\u000a            var username = u || self.loginUser();\u000a            var password = p || self.loginPass();\u000a            var remember = r !== undefined ? r : self.loginRemember();\u000a            notifications = notifications !== false;\u000a\u000a            return OctoPrint.browser\u000a                .login(username, password, remember)\u000a                .done(function (response) {\u000a                    if (notifications) {\u000a                        new PNotify({\u000a                            title: gettext("Login successful"),\u000a                            text: _.sprintf(\u000a                                gettext('You are now logged in as "%(username)s"'),\u000a                                {username: _.escape(response.name)}\u000a                            ),\u000a                            type: "success"\u000a                        });\u000a                    }\u000a                    self.fromResponse(response);\u000a\u000a                    self.loginUser("");\u000a                    self.loginPass("");\u000a                    self.loginRemember(false);\u000a\u000a                    if (history && history.replaceState) {\u000a                        history.replaceState(\u000a                            {success: true},\u000a                            document.title,\u000a                            window.location.pathname\u000a                        );\u000a                    }\u000a                })\u000a                .fail(function (response) {\u000a                    if (!notifications) {\u000a                        return;\u000a                    }\u000a\u000a                    switch (response.status) {\u000a                        case 403: {\u000a                            new PNotify({\u000a                                title: gettext("Login failed"),\u000a                                text: gettext(\u000a                                    "User unknown, wrong password or account deactivated"\u000a                                ),\u000a                                type: "error"\u000a                            });\u000a                            break;\u000a                        }\u000a                    }\u000a                });\u000a        };\u000a\u000a        var _logoutInProgress = false;\u000a        self.logout = function (target, event) {\u000a            if (!self.logoutSupported()) {\u000a                event.stopPropagation();\u000a                return;\u000a            }\u000a\u000a            if (_logoutInProgress) return;\u000a            _logoutInProgress = true;\u000a            return OctoPrint.browser\u000a                .logout()\u000a                .done(function (response) {\u000a                    new PNotify({\u000a                        title: gettext("Logout successful"),\u000a                        text: gettext("You are now logged out"),\u000a                        type: "success"\u000a                    });\u000a                    self.fromResponse(response);\u000a                })\u000a                .fail(function (error) {\u000a                    if (error && error.status === 403) {\u000a                        self.fromResponse(false);\u000a                    }\u000a                })\u000a                .always(function () {\u000a                    _logoutInProgress = false;\u000a                });\u000a        };\u000a\u000a        self.prepareLogin = function (data, event) {\u000a            if (event && event.preventDefault) {\u000a                event.preventDefault();\u000a            }\u000a            self.login();\u000a        };\u000a\u000a        self.onDataUpdaterReauthRequired = function (reason) {\u000a            if (reason === "logout" || reason === "removed") {\u000a                self.logout();\u000a            } else {\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self.onAllBound = function (allViewModels) {\u000a            self.allViewModels = allViewModels;\u000a            self.startupDeferred.resolve();\u000a            self.startupDeferred = undefined;\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            self.elementUsernameInput = $("#login_user");\u000a            self.elementPasswordInput = $("#login_pass");\u000a            self.elementLoginButton = $("#login_button");\u000a\u000a            var toggle = $("li.dropdown#navbar_login");\u000a            var button = $("a", toggle);\u000a\u000a            button.on("click", function (e) {\u000a                $(this).parent().toggleClass("open");\u000a            });\u000a\u000a            $("body").on("click", function (e) {\u000a                if (!toggle.hasClass("open")) {\u000a                    return;\u000a                }\u000a\u000a                var anyFormLinkOrButton = $(\u000a                    "#login_dropdown_loggedout a, #login_dropdown_loggedin a, #login_dropdown_loggedout button, #login_dropdown_loggedin button"\u000a                );\u000a                var dropdown = $("li.dropdown#navbar_login");\u000a                var anyLastpassButton = $("#__lpform_login_user, #__lpform_login_pass");\u000a\u000a                var isLinkOrButton =\u000a                    anyFormLinkOrButton.is(e.target) ||\u000a                    anyFormLinkOrButton.has(e.target).length !== 0;\u000a                var isDropdown =\u000a                    dropdown.is(e.target) || dropdown.has(e.target).length !== 0;\u000a                var isLastpass =\u000a                    anyLastpassButton.is(e.target) ||\u000a                    anyLastpassButton.has(e.target).length !== 0;\u000a\u000a                if (isLinkOrButton || !(isDropdown || isLastpass)) {\u000a                    toggle.removeClass("open");\u000a                }\u000a            });\u000a\u000a            if (\u000a                self.elementUsernameInput &&\u000a                self.elementUsernameInput.length &&\u000a                self.elementLoginButton &&\u000a                self.elementLoginButton.length\u000a            ) {\u000a                self.elementLoginButton.blur(function () {\u000a                    self.elementUsernameInput.focus();\u000a                });\u000a            }\u000a        };\u000a\u000a        self.hasPermission = function (permission) {\u000a            /**\u000a             * Checks if the currently logged in user has a specific permission.\u000a             *\u000a             * This check is performed by testing if the necessary needs set is available.\u000a             *\u000a             * Example:\u000a             *\u000a             *     loginState.hasPermission(access.permissions.SETTINGS)\u000a             *\u000a             * @param permission the permission to check for\u000a             * @returns true if the user has the specified permission, false otherwise\u000a             * @type {boolean}\u000a             */\u000a            var userneeds = self.userneeds();\u000a            if (userneeds === undefined || permission === undefined) return false;\u000a\u000a            if ($.isEmptyObject(userneeds)) {\u000a                return false;\u000a            }\u000a\u000a            return _.any(permission, function (need) {\u000a                return (\u000a                    _.has(userneeds, need.method) &&\u000a                    _.all(need.value, function (value) {\u000a                        return _.contains(userneeds[need.method], value);\u000a                    })\u000a                );\u000a            });\u000a        };\u000a\u000a        self.hasAnyPermission = function () {\u000a            /**\u000a             * Checks if the currently logged in user has any of the specified permissions.\u000a             *\u000a             * Uses hasPermission for that.\u000a             *\u000a             * Example:\u000a             *\u000a             *   loginState.hasAnyPermission(access.permission.CONTROL, access.permission.MONITOR_TERMINAL)\u000a             *\u000a             * @returns true if the user has any of the specified permissions, false otherwise\u000a             * @type {boolean}\u000a             */\u000a            var result = false;\u000a            _.each(arguments, function (permission) {\u000a                result = result || self.hasPermission(permission);\u000a            });\u000a            return result;\u000a        };\u000a\u000a        self.hasAllPermissions = function () {\u000a            /**\u000a             * Checks if the currently logged in user has all of the specified permissions.\u000a             *\u000a             * Uses hasPermission for that.\u000a             *\u000a             * Example:\u000a             *\u000a             *   loginState.hasAnyPermission(access.permission.CONTROL, access.permission.MONITOR_TERMINAL)\u000a             *\u000a             * @returns true if the user has all of the specified permissions, false otherwise\u000a             * @type {boolean}\u000a             */\u000a            var result = true;\u000a            _.each(arguments, function (permission) {\u000a                result = result && self.hasPermission(permission);\u000a            });\u000a            return result;\u000a        };\u000a\u000a        self.hasPermissionKo = function (permission) {\u000a            /**\u000a             * Knockout wrapper for hasPermission\u000a             */\u000a            return ko\u000a                .pureComputed(function () {\u000a                    return self.hasPermission(permission);\u000a                })\u000a                .extend({notify: "always"});\u000a        };\u000a\u000a        self.hasAnyPermissionKo = function () {\u000a            /**\u000a              Knockout wrapper for hasAnyPermission\u000a             */\u000a            var permissions = arguments;\u000a            return ko\u000a                .pureComputed(function () {\u000a                    return self.hasAnyPermission.apply(null, permissions);\u000a                })\u000a                .extend({notify: "always"});\u000a        };\u000a\u000a        self.hasAllPermissionsKo = function () {\u000a            /**\u000a             * Knockout wrapper for hasAllPermissions\u000a             */\u000a            var permissions = arguments;\u000a            return ko.pureComputed(function () {\u000a                return self.hasAllPermissions.apply(null, permissions);\u000a            });\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: LoginStateViewModel\u000a    });\u000a});\u000a\u000a;\u000a
p0
.