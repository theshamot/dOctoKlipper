V// source: js/app/viewmodels/timelapse.js\u000a$(function () {\u000a    function TimelapseViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.access = parameters[1];\u000a        self.settings = parameters[2];\u000a\u000a        self.renderProgressBar = undefined;\u000a        self.timelapsePopup = undefined;\u000a\u000a        self.defaultFps = 25;\u000a        self.defaultPostRoll = 0;\u000a        self.defaultInterval = 10;\u000a        self.defaultRetractionZHop = 0;\u000a        self.defaultMinDelay = 5.0;\u000a\u000a        self.timelapseType = ko.observable(undefined);\u000a        self.timelapseTimedInterval = ko.observable(self.defaultInterval);\u000a        self.timelapsePostRoll = ko.observable(self.defaultPostRoll);\u000a        self.timelapseFps = ko.observable(self.defaultFps);\u000a        self.timelapseRetractionZHop = ko.observable(self.defaultRetractionZHop);\u000a        self.timelapseMinDelay = ko.observable(self.defaultMinDelay);\u000a\u000a        self.renderProgress = ko.observable();\u000a        self.renderTarget = ko.observable();\u000a        self.renderAnimation = ko.observable(false);\u000a        self.renderProgressString = ko.pureComputed(function () {\u000a            if (!self.renderTarget()) {\u000a                return 0;\u000a            }\u000a\u000a            if (self.renderAnimation()) {\u000a                return 100;\u000a            }\u000a\u000a            if (!self.renderProgress()) {\u000a                return 0;\u000a            }\u000a\u000a            return self.renderProgress();\u000a        });\u000a        self.renderProgressBarString = ko.pureComputed(function () {\u000a            if (!self.renderTarget()) {\u000a                return "";\u000a            }\u000a\u000a            if (self.renderAnimation()) {\u000a                return _.sprintf(gettext("Rendering %(target)s..."), {\u000a                    target: self.renderTarget()\u000a                });\u000a            }\u000a\u000a            var progress = self.renderProgress();\u000a            if (!progress) {\u000a                progress = 0;\u000a            }\u000a            return _.sprintf(gettext("Rendering %(target)s... (%(progress)d%%)"), {\u000a                target: self.renderTarget(),\u000a                progress: progress\u000a            });\u000a        });\u000a\u000a        self.serverConfig = ko.observable();\u000a\u000a        self.persist = ko.observable(false);\u000a        self.isDirty = ko.observable(false);\u000a\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a\u000a        self.markedForFileDeletion = ko.observableArray([]);\u000a        self.markedForUnrenderedDeletion = ko.observableArray([]);\u000a\u000a        self.isTemporary = ko.pureComputed(function () {\u000a            return self.isDirty() && !self.persist();\u000a        });\u000a\u000a        self.isBusy = ko.pureComputed(function () {\u000a            return self.isPrinting() || self.isPaused();\u000a        });\u000a\u000a        self.timelapseTypeSelected = ko.pureComputed(function () {\u000a            return "off" !== self.timelapseType();\u000a        });\u000a        self.intervalInputEnabled = ko.pureComputed(function () {\u000a            return "timed" === self.timelapseType();\u000a        });\u000a        self.saveButtonEnabled = ko.pureComputed(function () {\u000a            return (\u000a                self.loginState.hasPermission(self.access.permissions.TIMELAPSE_ADMIN) &&\u000a                self.isDirty() &&\u000a                !self.isPrinting()\u000a            );\u000a        });\u000a        self.resetButtonEnabled = ko.pureComputed(function () {\u000a            return self.saveButtonEnabled() && self.serverConfig() !== undefined;\u000a        });\u000a\u000a        self.timelapseType.subscribe(function () {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapseTimedInterval.subscribe(function () {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapsePostRoll.subscribe(function () {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapseFps.subscribe(function () {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapseRetractionZHop.subscribe(function (newValue) {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapseMinDelay.subscribe(function () {\u000a            self.isDirty(true);\u000a        });\u000a        self.persist.subscribe(function () {\u000a            self.isDirty(true);\u000a        });\u000a\u000a        // initialize list helper\u000a        self.listHelper = new ItemListHelper(\u000a            "timelapseFiles",\u000a            {\u000a                name: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                },\u000a                date: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                size: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["bytes"] > b["bytes"]) return -1;\u000a                    if (a["bytes"] < b["bytes"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            CONFIG_TIMELAPSEFILESPERPAGE\u000a        );\u000a\u000a        // initialize list helper for unrendered timelapses\u000a        self.unrenderedListHelper = new ItemListHelper(\u000a            "unrenderedTimelapseFiles",\u000a            {\u000a                name: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                },\u000a                creation: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                size: function (a, b) {\u000a                    // sorts descending\u000a                    if (a["bytes"] > b["bytes"]) return -1;\u000a                    if (a["bytes"] < b["bytes"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            CONFIG_TIMELAPSEFILESPERPAGE\u000a        );\u000a\u000a        self.requestData = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_LIST))\u000a                return;\u000a\u000a            OctoPrint.timelapse.get(true).done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            var config = response.config;\u000a            if (config === undefined) return;\u000a\u000a            // timelapses & unrendered\u000a            self.listHelper.updateItems(response.files);\u000a            self.listHelper.resetPage();\u000a            if (response.unrendered) {\u000a                self.unrenderedListHelper.updateItems(response.unrendered);\u000a                self.unrenderedListHelper.resetPage();\u000a            }\u000a\u000a            // timelapse config\u000a            self.fromConfig(response.config);\u000a            self.serverConfig(response.config);\u000a        };\u000a\u000a        self.fromConfig = function (config) {\u000a            self.timelapseType(config.type);\u000a\u000a            if (\u000a                config.type === "timed" &&\u000a                config.interval !== undefined &&\u000a                config.interval > 0\u000a            ) {\u000a                self.timelapseTimedInterval(config.interval);\u000a            } else {\u000a                self.timelapseTimedInterval(self.defaultInterval);\u000a            }\u000a\u000a            if (\u000a                config.type === "zchange" &&\u000a                config.retractionZHop !== undefined &&\u000a                config.retractionZHop > 0\u000a            ) {\u000a                self.timelapseRetractionZHop(config.retractionZHop);\u000a            } else {\u000a                self.timelapseRetractionZHop(self.defaultRetractionZHop);\u000a            }\u000a\u000a            if (\u000a                config.type === "zchange" &&\u000a                config.minDelay !== undefined &&\u000a                config.minDelay >= 0\u000a            ) {\u000a                self.timelapseMinDelay(config.minDelay);\u000a            } else {\u000a                self.timelapseMinDelay(self.defaultMinDelay);\u000a            }\u000a\u000a            if (config.postRoll !== undefined && config.postRoll >= 0) {\u000a                self.timelapsePostRoll(config.postRoll);\u000a            } else {\u000a                self.timelapsePostRoll(self.defaultPostRoll);\u000a            }\u000a\u000a            if (config.fps !== undefined && config.fps > 0) {\u000a                self.timelapseFps(config.fps);\u000a            } else {\u000a                self.timelapseFps(self.defaultFps);\u000a            }\u000a\u000a            self.persist(false);\u000a            self.isDirty(false);\u000a        };\u000a\u000a        self.fromCurrentData = function (data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self.fromHistoryData = function (data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self._processStateData = function (data) {\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a        };\u000a\u000a        self.markFilesOnPage = function () {\u000a            self.markedForFileDeletion(\u000a                _.uniq(\u000a                    self\u000a                        .markedForFileDeletion()\u000a                        .concat(_.map(self.listHelper.paginatedItems(), "name"))\u000a                )\u000a            );\u000a        };\u000a\u000a        self.markAllFiles = function () {\u000a            self.markedForFileDeletion(_.map(self.listHelper.allItems, "name"));\u000a        };\u000a\u000a        self.clearMarkedFiles = function () {\u000a            self.markedForFileDeletion.removeAll();\u000a        };\u000a\u000a        self.isTimelapseViewable = function (data) {\u000a            var url = data.url;\u000a            return (\u000a                self.loginState.hasPermission(\u000a                    self.access.permissions.TIMELAPSE_DOWNLOAD\u000a                ) && url.indexOf(".mp4") >= 0\u000a            );\u000a        };\u000a        self.showTimelapsePreview = function (data) {\u000a            if (!self.isTimelapseViewable(data)) return;\u000a\u000a            var url = data.url;\u000a            var previewModal = $("#timelapsePreviewModal");\u000a            previewModal.children("div.modal-body").children("video").attr("src", url);\u000a            previewModal.off("hidden.bs.modal").on("hidden.bs.modal", function () {\u000a                $(this).attr("src", "");\u000a            });\u000a            previewModal.modal("show");\u000a        };\u000a\u000a        self.removeFile = function (filename) {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_DELETE))\u000a                return;\u000a\u000a            var perform = function () {\u000a                OctoPrint.timelapse\u000a                    .delete(filename)\u000a                    .done(function () {\u000a                        self.markedForFileDeletion.remove(filename);\u000a                        self.requestData();\u000a                    })\u000a                    .fail(function (jqXHR) {\u000a                        var html =\u000a                            "<p>" +\u000a                            _.sprintf(\u000a                                gettext(\u000a                                    "Failed to remove timelapse %(name)s.</p><p>Please consult octoprint.log for details.</p>"\u000a                                ),\u000a                                {name: _.escape(filename)}\u000a                            );\u000a                        html += pnotifyAdditionalInfo(\u000a                            '<pre style="overflow: auto">' +\u000a                                _.escape(jqXHR.responseText) +\u000a                                "</pre>"\u000a                        );\u000a                        new PNotify({\u000a                            title: gettext("Could not remove timelapse"),\u000a                            text: html,\u000a                            type: "error",\u000a                            hide: false\u000a                        });\u000a                    });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(gettext('You are about to delete timelapse file "%(name)s".'), {\u000a                    name: _.escape(filename)\u000a                }),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.removeMarkedFiles = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_DELETE))\u000a                return;\u000a\u000a            var perform = function () {\u000a                self._bulkRemove(self.markedForFileDeletion(), "files").done(function () {\u000a                    self.markedForFileDeletion.removeAll();\u000a                });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(gettext("You are about to delete %(count)d timelapse files."), {\u000a                    count: self.markedForFileDeletion().length\u000a                }),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.markUnrenderedOnPage = function () {\u000a            self.markedForUnrenderedDeletion(\u000a                _.uniq(\u000a                    self\u000a                        .markedForUnrenderedDeletion()\u000a                        .concat(_.map(self.unrenderedListHelper.paginatedItems(), "name"))\u000a                )\u000a            );\u000a        };\u000a\u000a        self.markAllUnrendered = function () {\u000a            self.markedForUnrenderedDeletion(\u000a                _.map(self.unrenderedListHelper.allItems, "name")\u000a            );\u000a        };\u000a\u000a        self.clearMarkedUnrendered = function () {\u000a            self.markedForUnrenderedDeletion.removeAll();\u000a        };\u000a\u000a        self.removeUnrendered = function (name) {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_DELETE))\u000a                return;\u000a\u000a            var perform = function () {\u000a                OctoPrint.timelapse.deleteUnrendered(name).done(function () {\u000a                    self.markedForUnrenderedDeletion.remove(name);\u000a                    self.requestData();\u000a                });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext('You are about to delete unrendered timelapse "%(name)s".'),\u000a                    {name: _.escape(name)}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.removeMarkedUnrendered = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_DELETE))\u000a                return;\u000a\u000a            var perform = function () {\u000a                self._bulkRemove(self.markedForUnrenderedDeletion(), "unrendered").done(\u000a                    function () {\u000a                        self.markedForUnrenderedDeletion.removeAll();\u000a                    }\u000a                );\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext("You are about to delete %(count)d unrendered timelapses."),\u000a                    {count: self.markedForUnrenderedDeletion().length}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self._bulkRemove = function (files, type) {\u000a            var title, message, handler;\u000a\u000a            if (type === "files") {\u000a                title = gettext("Deleting timelapse files");\u000a                message = _.sprintf(gettext("Deleting %(count)d timelapse files..."), {\u000a                    count: files.length\u000a                });\u000a                handler = function (filename) {\u000a                    return OctoPrint.timelapse\u000a                        .delete(filename)\u000a                        .done(function () {\u000a                            deferred.notify(\u000a                                _.sprintf(gettext("Deleted %(filename)s..."), {\u000a                                    filename: _.escape(filename)\u000a                                }),\u000a                                true\u000a                            );\u000a                        })\u000a                        .fail(function (jqXHR) {\u000a                            var short = _.sprintf(\u000a                                gettext("Deletion of %(filename)s failed, continuing..."),\u000a                                {filename: _.escape(filename)}\u000a                            );\u000a                            var long = _.sprintf(\u000a                                gettext("Deletion of %(filename)s failed: %(error)s"),\u000a                                {\u000a                                    filename: _.escape(filename),\u000a                                    error: _.escape(jqXHR.responseText)\u000a                                }\u000a                            );\u000a                            deferred.notify(short, long, false);\u000a                        });\u000a                };\u000a            } else if (type === "unrendered") {\u000a                title = gettext("Deleting unrendered timelapses");\u000a                message = _.sprintf(\u000a                    gettext("Deleting %(count)d unrendered timelapses..."),\u000a                    {count: files.length}\u000a                );\u000a                handler = function (filename) {\u000a                    return OctoPrint.timelapse\u000a                        .deleteUnrendered(filename)\u000a                        .done(function () {\u000a                            deferred.notify(\u000a                                _.sprintf(gettext("Deleted %(filename)s..."), {\u000a                                    filename: _.escape(filename)\u000a                                }),\u000a                                true\u000a                            );\u000a                        })\u000a                        .fail(function () {\u000a                            deferred.notify(\u000a                                _.sprintf(\u000a                                    gettext(\u000a                                        "Deletion of %(filename)s failed, continuing..."\u000a                                    ),\u000a                                    {filename: _.escape(filename)}\u000a                                ),\u000a                                false\u000a                            );\u000a                        });\u000a                };\u000a            } else {\u000a                return;\u000a            }\u000a\u000a            var deferred = $.Deferred();\u000a\u000a            var promise = deferred.promise();\u000a\u000a            var options = {\u000a                title: title,\u000a                message: message,\u000a                max: files.length,\u000a                output: true\u000a            };\u000a            showProgressModal(options, promise);\u000a\u000a            var requests = [];\u000a            _.each(files, function (filename) {\u000a                var request = handler(filename);\u000a                requests.push(request);\u000a            });\u000a            $.when.apply($, _.map(requests, wrapPromiseWithAlways)).done(function () {\u000a                deferred.resolve();\u000a                self.requestData();\u000a            });\u000a\u000a            return promise;\u000a        };\u000a\u000a        self.renderUnrendered = function (name) {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_ADMIN))\u000a                return;\u000a\u000a            OctoPrint.timelapse.renderUnrendered(name).done(self.requestData);\u000a        };\u000a\u000a        self.save = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.TIMELAPSE_ADMIN))\u000a                return;\u000a\u000a            var payload = {\u000a                type: self.timelapseType(),\u000a                postRoll: self.timelapsePostRoll(),\u000a                fps: self.timelapseFps(),\u000a                save: self.persist()\u000a            };\u000a\u000a            if (self.timelapseType() === "timed") {\u000a                payload["interval"] = self.timelapseTimedInterval();\u000a            }\u000a\u000a            if (self.timelapseType() === "zchange") {\u000a                payload["retractionZHop"] = self.timelapseRetractionZHop();\u000a                payload["minDelay"] = self.timelapseMinDelay();\u000a            }\u000a\u000a            OctoPrint.timelapse.saveConfig(payload).done(self.fromResponse);\u000a        };\u000a\u000a        self.reset = function () {\u000a            if (self.serverConfig() === undefined) return;\u000a            self.fromConfig(self.serverConfig());\u000a        };\u000a\u000a        self.displayTimelapsePopup = function (options) {\u000a            if (self.timelapsePopup !== undefined) {\u000a                self.timelapsePopup.remove();\u000a            }\u000a\u000a            _.extend(options, {\u000a                callbacks: {\u000a                    before_close: function (notice) {\u000a                        if (self.timelapsePopup === notice) {\u000a                            self.timelapsePopup = undefined;\u000a                        }\u000a                    }\u000a                }\u000a            });\u000a\u000a            self.timelapsePopup = new PNotify(options);\u000a        };\u000a\u000a        self.onDataUpdaterReconnect = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventPostRollStart = function (payload) {\u000a            var title = gettext("Capturing timelapse postroll");\u000a\u000a            var text;\u000a            if (!payload.postroll_duration) {\u000a                text = _.sprintf(\u000a                    gettext(\u000a                        "Now capturing timelapse post roll, this will take only a moment..."\u000a                    )\u000a                );\u000a            } else {\u000a                var format = {\u000a                    time: moment().add(payload.postroll_duration, "s").format("LT")\u000a                };\u000a\u000a                if (payload.postroll_duration > 60) {\u000a                    format.duration = _.sprintf(gettext("%(minutes)d min"), {\u000a                        minutes: payload.postroll_duration / 60\u000a                    });\u000a                    text = _.sprintf(\u000a                        gettext(\u000a                            "Now capturing timelapse post roll, this will take approximately %(duration)s (so until %(time)s)..."\u000a                        ),\u000a                        format\u000a                    );\u000a                } else {\u000a                    format.duration = _.sprintf(gettext("%(seconds)d sec"), {\u000a                        seconds: payload.postroll_duration\u000a                    });\u000a                    text = _.sprintf(\u000a                        gettext(\u000a                            "Now capturing timelapse post roll, this will take approximately %(duration)s..."\u000a                        ),\u000a                        format\u000a                    );\u000a                }\u000a            }\u000a\u000a            self.displayTimelapsePopup({\u000a                title: title,\u000a                text: text,\u000a                hide: false\u000a            });\u000a        };\u000a\u000a        // 3 consecutive capture fails trigger error popup\u000a        self._warnAboutCaptureFailThreshold = 3;\u000a        self._warnAboutCaptureFailCounter = 0;\u000a        self._warnedAboutCaptureFail = false;\u000a        self.onEventPrintStarted = function (payload) {\u000a            self._warnAboutCaptureFailCounter = 0;\u000a            self._warnedAboutCaptureFail = false;\u000a        };\u000a        self.onEventCaptureDone = function (payload) {\u000a            self._warnAboutCaptureFailCounter = 0;\u000a            self._warnedAboutCaptureFail = false;\u000a        };\u000a        self.onEventCaptureFailed = function (payload) {\u000a            self._warnAboutCaptureFailCounter++;\u000a            if (\u000a                self._warnedAboutCaptureFail ||\u000a                self._warnAboutCaptureFailCounter <= self._warnAboutCaptureFailThreshold\u000a            ) {\u000a                return;\u000a            }\u000a            self._warnedAboutCaptureFail = true;\u000a\u000a            var html =\u000a                "<p>" +\u000a                gettext(\u000a                    "Failed repeatedly to capture timelapse frame from webcam - is the snapshot URL configured correctly and the camera on?"\u000a                );\u000a            html += pnotifyAdditionalInfo(\u000a                'Snapshot URL: <pre style="overflow: auto">' +\u000a                    payload.url +\u000a                    '</pre>Error: <pre style="overflow: auto">' +\u000a                    payload.error +\u000a                    "</pre>"\u000a            );\u000a            new PNotify({\u000a                title: gettext("Could not capture snapshots"),\u000a                text: html,\u000a                type: "error",\u000a                hide: false\u000a            });\u000a        };\u000a\u000a        self.onEventMovieRendering = function (payload) {\u000a            self.displayTimelapsePopup({\u000a                title: gettext("Rendering timelapse"),\u000a                text: _.sprintf(\u000a                    gettext(\u000a                        "Now rendering timelapse %(movie_prefix)s. Due to performance reasons it is not recommended to start a print job while a movie is still rendering."\u000a                    ),\u000a                    {movie_prefix: _.escape(payload.movie_prefix)}\u000a                ),\u000a                hide: false\u000a            });\u000a\u000a            self.renderProgress(0);\u000a            self.renderTarget(payload.movie_prefix);\u000a            self.renderAnimation(true);\u000a        };\u000a\u000a        self.onRenderProgress = function (percentage) {\u000a            self.renderProgress(percentage);\u000a            self.renderAnimation(false);\u000a        };\u000a\u000a        self.onEventMovieFailed = function (payload) {\u000a            var title, html;\u000a\u000a            if (payload.reason === "no_frames") {\u000a                title = gettext("Cannot render timelapse");\u000a                html =\u000a                    "<p>" +\u000a                    _.sprintf(\u000a                        gettext(\u000a                            "Rendering of timelapse %(movie_prefix)s is not possible since no frames were captured. Is the snapshot URL configured correctly?"\u000a                        ),\u000a                        {movie_prefix: _.escape(payload.movie_prefix)}\u000a                    ) +\u000a                    "</p>";\u000a            } else if ((payload.reason = "returncode")) {\u000a                title = gettext("Rendering timelapse failed");\u000a                html =\u000a                    "<p>" +\u000a                    _.sprintf(\u000a                        gettext(\u000a                            "Rendering of timelapse %(movie_prefix)s failed with return code %(returncode)s"\u000a                        ),\u000a                        {\u000a                            movie_prefix: _.escape(payload.movie_prefix),\u000a                            returncode: _.escape(payload.returncode)\u000a                        }\u000a                    ) +\u000a                    "</p>";\u000a                html += pnotifyAdditionalInfo(\u000a                    '<pre style="overflow: auto">' + payload.error + "</pre>"\u000a                );\u000a            } else {\u000a                title = gettext("Rendering timelapse failed");\u000a                html =\u000a                    "<p>" +\u000a                    _.sprintf(\u000a                        gettext(\u000a                            "Rendering of timelapse %(movie_prefix)s failed due to an unknown error, please consult the log file"\u000a                        ),\u000a                        {movie_prefix: _.escape(payload.movie_prefix)}\u000a                    ) +\u000a                    "</p>";\u000a            }\u000a\u000a            self.displayTimelapsePopup({\u000a                title: title,\u000a                text: html,\u000a                type: "error",\u000a                hide: false\u000a            });\u000a\u000a            self.renderProgress(0);\u000a            self.renderTarget(undefined);\u000a            self.renderAnimation(false);\u000a        };\u000a\u000a        self.onEventMovieDone = function (payload) {\u000a            self.displayTimelapsePopup({\u000a                title: gettext("Timelapse ready"),\u000a                text: _.sprintf(\u000a                    gettext("New timelapse %(movie_prefix)s is done rendering."),\u000a                    {movie_prefix: _.escape(payload.movie_prefix)}\u000a                ),\u000a                type: "success",\u000a                callbacks: {\u000a                    before_close: function (notice) {\u000a                        if (self.timelapsePopup === notice) {\u000a                            self.timelapsePopup = undefined;\u000a                        }\u000a                    }\u000a                }\u000a            });\u000a            self.requestData();\u000a\u000a            self.renderProgress(0);\u000a            self.renderTarget(undefined);\u000a            self.renderAnimation(false);\u000a        };\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            self.requestData();\u000a\u000a            self.renderProgressBar = $("#render_progress");\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: TimelapseViewModel,\u000a        dependencies: ["loginStateViewModel", "accessViewModel", "settingsViewModel"],\u000a        elements: ["#timelapse", "#timelapse_link", "#timelapsePreviewModal"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.