V// source: plugin/PrintJobHistory/js/TableItemHelper.js\u000a/**\u000a * loadItemsFunction,\u000a * defaultPageSize,\u000a * defaultSortColumn,\u000a * defaultFilterName\u000a */\u000a function PrintJobTableItemHelper(loadItemsFunction, defaultPageSize, defaultSortColumn, defaultFilterName){\u000a\u000a    var self = this;\u000a\u000a    self.loadItemsFunction = loadItemsFunction;\u000a    self.items = ko.observableArray([]);\u000a    self.totalItemCount = ko.observable(0);\u000a    self.currentItemCount = ko.observable(0);\u000a    self.selectedTableItems = ko.observableArray();\u000a    self.allSelectedCheckbox = ko.observable(false);    // checkbox\u000a\u000a\u000a    // paging\u000a    self.pageSizeOptions = ko.observableArray([10, 25, 50, 100, "all"])\u000a    self.selectedPageSize = ko.observable(defaultPageSize)\u000a    self.pageSize = ko.observable(self.selectedPageSize());\u000a    self.currentPage = ko.observable(0);\u000a    // Sorting\u000a    self.sortColumn = ko.observable(defaultSortColumn);\u000a    self.sortOrder = ko.observable("desc");\u000a    // Filterinng\u000a    self.filterOptions = ["all", "onlySuccess", "onlyFailed"];\u000a    self.selectedFilterName = ko.observable(defaultFilterName);\u000a    // Date\u000a    self.queryStartDate = ko.observable(null);\u000a    self.queryEndDate = ko.observable(null);\u000a\u000a    self.isInitialLoadDone = false;\u000a\u000a    self.selectAll = function(checkedValue){\u000a        if (checkedValue == false){\u000a            self.selectedTableItems.removeAll();\u000a        } else {\u000a            self.selectedTableItems.removeAll();\u000a            ko.utils.arrayPushAll(self.selectedTableItems, self.items());\u000a        }\u000a    }\u000a\u000a    self.singleSelect = function(checkedValue){\u000a        if (checkedValue == true){\u000a            self.allSelectedCheckbox(true);\u000a        } else {\u000a            if (self.selectedTableItems().length == 0){\u000a                self.allSelectedCheckbox(false);\u000a            }\u000a        }\u000a    }\u000a\u000a    // ############################################################################################### private functions\u000a    self._loadItems = function(){\u000a        var tableQuery = self.getTableQuery();\u000a        self.loadItemsFunction( tableQuery, self.items, self.totalItemCount, self.currentItemCount );\u000a    }\u000a\u000a    self.getTableQuery = function(){\u000a        var from = Math.max(self.currentPage() * self.pageSize(), 0);\u000a//        var to = Math.min(from + self.pageSize(), self.totalItemCount());\u000a        var to = self.pageSize();\u000a        if (to == 0){\u000a            to = self.pageSize();\u000a        }\u000a        var tableQuery = {\u000a            "from": from,\u000a            "to": to,\u000a            "sortColumn": self.sortColumn(),\u000a            "sortOrder": self.sortOrder(),\u000a            "filterName": self.selectedFilterName(),\u000a            "startDate": self.queryStartDate() == null ? "" : self.queryStartDate(),\u000a            "endDate": self.queryEndDate() == null ? "" : self.queryEndDate(),\u000a        };\u000a        return tableQuery;\u000a    }\u000a\u000a    self.currentPage.subscribe(function(newPageIndex) {\u000a        self._loadItems()\u000a    });\u000a\u000a    self.selectedPageSize.subscribe(function(newPageSize) {\u000a        self.currentPage(0);\u000a        if ("all" == newPageSize){\u000a            self.pageSize(self.totalItemCount());\u000a        } else {\u000a            self.pageSize(newPageSize);\u000a        }\u000a        self._loadItems()\u000a    });\u000a\u000a\u000a    // ################################################################################################ public functions\u000a\u000a    self.reloadItems = function(){\u000a        self.allSelectedCheckbox(false);\u000a        self.selectedTableItems.removeAll();\u000a        self._loadItems();\u000a    }\u000a\u000a\u000a    self.paginatedItems = ko.dependentObservable(function() {\u000a        if (self.items() === undefined) {\u000a            return [];\u000a        } else if (self.pageSize() === 0) {\u000a            return self.items();\u000a        } else {\u000a            if (self.isInitialLoadDone == false){\u000a                self.isInitialLoadDone = true;\u000a                self._loadItems();\u000a            }\u000a            return self.items();\u000a        }\u000a    });\u000a    // ############################################## SORTING\u000a    self.changeSortOrder = function(newSortColumn){\u000a        if (newSortColumn == self.sortColumn()){\u000a            // toggle\u000a            if ("desc" == self.sortOrder()){\u000a                self.sortOrder("asc");\u000a            } else {\u000a               self.sortOrder("desc");\u000a            }\u000a        } else {\u000a            self.sortColumn(newSortColumn);\u000a            self.sortOrder("asc");\u000a        }\u000a        self.currentPage(0);\u000a        self._loadItems();\u000a    }\u000a\u000a    self.sortOrderLabel = function(sortColumn){\u000a        if (sortColumn == self.sortColumn()){\u000a            // toggle\u000a            if ("desc" == self.sortOrder()){\u000a                return ("(descending)");\u000a            } else {\u000a               return ("(ascending)");\u000a            }\u000a        }\u000a        return "";\u000a    }\u000a\u000a    // ############################################## FILTERING\u000a    self.changeFilter = function(newFilterName) {\u000a        self.selectedFilterName(newFilterName)\u000a        self.currentPage(0);\u000a        self._loadItems();\u000a    };\u000a\u000a    self.isFilterSelected = function(filterName) {\u000a        return self.selectedFilterName() == filterName;\u000a    };\u000a\u000a\u000a\u000a    // ############################################## PAGING\u000a    self.changePage = function(newPage) {\u000a        if (newPage < 0 || newPage > self.lastPage())\u000a            return;\u000a        self.currentPage(newPage);\u000a    };\u000a\u000a    self.prevPage = function() {\u000a        if (self.currentPage() > 0) {\u000a            self.currentPage(self.currentPage() - 1);\u000a        }\u000a    };\u000a    self.nextPage = function() {\u000a        if (self.currentPage() < self.lastPage()) {\u000a            self.currentPage(self.currentPage() + 1);\u000a        }\u000a    };\u000a    self.lastPage = ko.dependentObservable(function() {\u000a        return (self.pageSize() === 0 ? 1 :\u000a                Math.ceil(self.totalItemCount() / self.pageSize()) - 1);\u000a    });\u000a\u000a   self.pages = ko.dependentObservable(function() {\u000a        var pages = [];\u000a        var i;\u000a\u000a        if (self.pageSize() === 0) {\u000a            pages.push({ number: 0, text: 1 });\u000a        } else if (self.lastPage() < 7) {\u000a            for (i = 0; i < self.lastPage() + 1; i++) {\u000a                pages.push({ number: i, text: i+1 });\u000a            }\u000a        } else {\u000a            pages.push({ number: 0, text: 1 });\u000a            if (self.currentPage() < 5) {\u000a                for (i = 1; i < 5; i++) {\u000a                    pages.push({ number: i, text: i+1 });\u000a                }\u000a                pages.push({ number: -1, text: "\u2026"});\u000a            } else if (self.currentPage() > self.lastPage() - 5) {\u000a                pages.push({ number: -1, text: "\u2026"});\u000a                for (i = self.lastPage() - 4; i < self.lastPage(); i++) {\u000a                    pages.push({ number: i, text: i+1 });\u000a                }\u000a            } else {\u000a                pages.push({ number: -1, text: "\u2026"});\u000a                for (i = self.currentPage() - 1; i <= self.currentPage() + 1; i++) {\u000a                    pages.push({ number: i, text: i+1 });\u000a                }\u000a                pages.push({ number: -1, text: "\u2026"});\u000a            }\u000a            pages.push({ number: self.lastPage(), text: self.lastPage() + 1})\u000a        }\u000a        return pages;\u000a    });\u000a\u000a\u000a}\u000a\u000a;\u000a
p0
.