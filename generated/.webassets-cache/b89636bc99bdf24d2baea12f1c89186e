V// source: plugin/filamentmanager/js/filamentmanager.bundled.js\u000a/*\u000a * View model for OctoPrint-FilamentManager\u000a *\u000a * Author: Sven Lohrmann <malnvenshorn@gmail.com>\u000a * License: AGPLv3\u000a */\u000a\u000avar FilamentManager = function FilamentManager() {\u000a    this.core.client.call(this);\u000a    return this.core.bridge.call(this);\u000a};\u000a\u000aFilamentManager.prototype = {\u000a    constructor: FilamentManager,\u000a    core: {},\u000a    viewModels: {},\u000a    selectedSpools: undefined\u000a};\u000avar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\u000a\u000afunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\u000a\u000avar Utils = function () {\u000a    function Utils() {\u000a        _classCallCheck(this, Utils);\u000a    }\u000a\u000a    _createClass(Utils, null, [{\u000a        key: "validInt",\u000a        // eslint-disable-line no-unused-vars\u000a        value: function validInt(value, def) {\u000a            var v = Number.parseInt(value, 10);\u000a            return Number.isNaN(v) ? def : v;\u000a        }\u000a    }, {\u000a        key: "validFloat",\u000a        value: function validFloat(value, def) {\u000a            var v = Number.parseFloat(value);\u000a            return Number.isNaN(v) ? def : v;\u000a        }\u000a    }, {\u000a        key: "runRequestChain",\u000a        value: function runRequestChain(requests) {\u000a            var index = 0;\u000a\u000a            var next = function callNextRequest() {\u000a                if (index < requests.length) {\u000a                    // Do the next, increment the call index\u000a                    requests[index]().done(function () {\u000a                        index += 1;\u000a                        next();\u000a                    });\u000a                }\u000a            };\u000a\u000a            next(); // Start chain\u000a        }\u000a    }, {\u000a        key: "extractToolIDFromName",\u000a        value: function extractToolIDFromName(name) {\u000a            var result = /(\u005cd+)/.exec(name);\u000a            return result === null ? 0 : result[1];\u000a        }\u000a    }]);\u000a\u000a    return Utils;\u000a}();\u000a/* global FilamentManager  _ */\u000a\u000aFilamentManager.prototype.core.bridge = function pluginBridge() {\u000a    var self = this;\u000a\u000a    self.core.bridge = {\u000a        allViewModels: {},\u000a\u000a        REQUIRED_VIEWMODELS: ['settingsViewModel', 'printerStateViewModel', 'loginStateViewModel', 'temperatureViewModel', 'filesViewModel'],\u000a\u000a        BINDINGS: ['#settings_plugin_filamentmanager', '#settings_plugin_filamentmanager_profiledialog', '#settings_plugin_filamentmanager_spooldialog', '#settings_plugin_filamentmanager_configurationdialog', '#sidebar_plugin_filamentmanager_wrapper', '#plugin_filamentmanager_confirmationdialog'],\u000a\u000a        viewModel: function FilamentManagerViewModel(viewModels) {\u000a            self.core.bridge.allViewModels = _.object(self.core.bridge.REQUIRED_VIEWMODELS, viewModels);\u000a            self.core.callbacks.call(self);\u000a\u000a            Object.values(self.viewModels).forEach(function (viewModel) {\u000a                return viewModel.call(self);\u000a            });\u000a\u000a            self.viewModels.profiles.updateCallbacks.push(self.viewModels.spools.requestSpools);\u000a            self.viewModels.profiles.updateCallbacks.push(self.viewModels.selections.requestSelectedSpools);\u000a            self.viewModels.spools.updateCallbacks.push(self.viewModels.selections.requestSelectedSpools);\u000a            self.viewModels.import.afterImportCallbacks.push(self.viewModels.profiles.requestProfiles);\u000a            self.viewModels.import.afterImportCallbacks.push(self.viewModels.spools.requestSpools);\u000a            self.viewModels.import.afterImportCallbacks.push(self.viewModels.selections.requestSelectedSpools);\u000a\u000a            self.selectedSpools = self.viewModels.selections.selectedSpools; // for backwards compatibility\u000a            return self;\u000a        }\u000a    };\u000a\u000a    return self.core.bridge;\u000a};\u000a/* global FilamentManager Utils */\u000a\u000aFilamentManager.prototype.core.callbacks = function octoprintCallbacks() {\u000a    var self = this;\u000a\u000a    self.onStartup = function onStartupCallback() {\u000a        self.viewModels.warning.replaceFilamentView();\u000a    };\u000a\u000a    self.onBeforeBinding = function onBeforeBindingCallback() {\u000a        self.viewModels.config.loadData();\u000a        self.viewModels.selections.setArraySize();\u000a        self.viewModels.selections.setSubscriptions();\u000a        self.viewModels.warning.setSubscriptions();\u000a    };\u000a\u000a    self.onStartupComplete = function onStartupCompleteCallback() {\u000a        var requests = [self.viewModels.profiles.requestProfiles, self.viewModels.spools.requestSpools, self.viewModels.selections.requestSelectedSpools];\u000a\u000a        // We chain them because, e.g. selections depends on spools\u000a        Utils.runRequestChain(requests);\u000a    };\u000a\u000a    self.onDataUpdaterPluginMessage = function onDataUpdaterPluginMessageCallback(plugin, data) {\u000a        if (plugin !== 'filamentmanager') return;\u000a\u000a        var messageType = data.type;\u000a        // const messageData = data.data;\u000a        // TODO needs improvement\u000a        if (messageType === 'data_changed') {\u000a            self.viewModels.profiles.requestProfiles();\u000a            self.viewModels.spools.requestSpools();\u000a            self.viewModels.selections.requestSelectedSpools();\u000a        }\u000a    };\u000a};\u000a/* global FilamentManager OctoPrint */\u000a\u000aFilamentManager.prototype.core.client = function apiClient() {\u000a    var self = this.core.client;\u000a\u000a    var pluginUrl = 'plugin/filamentmanager';\u000a\u000a    var profileUrl = function apiProfileNamespace(profile) {\u000a        var url = pluginUrl + '/profiles';\u000a        return profile === undefined ? url : url + '/' + profile;\u000a    };\u000a\u000a    var spoolUrl = function apiSpoolNamespace(spool) {\u000a        var url = pluginUrl + '/spools';\u000a        return spool === undefined ? url : url + '/' + spool;\u000a    };\u000a\u000a    var selectionUrl = function apiSelectionNamespace(selection) {\u000a        var url = pluginUrl + '/selections';\u000a        return selection === undefined ? url : url + '/' + selection;\u000a    };\u000a\u000a    self.profile = {\u000a        list: function list() {\u000a            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\u000a            var opts = arguments[1];\u000a\u000a            var query = force ? { force: force } : {};\u000a            return OctoPrint.getWithQuery(profileUrl(), query, opts);\u000a        },\u000a        get: function get(id, opts) {\u000a            return OctoPrint.get(profileUrl(id), opts);\u000a        },\u000a        add: function add(profile, opts) {\u000a            var data = { profile: profile };\u000a            return OctoPrint.postJson(profileUrl(), data, opts);\u000a        },\u000a        update: function update(id, profile, opts) {\u000a            var data = { profile: profile };\u000a            return OctoPrint.patchJson(profileUrl(id), data, opts);\u000a        },\u000a        delete: function _delete(id, opts) {\u000a            return OctoPrint.delete(profileUrl(id), opts);\u000a        }\u000a    };\u000a\u000a    self.spool = {\u000a        list: function list() {\u000a            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\u000a            var opts = arguments[1];\u000a\u000a            var query = force ? { force: force } : {};\u000a            return OctoPrint.getWithQuery(spoolUrl(), query, opts);\u000a        },\u000a        get: function get(id, opts) {\u000a            return OctoPrint.get(spoolUrl(id), opts);\u000a        },\u000a        add: function add(spool, opts) {\u000a            var data = { spool: spool };\u000a            return OctoPrint.postJson(spoolUrl(), data, opts);\u000a        },\u000a        update: function update(id, spool, opts) {\u000a            var data = { spool: spool };\u000a            return OctoPrint.patchJson(spoolUrl(id), data, opts);\u000a        },\u000a        delete: function _delete(id, opts) {\u000a            return OctoPrint.delete(spoolUrl(id), opts);\u000a        }\u000a    };\u000a\u000a    self.selection = {\u000a        list: function list(opts) {\u000a            return OctoPrint.get(selectionUrl(), opts);\u000a        },\u000a        update: function update(id, selection, opts) {\u000a            var data = { selection: selection };\u000a            return OctoPrint.patchJson(selectionUrl(id), data, opts);\u000a        }\u000a    };\u000a\u000a    self.database = {\u000a        test: function test(config, opts) {\u000a            var url = pluginUrl + '/database/test';\u000a            var data = { config: config };\u000a            return OctoPrint.postJson(url, data, opts);\u000a        }\u000a    };\u000a};\u000a/* global FilamentManager ko $ */\u000a\u000aFilamentManager.prototype.viewModels.config = function configurationViewModel() {\u000a    var self = this.viewModels.config;\u000a    var api = this.core.client;\u000a    var settingsViewModel = this.core.bridge.allViewModels.settingsViewModel;\u000a\u000a\u000a    var dialog = $('#settings_plugin_filamentmanager_configurationdialog');\u000a\u000a    self.showDialog = function showConfigurationDialog() {\u000a        self.loadData();\u000a        dialog.modal('show');\u000a    };\u000a\u000a    self.hideDialog = function hideConfigurationDialog() {\u000a        dialog.modal('hide');\u000a    };\u000a\u000a    self.config = ko.mapping.fromJS({});\u000a\u000a    self.saveData = function savePluginConfiguration(viewModel, event) {\u000a        var target = $(event.target);\u000a        target.prepend('<i class="fa fa-spinner fa-spin"></i> ');\u000a\u000a        var data = {\u000a            plugins: {\u000a                filamentmanager: ko.mapping.toJS(self.config)\u000a            }\u000a        };\u000a\u000a        settingsViewModel.saveData(data, {\u000a            success: function success() {\u000a                self.hideDialog();\u000a            },\u000a            complete: function complete() {\u000a                $('i.fa-spinner', target).remove();\u000a            },\u000a\u000a            sending: true\u000a        });\u000a    };\u000a\u000a    self.loadData = function mapPluginConfigurationToObservables() {\u000a        var pluginSettings = settingsViewModel.settings.plugins.filamentmanager;\u000a        ko.mapping.fromJS(ko.toJS(pluginSettings), self.config);\u000a    };\u000a\u000a    self.connectionTest = function runExternalDatabaseConnectionTest(viewModel, event) {\u000a        var target = $(event.target);\u000a        target.removeClass('btn-success btn-danger');\u000a        target.prepend('<i class="fa fa-spinner fa-spin"></i> ');\u000a        target.prop('disabled', true);\u000a\u000a        var data = ko.mapping.toJS(self.config.database);\u000a\u000a        api.database.test(data).done(function () {\u000a            target.addClass('btn-success');\u000a        }).fail(function () {\u000a            target.addClass('btn-danger');\u000a        }).always(function () {\u000a            $('i.fa-spinner', target).remove();\u000a            target.prop('disabled', false);\u000a        });\u000a    };\u000a};\u000a/* global FilamentManager gettext $ ko Utils OctoPrint */\u000a\u000aFilamentManager.prototype.viewModels.confirmation = function spoolSelectionConfirmationViewModel() {\u000a    var self = this.viewModels.confirmation;\u000a    var _core$bridge$allViewM = this.core.bridge.allViewModels,\u000a        printerStateViewModel = _core$bridge$allViewM.printerStateViewModel,\u000a        settingsViewModel = _core$bridge$allViewM.settingsViewModel,\u000a        filesViewModel = _core$bridge$allViewM.filesViewModel;\u000a    var selections = this.viewModels.selections;\u000a\u000a\u000a    var dialog = $('#plugin_filamentmanager_confirmationdialog');\u000a    var button = $('#plugin_filamentmanager_confirmationdialog_print');\u000a\u000a    self.selections = ko.observableArray([]);\u000a\u000a    self.print = function startResumePrintDummy() {};\u000a\u000a    self.checkSelection = function checkIfSpoolSelectionsMatchesSelectedSpoolsInSidebar() {\u000a        var match = true;\u000a        self.selections().forEach(function (value) {\u000a            if (selections.tools()[value.tool]() !== value.spool) match = false;\u000a        });\u000a        button.attr('disabled', !match);\u000a    };\u000a\u000a    var showDialog = function showSpoolConfirmationDialog() {\u000a        var s = [];\u000a        printerStateViewModel.filament().forEach(function (value) {\u000a            var toolID = Utils.extractToolIDFromName(value.name());\u000a            s.push({ spool: undefined, tool: toolID });\u000a        });\u000a        self.selections(s);\u000a        button.attr('disabled', true);\u000a        dialog.modal('show');\u000a    };\u000a\u000a    var startPrint = printerStateViewModel.print;\u000a\u000a    printerStateViewModel.print = function confirmSpoolSelectionBeforeStartPrint() {\u000a        if (settingsViewModel.settings.plugins.filamentmanager.confirmSpoolSelection()) {\u000a            showDialog();\u000a            button.html(gettext('Start Print'));\u000a            self.print = function continueToStartPrint() {\u000a                dialog.modal('hide');\u000a                startPrint();\u000a            };\u000a        } else {\u000a            startPrint();\u000a        }\u000a    };\u000a\u000a    var resumePrint = printerStateViewModel.resume;\u000a\u000a    printerStateViewModel.resume = function confirmSpoolSelectionBeforeResumePrint() {\u000a        if (settingsViewModel.settings.plugins.filamentmanager.confirmSpoolSelection()) {\u000a            showDialog();\u000a            button.html(gettext('Resume Print'));\u000a            self.print = function continueToResumePrint() {\u000a                dialog.modal('hide');\u000a                resumePrint();\u000a            };\u000a        } else {\u000a            resumePrint();\u000a        }\u000a    };\u000a\u000a    filesViewModel.loadFile = function confirmSpoolSelectionOnLoadAndPrint(data, printAfterLoad) {\u000a        if (!data) {\u000a            return;\u000a        }\u000a\u000a        if (printAfterLoad && filesViewModel.listHelper.isSelected(data) && filesViewModel.enablePrint(data)) {\u000a            // file was already selected, just start the print job\u000a            printerStateViewModel.print();\u000a        } else {\u000a            // select file, start print job (if requested and within dimensions)\u000a            var withinPrintDimensions = filesViewModel.evaluatePrintDimensions(data, true);\u000a            var print = printAfterLoad && withinPrintDimensions;\u000a\u000a            OctoPrint.files.select(data.origin, data.path, false).done(function () {\u000a                if (print) printerStateViewModel.print();\u000a            });\u000a        }\u000a    };\u000a};\u000a/* global FilamentManager ko $ PNotify gettext */\u000a\u000aFilamentManager.prototype.viewModels.import = function importDataViewModel() {\u000a    var self = this.viewModels.import;\u000a\u000a    var importButton = $('#settings_plugin_filamentmanager_import_button');\u000a    var importElement = $('#settings_plugin_filamentmanager_import');\u000a\u000a    self.importFilename = ko.observable();\u000a    self.importInProgress = ko.observable(false);\u000a\u000a    self.afterImportCallbacks = [];\u000a\u000a    self.invalidArchive = ko.pureComputed(function () {\u000a        var name = self.importFilename();\u000a        return name !== undefined && !name.toLocaleLowerCase().endsWith('.zip');\u000a    });\u000a\u000a    self.enableImport = ko.pureComputed(function () {\u000a        var name = self.importFilename();\u000a        return name !== undefined && name.trim() !== '' && !self.invalidArchive();\u000a    });\u000a\u000a    importElement.fileupload({\u000a        dataType: 'json',\u000a        maxNumberOfFiles: 1,\u000a        autoUpload: false,\u000a        add: function add(e, data) {\u000a            if (data.files.length === 0) return;\u000a\u000a            self.importFilename(data.files[0].name);\u000a\u000a            importButton.unbind('click');\u000a            importButton.bind('click', function (event) {\u000a                self.importInProgress(true);\u000a                event.preventDefault();\u000a                data.submit();\u000a            });\u000a        },\u000a        done: function done() {\u000a            self.afterImportCallbacks.forEach(function (callback) {\u000a                callback();\u000a            });\u000a        },\u000a        fail: function fail() {\u000a            new PNotify({ // eslint-disable-line no-new\u000a                title: gettext('Data import failed'),\u000a                text: gettext('Something went wrong, please consult the logs.'),\u000a                type: 'error',\u000a                hide: false\u000a            });\u000a        },\u000a        always: function always() {\u000a            importButton.unbind('click');\u000a            self.importFilename(undefined);\u000a            self.importInProgress(false);\u000a        }\u000a    });\u000a};\u000a/* global FilamentManager ko gettext showConfirmationDialog PNotify $ Utils */\u000a\u000aFilamentManager.prototype.viewModels.profiles = function profilesViewModel() {\u000a    var self = this.viewModels.profiles;\u000a    var api = this.core.client;\u000a\u000a    self.allProfiles = ko.observableArray([]);\u000a\u000a    self.cleanProfile = function getDefaultValuesForNewProfile() {\u000a        return {\u000a            id: undefined,\u000a            material: '',\u000a            vendor: '',\u000a            density: 1.25,\u000a            diameter: 1.75\u000a        };\u000a    };\u000a\u000a    self.loadedProfile = {\u000a        id: ko.observable(),\u000a        vendor: ko.observable(),\u000a        material: ko.observable(),\u000a        density: ko.observable(),\u000a        diameter: ko.observable(),\u000a        isNew: ko.observable(true)\u000a    };\u000a\u000a    self.vendorInvalid = ko.pureComputed(function () {\u000a        return !self.loadedProfile.vendor();\u000a    });\u000a    self.materialInvalid = ko.pureComputed(function () {\u000a        return !self.loadedProfile.material();\u000a    });\u000a\u000a    var loadProfile = function loadSelectedProfile() {\u000a        if (self.loadedProfile.id() === undefined) {\u000a            if (!self.loadedProfile.isNew()) {\u000a                // selected 'new profile' in options menu, but no profile created yet\u000a                self.fromProfileData();\u000a            }\u000a        } else {\u000a            // find profile data\u000a            var data = ko.utils.arrayFirst(self.allProfiles(), function (item) {\u000a                return item.id === self.loadedProfile.id();\u000a            });\u000a\u000a            if (!data) data = self.cleanProfile();\u000a\u000a            // populate data\u000a            self.fromProfileData(data);\u000a        }\u000a    };\u000a\u000a    self.loadedProfile.id.subscribe(loadProfile);\u000a\u000a    self.fromProfileData = function setLoadedProfileFromJSObject() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cleanProfile();\u000a\u000a        self.loadedProfile.isNew(data.id === undefined);\u000a        self.loadedProfile.id(data.id);\u000a        self.loadedProfile.vendor(data.vendor);\u000a        self.loadedProfile.material(data.material);\u000a        self.loadedProfile.density(data.density);\u000a        self.loadedProfile.diameter(data.diameter);\u000a    };\u000a\u000a    self.toProfileData = function getLoadedProfileAsJSObject() {\u000a        var defaultProfile = self.cleanProfile();\u000a\u000a        return {\u000a            id: self.loadedProfile.id(),\u000a            vendor: self.loadedProfile.vendor(),\u000a            material: self.loadedProfile.material(),\u000a            density: Utils.validFloat(self.loadedProfile.density(), defaultProfile.density),\u000a            diameter: Utils.validFloat(self.loadedProfile.diameter(), defaultProfile.diameter)\u000a        };\u000a    };\u000a\u000a    var dialog = $('#settings_plugin_filamentmanager_profiledialog');\u000a\u000a    self.showProfileDialog = function showProfileDialog() {\u000a        self.fromProfileData();\u000a        dialog.modal('show');\u000a    };\u000a\u000a    self.requestInProgress = ko.observable(false);\u000a\u000a    self.processProfiles = function processRequestedProfiles(data) {\u000a        self.allProfiles(data.profiles);\u000a    };\u000a\u000a    self.requestProfiles = function requestAllProfilesFromBackend() {\u000a        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\u000a\u000a        self.requestInProgress(true);\u000a        return api.profile.list(force).done(function (response) {\u000a            self.processProfiles(response);\u000a        }).always(function () {\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.saveProfile = function saveProfileToBackend() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.toProfileData();\u000a\u000a        return self.loadedProfile.isNew() ? self.addProfile(data) : self.updateProfile(data);\u000a    };\u000a\u000a    self.addProfile = function addProfileToBackend() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.toProfileData();\u000a\u000a        self.requestInProgress(true);\u000a        api.profile.add(data).done(function (response) {\u000a            var id = response.profile.id;\u000a\u000a            self.requestProfiles().done(function () {\u000a                self.loadedProfile.id(id);\u000a            });\u000a        }).fail(function () {\u000a            new PNotify({ // eslint-disable-line no-new\u000a                title: gettext('Could not add profile'),\u000a                text: gettext('There was an unexpected error while saving the filament profile, please consult the logs.'),\u000a                type: 'error',\u000a                hide: false\u000a            });\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.updateCallbacks = [];\u000a\u000a    self.updateProfile = function updateProfileInBackend() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.toProfileData();\u000a\u000a        self.requestInProgress(true);\u000a        api.profile.update(data.id, data).done(function () {\u000a            self.requestProfiles();\u000a            self.updateCallbacks.forEach(function (callback) {\u000a                callback();\u000a            });\u000a        }).fail(function () {\u000a            new PNotify({ // eslint-disable-line no-new\u000a                title: gettext('Could not update profile'),\u000a                text: gettext('There was an unexpected error while updating the filament profile, please consult the logs.'),\u000a                type: 'error',\u000a                hide: false\u000a            });\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.removeProfile = function removeProfileFromBackend(data) {\u000a        var perform = function performProfileRemoval() {\u000a            api.profile.delete(data.id).done(function () {\u000a                self.requestProfiles();\u000a            }).fail(function () {\u000a                new PNotify({ // eslint-disable-line no-new\u000a                    title: gettext('Could not delete profile'),\u000a                    text: gettext('There was an unexpected error while removing the filament profile, please consult the logs.'),\u000a                    type: 'error',\u000a                    hide: false\u000a                });\u000a                self.requestInProgress(false);\u000a            });\u000a        };\u000a\u000a        showConfirmationDialog({\u000a            title: gettext('Delete profile?'),\u000a            message: gettext('You are about to delete the filament profile <strong>' + data.material + ' (' + data.vendor + ')</strong>. Please note that it is not possible to delete profiles with associated spools.'),\u000a            proceed: gettext('Delete'),\u000a            onproceed: perform\u000a        });\u000a    };\u000a};\u000a/* global FilamentManager ko gettext PNotify */\u000a\u000aFilamentManager.prototype.viewModels.selections = function selectedSpoolsViewModel() {\u000a    var self = this.viewModels.selections;\u000a    var api = this.core.client;\u000a    var settingsViewModel = this.core.bridge.allViewModels.settingsViewModel;\u000a\u000a\u000a    self.selectedSpools = ko.observableArray([]);\u000a\u000a    // selected spool id for each tool\u000a    self.tools = ko.observableArray([]);\u000a    // set to false if querying selections to prevent triggering the change event again when setting selected spools\u000a    self.enableSpoolUpdate = false;\u000a\u000a    self.setArraySize = function setArraySizeToNumberOfTools() {\u000a        var currentProfileData = settingsViewModel.printerProfiles.currentProfileData();\u000a        var numExtruders = currentProfileData ? currentProfileData.extruder.count() : 0;\u000a\u000a        if (self.tools().length === numExtruders) return;\u000a\u000a        if (self.tools().length < numExtruders) {\u000a            // number of extruders has increased\u000a            for (var i = self.tools().length; i < numExtruders; i += 1) {\u000a                self.selectedSpools().push(undefined);\u000a                self.tools().push(ko.observable(undefined));\u000a            }\u000a        } else {\u000a            // number of extruders has decreased\u000a            for (var _i = numExtruders; _i < self.tools().length; _i += 1) {\u000a                self.tools().pop();\u000a                self.selectedSpools().pop();\u000a            }\u000a        }\u000a\u000a        // notify observers\u000a        self.tools.valueHasMutated();\u000a        self.selectedSpools.valueHasMutated();\u000a    };\u000a\u000a    self.setSubscriptions = function subscribeToProfileDataObservable() {\u000a        settingsViewModel.printerProfiles.currentProfileData.subscribe(self.setArraySize);\u000a    };\u000a\u000a    self.requestInProgress = ko.observable(false);\u000a\u000a    self.setSelectedSpools = function setSelectedSpoolsReceivedFromBackend(data) {\u000a        self.enableSpoolUpdate = false;\u000a        data.selections.forEach(function (selection) {\u000a            self.updateSelectedSpoolData(selection);\u000a        });\u000a        self.enableSpoolUpdate = true;\u000a    };\u000a\u000a    self.requestSelectedSpools = function requestSelectedSpoolsFromBackend() {\u000a        self.requestInProgress(true);\u000a        return api.selection.list().done(function (data) {\u000a            self.setSelectedSpools(data);\u000a        }).always(function () {\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.updateSelectedSpool = function updateSelectedSpoolInBackend(tool) {\u000a        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\u000a\u000a        if (!self.enableSpoolUpdate) return;\u000a\u000a        var data = { tool: tool, spool: { id: id } };\u000a\u000a        self.requestInProgress(true);\u000a        api.selection.update(tool, data).done(function (response) {\u000a            self.updateSelectedSpoolData(response.selection);\u000a        }).fail(function () {\u000a            new PNotify({ // eslint-disable-line no-new\u000a                title: gettext('Could not select spool'),\u000a                text: gettext('There was an unexpected error while selecting the spool, please consult the logs.'),\u000a                type: 'error',\u000a                hide: false\u000a            });\u000a        }).always(function () {\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.updateSelectedSpoolData = function updateSelectedSpoolData(data) {\u000a        if (data.tool < self.tools().length) {\u000a            self.tools()[data.tool](data.spool !== null ? data.spool.id : undefined);\u000a            self.selectedSpools()[data.tool] = data.spool !== null ? data.spool : undefined;\u000a            self.selectedSpools.valueHasMutated(); // notifies observers\u000a        }\u000a    };\u000a};\u000a/* global FilamentManager ItemListHelper ko Utils $ PNotify gettext showConfirmationDialog */\u000a\u000aFilamentManager.prototype.viewModels.spools = function spoolsViewModel() {\u000a    var self = this.viewModels.spools;\u000a    var api = this.core.client;\u000a\u000a    var profilesViewModel = this.viewModels.profiles;\u000a\u000a    self.allSpools = new ItemListHelper('filamentSpools', {\u000a        name: function name(a, b) {\u000a            // sorts ascending\u000a            if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) return -1;\u000a            if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) return 1;\u000a            return 0;\u000a        },\u000a        material: function material(a, b) {\u000a            // sorts ascending\u000a            if (a.profile.material.toLocaleLowerCase() < b.profile.material.toLocaleLowerCase()) return -1;\u000a            if (a.profile.material.toLocaleLowerCase() > b.profile.material.toLocaleLowerCase()) return 1;\u000a            return 0;\u000a        },\u000a        vendor: function vendor(a, b) {\u000a            // sorts ascending\u000a            if (a.profile.vendor.toLocaleLowerCase() < b.profile.vendor.toLocaleLowerCase()) return -1;\u000a            if (a.profile.vendor.toLocaleLowerCase() > b.profile.vendor.toLocaleLowerCase()) return 1;\u000a            return 0;\u000a        },\u000a        remaining: function remaining(a, b) {\u000a            // sorts descending\u000a            var ra = parseFloat(a.weight) - parseFloat(a.used);\u000a            var rb = parseFloat(b.weight) - parseFloat(b.used);\u000a            if (ra > rb) return -1;\u000a            if (ra < rb) return 1;\u000a            return 0;\u000a        }\u000a    }, {}, 'name', [], [], 10);\u000a\u000a    self.pageSize = ko.pureComputed({\u000a        read: function read() {\u000a            return self.allSpools.pageSize();\u000a        },\u000a        write: function write(value) {\u000a            self.allSpools.pageSize(Utils.validInt(value, self.allSpools.pageSize()));\u000a        }\u000a    });\u000a\u000a    self.cleanSpool = function getDefaultValuesForNewSpool() {\u000a        return {\u000a            id: undefined,\u000a            name: '',\u000a            cost: 20,\u000a            weight: 1000,\u000a            used: 0,\u000a            temp_offset: 0,\u000a            profile: {\u000a                id: profilesViewModel.allProfiles().length > 0 ? profilesViewModel.allProfiles()[0].id : undefined\u000a            }\u000a        };\u000a    };\u000a\u000a    self.loadedSpool = {\u000a        id: ko.observable(),\u000a        name: ko.observable(),\u000a        profile: ko.observable(),\u000a        cost: ko.observable(),\u000a        totalWeight: ko.observable(),\u000a        remaining: ko.observable(),\u000a        temp_offset: ko.observable(),\u000a        isNew: ko.observable(true)\u000a    };\u000a\u000a    self.nameInvalid = ko.pureComputed(function () {\u000a        return !self.loadedSpool.name();\u000a    });\u000a\u000a    self.fromSpoolData = function setLoadedSpoolsFromJSObject() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cleanSpool();\u000a\u000a        self.loadedSpool.isNew(data.id === undefined);\u000a        self.loadedSpool.id(data.id);\u000a        self.loadedSpool.name(data.name);\u000a        self.loadedSpool.profile(data.profile.id);\u000a        self.loadedSpool.totalWeight(data.weight);\u000a        self.loadedSpool.cost(data.cost);\u000a        self.loadedSpool.remaining(data.weight - data.used);\u000a        self.loadedSpool.temp_offset(data.temp_offset);\u000a    };\u000a\u000a    self.toSpoolData = function getLoadedProfileAsJSObject() {\u000a        var defaultSpool = self.cleanSpool();\u000a        var totalWeight = Utils.validFloat(self.loadedSpool.totalWeight(), defaultSpool.weight);\u000a        var remaining = Math.min(Utils.validFloat(self.loadedSpool.remaining(), defaultSpool.weight), totalWeight);\u000a\u000a        return {\u000a            id: self.loadedSpool.id(),\u000a            name: self.loadedSpool.name(),\u000a            cost: Utils.validFloat(self.loadedSpool.cost(), defaultSpool.cost),\u000a            weight: totalWeight,\u000a            used: totalWeight - remaining,\u000a            temp_offset: self.loadedSpool.temp_offset(),\u000a            profile: {\u000a                id: self.loadedSpool.profile()\u000a            }\u000a        };\u000a    };\u000a\u000a    var dialog = $('#settings_plugin_filamentmanager_spooldialog');\u000a\u000a    self.showSpoolDialog = function showSpoolDialog(data) {\u000a        self.fromSpoolData(data);\u000a        dialog.modal('show');\u000a    };\u000a\u000a    self.hideSpoolDialog = function hideSpoolDialog() {\u000a        dialog.modal('hide');\u000a    };\u000a\u000a    self.requestInProgress = ko.observable(false);\u000a\u000a    self.processSpools = function processRequestedSpools(data) {\u000a        self.allSpools.updateItems(data.spools);\u000a    };\u000a\u000a    self.requestSpools = function requestAllSpoolsFromBackend(force) {\u000a        self.requestInProgress(true);\u000a        return api.spool.list(force).done(function (response) {\u000a            self.processSpools(response);\u000a        }).always(function () {\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.saveSpool = function saveSpoolToBackend() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.toSpoolData();\u000a\u000a        return self.loadedSpool.isNew() ? self.addSpool(data) : self.updateSpool(data);\u000a    };\u000a\u000a    self.addSpool = function addSpoolToBackend() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.toSpoolData();\u000a\u000a        self.requestInProgress(true);\u000a        api.spool.add(data).done(function () {\u000a            self.hideSpoolDialog();\u000a            self.requestSpools();\u000a        }).fail(function () {\u000a            new PNotify({ // eslint-disable-line no-new\u000a                title: gettext('Could not add spool'),\u000a                text: gettext('There was an unexpected error while saving the filament spool, please consult the logs.'),\u000a                type: 'error',\u000a                hide: false\u000a            });\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.updateCallbacks = [];\u000a\u000a    self.updateSpool = function updateSpoolInBackend() {\u000a        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.toSpoolData();\u000a\u000a        self.requestInProgress(true);\u000a        api.spool.update(data.id, data).done(function () {\u000a            self.hideSpoolDialog();\u000a            self.requestSpools();\u000a            self.updateCallbacks.forEach(function (callback) {\u000a                callback();\u000a            });\u000a        }).fail(function () {\u000a            new PNotify({ // eslint-disable-line no-new\u000a                title: gettext('Could not update spool'),\u000a                text: gettext('There was an unexpected error while updating the filament spool, please consult the logs.'),\u000a                type: 'error',\u000a                hide: false\u000a            });\u000a            self.requestInProgress(false);\u000a        });\u000a    };\u000a\u000a    self.removeSpool = function removeSpoolFromBackend(data) {\u000a        var perform = function performSpoolRemoval() {\u000a            self.requestInProgress(true);\u000a            api.spool.delete(data.id).done(function () {\u000a                self.requestSpools();\u000a            }).fail(function () {\u000a                new PNotify({ // eslint-disable-line no-new\u000a                    title: gettext('Could not delete spool'),\u000a                    text: gettext('There was an unexpected error while removing the filament spool, please consult the logs.'),\u000a                    type: 'error',\u000a                    hide: false\u000a                });\u000a                self.requestInProgress(false);\u000a            });\u000a        };\u000a\u000a        showConfirmationDialog({\u000a            title: gettext('Delete spool?'),\u000a            message: gettext('You are about to delete the filament spool <strong>' + data.name + ' - ' + data.profile.material + ' (' + data.profile.vendor + ')</strong>.'),\u000a            proceed: gettext('Delete'),\u000a            onproceed: perform\u000a        });\u000a    };\u000a\u000a    self.duplicateSpool = function duplicateAndAddSpoolToBackend(data) {\u000a        var newData = data;\u000a        newData.used = 0;\u000a        self.addSpool(newData);\u000a    };\u000a};\u000a/* global FilamentManager ko Node $ gettext PNotify Utils */\u000a\u000aFilamentManager.prototype.viewModels.warning = function insufficientFilamentWarningViewModel() {\u000a    var self = this.viewModels.warning;\u000a    var _core$bridge$allViewM = this.core.bridge.allViewModels,\u000a        printerStateViewModel = _core$bridge$allViewM.printerStateViewModel,\u000a        settingsViewModel = _core$bridge$allViewM.settingsViewModel;\u000a    var selections = this.viewModels.selections;\u000a\u000a\u000a    printerStateViewModel.filamentWithWeight = ko.observableArray([]);\u000a\u000a    printerStateViewModel.formatFilamentWithWeight = function formatFilamentWithWeightInSidebar(filament) {\u000a        if (!filament || !filament.length) return '-';\u000a\u000a        var result = (filament.length / 1000).toFixed(2) + 'm';\u000a\u000a        if (Object.prototype.hasOwnProperty.call(filament, 'weight') && filament.weight) {\u000a            result += ' / ' + filament.weight.toFixed(2) + 'g';\u000a        }\u000a\u000a        return result;\u000a    };\u000a\u000a    self.replaceFilamentView = function replaceFilamentViewInSidebar() {\u000a        $('#state').find('.accordion-inner').contents().each(function (index, item) {\u000a            if (item.nodeType === Node.COMMENT_NODE) {\u000a                if (item.nodeValue === ' ko foreach: filament ') {\u000a                    item.nodeValue = ' ko foreach: [] '; // eslint-disable-line no-param-reassign\u000a                    var element = '<!-- ko foreach: filamentWithWeight --> <span data-bind="text: \u005c'Filament (\u005c' + name() + \u005c'): \u005c', title: \u005c'Filament usage for \u005c' + name()"></span><strong data-bind="text: $root.formatFilamentWithWeight(data())"></strong><br> <!-- /ko -->';\u000a                    $(element).insertBefore(item);\u000a                    return false; // exit loop\u000a                }\u000a            }\u000a            return true;\u000a        });\u000a    };\u000a\u000a    var filename = void 0;\u000a    var waitForFilamentData = false;\u000a\u000a    var warning = null;\u000a\u000a    var updateFilament = function updateFilamentWeightAndCheckRemainingFilament() {\u000a        var calculateWeight = function calculateFilamentWeight(length, diameter, density) {\u000a            var radius = diameter / 2;\u000a            var volume = length * Math.PI * radius * radius / 1000;\u000a            return volume * density;\u000a        };\u000a\u000a        var showWarning = function showWarningIfRequiredFilamentExceedsRemaining(required, remaining) {\u000a            if (required < remaining) return false;\u000a\u000a            if (warning) {\u000a                // fade out notification if one is still shown\u000a                warning.options.delay = 1000;\u000a                warning.queueRemove();\u000a            }\u000a\u000a            warning = new PNotify({\u000a                title: gettext('Insufficient filament'),\u000a                text: gettext("The current print job needs more material than what's left on the selected spool."),\u000a                type: 'warning',\u000a                hide: false\u000a            });\u000a\u000a            return true;\u000a        };\u000a\u000a        var filament = printerStateViewModel.filament();\u000a        var spoolData = selections.selectedSpools();\u000a\u000a        var warningIsShown = false; // used to prevent a separate warning message for each tool\u000a\u000a        for (var i = 0; i < filament.length; i += 1) {\u000a            var toolID = Utils.extractToolIDFromName(filament[i].name());\u000a\u000a            if (!spoolData[toolID]) {\u000a                filament[i].data().weight = 0;\u000a            } else {\u000a                var _filament$i$data = filament[i].data(),\u000a                    length = _filament$i$data.length;\u000a\u000a                var _spoolData$toolID$pro = spoolData[toolID].profile,\u000a                    diameter = _spoolData$toolID$pro.diameter,\u000a                    density = _spoolData$toolID$pro.density;\u000a\u000a\u000a                var requiredFilament = calculateWeight(length, diameter, density);\u000a                var remainingFilament = spoolData[toolID].weight - spoolData[toolID].used;\u000a\u000a                filament[i].data().weight = requiredFilament;\u000a\u000a                if (!warningIsShown && settingsViewModel.settings.plugins.filamentmanager.enableWarning()) {\u000a                    warningIsShown = showWarning(requiredFilament, remainingFilament);\u000a                }\u000a            }\u000a        }\u000a\u000a        filename = printerStateViewModel.filename();\u000a        printerStateViewModel.filamentWithWeight(filament);\u000a    };\u000a\u000a    self.setSubscriptions = function subscribeToObservablesWhichTriggerAnUpdate() {\u000a        selections.selectedSpools.subscribe(updateFilament);\u000a\u000a        printerStateViewModel.filament.subscribe(function () {\u000a            // OctoPrint constantly updates the filament observable, to prevent invocing the warning message\u000a            // on every update we only call the updateFilament() method if the selected file has changed\u000a            if (filename !== printerStateViewModel.filename()) {\u000a                if (printerStateViewModel.filename() !== undefined && printerStateViewModel.filament().length < 1) {\u000a                    // file selected, but no filament data found, probably because it's still in analysis queue\u000a                    waitForFilamentData = true;\u000a                } else {\u000a                    waitForFilamentData = false;\u000a                    updateFilament();\u000a                }\u000a            } else if (waitForFilamentData && printerStateViewModel.filament().length > 0) {\u000a                waitForFilamentData = false;\u000a                updateFilament();\u000a            }\u000a        });\u000a    };\u000a};\u000a/* global FilamentManager OCTOPRINT_VIEWMODELS */\u000a\u000a(function registerViewModel() {\u000a    var Plugin = new FilamentManager();\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: Plugin.viewModel,\u000a        dependencies: Plugin.REQUIRED_VIEWMODELS,\u000a        elements: Plugin.BINDINGS\u000a    });\u000a})();\u000a;\u000a
p0
.