V// source: js/lib/babel.js\u000a/**\u000a * Babel JavaScript Support\u000a *\u000a * Copyright (C) 2008-2011 Edgewall Software\u000a * All rights reserved.\u000a *\u000a * This software is licensed as described in the file COPYING, which\u000a * you should have received as part of this distribution. The terms\u000a * are also available at http://babel.edgewall.org/wiki/License.\u000a *\u000a * This software consists of voluntary contributions made by many\u000a * individuals. For the exact contribution history, see the revision\u000a * history and logs, available at http://babel.edgewall.org/log/.\u000a */\u000a\u000a/**\u000a * A simple module that provides a gettext like translation interface.\u000a * The catalog passed to load() must be a object conforming to this\u000a * interface::\u000a *\u000a *    {\u000a *      messages:     an object of {msgid: translations} items where\u000a *                    translations is an array of messages or a single\u000a *                    string if the message is not pluralizable.\u000a *      plural_expr:  the plural expression for the language.\u000a *      locale:       the identifier for this locale.\u000a *      domain:       the name of the domain.\u000a *    }\u000a *\u000a * Missing elements in the object are ignored.\u000a *\u000a * Typical usage::\u000a *\u000a *    var translations = babel.Translations.load(...).install();\u000a */\u000avar babel = new function() {\u000a\u000a  var defaultPluralExpr = function(n) { return n == 1 ? 0 : 1; };\u000a  var formatRegex = /%?%(?:\u005c(([^\u005c)]+)\u005c))?([disr])/g;\u000a\u000a  /**\u000a   * A translations object implementing the gettext interface\u000a   */\u000a  var Translations = this.Translations = function(locale, domain) {\u000a    this.messages = {};\u000a    this.locale = locale || 'unknown';\u000a    this.domain = domain || 'messages';\u000a    this.pluralexpr = defaultPluralExpr;\u000a  };\u000a\u000a  /**\u000a   * Create a new translations object from the catalog and return it.\u000a   * See the babel-module comment for more details.\u000a   */\u000a  Translations.load = function(catalog) {\u000a    var rv = new Translations();\u000a    rv.load(catalog);\u000a    return rv;\u000a  };\u000a\u000a  Translations.prototype = {\u000a    /**\u000a     * translate a single string.\u000a     */\u000a    gettext: function(string) {\u000a      var translated = this.messages[string];\u000a      if (typeof translated == 'undefined')\u000a        return string;\u000a      return (typeof translated == 'string') ? translated : translated[0];\u000a    },\u000a\u000a    /**\u000a     * translate a pluralizable string\u000a     */\u000a    ngettext: function(singular, plural, n) {\u000a      var translated = this.messages[singular];\u000a      if (typeof translated == 'undefined')\u000a        return (n == 1) ? singular : plural;\u000a      return translated[this.pluralexpr(n)];\u000a    },\u000a\u000a    /**\u000a     * Install this translation document wide.  After this call, there are\u000a     * three new methods on the window object: _, gettext and ngettext\u000a     */\u000a    install: function() {\u000a      var self = this;\u000a      window.gettext = function(string) {\u000a        return self.gettext(string);\u000a      };\u000a      window.ngettext = function(singular, plural, n) {\u000a        return self.ngettext(singular, plural, n);\u000a      };\u000a      return this;\u000a    },\u000a\u000a    /**\u000a     * Works like Translations.load but updates the instance rather\u000a     * then creating a new one.\u000a     */\u000a    load: function(catalog) {\u000a      if (catalog.messages)\u000a        this.update(catalog.messages);\u000a      if (catalog.plural_expr)\u000a        this.setPluralExpr(catalog.plural_expr);\u000a      if (catalog.locale)\u000a        this.locale = catalog.locale;\u000a      if (catalog.domain)\u000a        this.domain = catalog.domain;\u000a      return this;\u000a    },\u000a\u000a    /**\u000a     * Updates the translations with the object of messages.\u000a     */\u000a    update: function(mapping) {\u000a      for (var key in mapping)\u000a        if (mapping.hasOwnProperty(key))\u000a          this.messages[key] = mapping[key];\u000a      return this;\u000a    },\u000a\u000a    /**\u000a     * Sets the plural expression\u000a     */\u000a    setPluralExpr: function(expr) {\u000a      this.pluralexpr = new Function('n', 'return +(' + expr + ')');\u000a      return this;\u000a    }\u000a  };\u000a\u000a  /**\u000a   * A python inspired string formatting function.  Supports named and\u000a   * positional placeholders and "s", "d" and "i" as type characters\u000a   * without any formatting specifications.\u000a   *\u000a   * Examples::\u000a   *\u000a   *    babel.format(_('Hello %s'), name)\u000a   *    babel.format(_('Progress: %(percent)s%%'), {percent: 100})\u000a   */ \u000a  this.format = function() {\u000a    var arg, string = arguments[0], idx = 0;\u000a    if (arguments.length == 1)\u000a      return string;\u000a    else if (arguments.length == 2 && typeof arguments[1] == 'object')\u000a      arg = arguments[1];\u000a    else {\u000a      arg = [];\u000a      for (var i = 1, n = arguments.length; i != n; ++i)\u000a        arg[i - 1] = arguments[i];\u000a    }\u000a    return string.replace(formatRegex, function(all, name, type) {\u000a      if (all[0] == all[1]) return all.substring(1);\u000a      var value = arg[name || idx++];\u000a      return (type == 'i' || type == 'd') ? +value : value; \u000a    });\u000a  }\u000a\u000a};\u000a\u000a;\u000a
p0
.