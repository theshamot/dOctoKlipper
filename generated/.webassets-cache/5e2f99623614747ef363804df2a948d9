V// source: plugin/taborder/js/spectrum.js\u000a// Spectrum Colorpicker v1.8.0\u000a// https://github.com/bgrins/spectrum\u000a// Author: Brian Grinstead\u000a// License: MIT\u000a\u000a(function (factory) {\u000a    "use strict";\u000a\u000a    if (typeof define === 'function' && define.amd) { // AMD\u000a        define(['jquery'], factory);\u000a    }\u000a    else if (typeof exports == "object" && typeof module == "object") { // CommonJS\u000a        module.exports = factory(require('jquery'));\u000a    }\u000a    else { // Browser\u000a        factory(jQuery);\u000a    }\u000a})(function($, undefined) {\u000a    "use strict";\u000a\u000a    var defaultOpts = {\u000a\u000a        // Callbacks\u000a        beforeShow: noop,\u000a        move: noop,\u000a        change: noop,\u000a        show: noop,\u000a        hide: noop,\u000a\u000a        // Options\u000a        color: false,\u000a        flat: false,\u000a        showInput: false,\u000a        allowEmpty: false,\u000a        showButtons: true,\u000a        clickoutFiresChange: true,\u000a        showInitial: false,\u000a        showPalette: false,\u000a        showPaletteOnly: false,\u000a        hideAfterPaletteSelect: false,\u000a        togglePaletteOnly: false,\u000a        showSelectionPalette: true,\u000a        localStorageKey: false,\u000a        appendTo: "body",\u000a        maxSelectionSize: 7,\u000a        cancelText: "cancel",\u000a        chooseText: "choose",\u000a        togglePaletteMoreText: "more",\u000a        togglePaletteLessText: "less",\u000a        clearText: "Clear Color Selection",\u000a        noColorSelectedText: "No Color Selected",\u000a        preferredFormat: false,\u000a        className: "", // Deprecated - use containerClassName and replacerClassName instead.\u000a        containerClassName: "",\u000a        replacerClassName: "",\u000a        showAlpha: false,\u000a        theme: "sp-light",\u000a        palette: [["#ffffff", "#000000", "#ff0000", "#ff8000", "#ffff00", "#008000", "#0000ff", "#4b0082", "#9400d3"]],\u000a        selectionPalette: [],\u000a        disabled: false,\u000a        offset: null\u000a    },\u000a    spectrums = [],\u000a    IE = !!/msie/i.exec( window.navigator.userAgent ),\u000a    rgbaSupport = (function() {\u000a        function contains( str, substr ) {\u000a            return !!~('' + str).indexOf(substr);\u000a        }\u000a\u000a        var elem = document.createElement('div');\u000a        var style = elem.style;\u000a        style.cssText = 'background-color:rgba(0,0,0,.5)';\u000a        return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');\u000a    })(),\u000a    replaceInput = [\u000a        "<div class='sp-replacer'>",\u000a            "<div class='sp-preview'><div class='sp-preview-inner'></div></div>",\u000a            "<div class='sp-dd'>&#9660;</div>",\u000a        "</div>"\u000a    ].join(''),\u000a    markup = (function () {\u000a\u000a        // IE does not support gradients with multiple stops, so we need to simulate\u000a        //  that for the rainbow slider with 8 divs that each have a single gradient\u000a        var gradientFix = "";\u000a        if (IE) {\u000a            for (var i = 1; i <= 6; i++) {\u000a                gradientFix += "<div class='sp-" + i + "'></div>";\u000a            }\u000a        }\u000a\u000a        return [\u000a            "<div class='sp-container sp-hidden'>",\u000a                "<div class='sp-palette-container'>",\u000a                    "<div class='sp-palette sp-thumb sp-cf'></div>",\u000a                    "<div class='sp-palette-button-container sp-cf'>",\u000a                        "<button type='button' class='sp-palette-toggle'></button>",\u000a                    "</div>",\u000a                "</div>",\u000a                "<div class='sp-picker-container'>",\u000a                    "<div class='sp-top sp-cf'>",\u000a                        "<div class='sp-fill'></div>",\u000a                        "<div class='sp-top-inner'>",\u000a                            "<div class='sp-color'>",\u000a                                "<div class='sp-sat'>",\u000a                                    "<div class='sp-val'>",\u000a                                        "<div class='sp-dragger'></div>",\u000a                                    "</div>",\u000a                                "</div>",\u000a                            "</div>",\u000a                            "<div class='sp-clear sp-clear-display'>",\u000a                            "</div>",\u000a                            "<div class='sp-hue'>",\u000a                                "<div class='sp-slider'></div>",\u000a                                gradientFix,\u000a                            "</div>",\u000a                        "</div>",\u000a                        "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>",\u000a                    "</div>",\u000a                    "<div class='sp-input-container sp-cf'>",\u000a                        "<input class='sp-input' type='text' spellcheck='false'  />",\u000a                    "</div>",\u000a                    "<div class='sp-initial sp-thumb sp-cf'></div>",\u000a                    "<div class='sp-button-container sp-cf'>",\u000a                        "<a class='sp-cancel' href='#'></a>",\u000a                        "<button type='button' class='sp-choose'></button>",\u000a                    "</div>",\u000a                "</div>",\u000a            "</div>"\u000a        ].join("");\u000a    })();\u000a\u000a    function paletteTemplate (p, color, className, opts) {\u000a        var html = [];\u000a        for (var i = 0; i < p.length; i++) {\u000a            var current = p[i];\u000a            if(current) {\u000a                var tiny = tinycolor(current);\u000a                var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";\u000a                c += (tinycolor.equals(color, current)) ? " sp-thumb-active" : "";\u000a                var formattedString = tiny.toString(opts.preferredFormat || "rgb");\u000a                var swatchStyle = rgbaSupport ? ("background-color:" + tiny.toRgbString()) : "filter:" + tiny.toFilter();\u000a                html.push('<span title="' + formattedString + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';" /></span>');\u000a            } else {\u000a                var cls = 'sp-clear-display';\u000a                html.push($('<div />')\u000a                    .append($('<span data-color="" style="background-color:transparent;" class="' + cls + '"></span>')\u000a                        .attr('title', opts.noColorSelectedText)\u000a                    )\u000a                    .html()\u000a                );\u000a            }\u000a        }\u000a        return "<div class='sp-cf " + className + "'>" + html.join('') + "</div>";\u000a    }\u000a\u000a    function hideAll() {\u000a        for (var i = 0; i < spectrums.length; i++) {\u000a            if (spectrums[i]) {\u000a                spectrums[i].hide();\u000a            }\u000a        }\u000a    }\u000a\u000a    function instanceOptions(o, callbackContext) {\u000a        var opts = $.extend({}, defaultOpts, o);\u000a        opts.callbacks = {\u000a            'move': bind(opts.move, callbackContext),\u000a            'change': bind(opts.change, callbackContext),\u000a            'show': bind(opts.show, callbackContext),\u000a            'hide': bind(opts.hide, callbackContext),\u000a            'beforeShow': bind(opts.beforeShow, callbackContext)\u000a        };\u000a\u000a        return opts;\u000a    }\u000a\u000a    function spectrum(element, o) {\u000a\u000a        var opts = instanceOptions(o, element),\u000a            flat = opts.flat,\u000a            showSelectionPalette = opts.showSelectionPalette,\u000a            localStorageKey = opts.localStorageKey,\u000a            theme = opts.theme,\u000a            callbacks = opts.callbacks,\u000a            resize = throttle(reflow, 10),\u000a            visible = false,\u000a            isDragging = false,\u000a            dragWidth = 0,\u000a            dragHeight = 0,\u000a            dragHelperHeight = 0,\u000a            slideHeight = 0,\u000a            slideWidth = 0,\u000a            alphaWidth = 0,\u000a            alphaSlideHelperWidth = 0,\u000a            slideHelperHeight = 0,\u000a            currentHue = 0,\u000a            currentSaturation = 0,\u000a            currentValue = 0,\u000a            currentAlpha = 1,\u000a            palette = [],\u000a            paletteArray = [],\u000a            paletteLookup = {},\u000a            selectionPalette = opts.selectionPalette.slice(0),\u000a            maxSelectionSize = opts.maxSelectionSize,\u000a            draggingClass = "sp-dragging",\u000a            shiftMovementDirection = null;\u000a\u000a        var doc = element.ownerDocument,\u000a            body = doc.body,\u000a            boundElement = $(element),\u000a            disabled = false,\u000a            container = $(markup, doc).addClass(theme),\u000a            pickerContainer = container.find(".sp-picker-container"),\u000a            dragger = container.find(".sp-color"),\u000a            dragHelper = container.find(".sp-dragger"),\u000a            slider = container.find(".sp-hue"),\u000a            slideHelper = container.find(".sp-slider"),\u000a            alphaSliderInner = container.find(".sp-alpha-inner"),\u000a            alphaSlider = container.find(".sp-alpha"),\u000a            alphaSlideHelper = container.find(".sp-alpha-handle"),\u000a            textInput = container.find(".sp-input"),\u000a            paletteContainer = container.find(".sp-palette"),\u000a            initialColorContainer = container.find(".sp-initial"),\u000a            cancelButton = container.find(".sp-cancel"),\u000a            clearButton = container.find(".sp-clear"),\u000a            chooseButton = container.find(".sp-choose"),\u000a            toggleButton = container.find(".sp-palette-toggle"),\u000a            isInput = boundElement.is("input"),\u000a            isInputTypeColor = isInput && boundElement.attr("type") === "color" && inputTypeColorSupport(),\u000a            shouldReplace = isInput && !flat,\u000a            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\u000a            offsetElement = (shouldReplace) ? replacer : boundElement,\u000a            previewElement = replacer.find(".sp-preview-inner"),\u000a            initialColor = opts.color || (isInput && boundElement.val()),\u000a            colorOnShow = false,\u000a            currentPreferredFormat = opts.preferredFormat,\u000a            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\u000a            isEmpty = !initialColor,\u000a            allowEmpty = opts.allowEmpty && !isInputTypeColor;\u000a\u000a        function applyOptions() {\u000a\u000a            if (opts.showPaletteOnly) {\u000a                opts.showPalette = true;\u000a            }\u000a\u000a            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\u000a\u000a            if (opts.palette) {\u000a                palette = opts.palette.slice(0);\u000a                paletteArray = $.isArray(palette[0]) ? palette : [palette];\u000a                paletteLookup = {};\u000a                for (var i = 0; i < paletteArray.length; i++) {\u000a                    for (var j = 0; j < paletteArray[i].length; j++) {\u000a                        var rgb = tinycolor(paletteArray[i][j]).toRgbString();\u000a                        paletteLookup[rgb] = true;\u000a                    }\u000a                }\u000a            }\u000a\u000a            container.toggleClass("sp-flat", flat);\u000a            container.toggleClass("sp-input-disabled", !opts.showInput);\u000a            container.toggleClass("sp-alpha-enabled", opts.showAlpha);\u000a            container.toggleClass("sp-clear-enabled", allowEmpty);\u000a            container.toggleClass("sp-buttons-disabled", !opts.showButtons);\u000a            container.toggleClass("sp-palette-buttons-disabled", !opts.togglePaletteOnly);\u000a            container.toggleClass("sp-palette-disabled", !opts.showPalette);\u000a            container.toggleClass("sp-palette-only", opts.showPaletteOnly);\u000a            container.toggleClass("sp-initial-disabled", !opts.showInitial);\u000a            container.addClass(opts.className).addClass(opts.containerClassName);\u000a\u000a            reflow();\u000a        }\u000a\u000a        function initialize() {\u000a\u000a            if (IE) {\u000a                container.find("*:not(input)").attr("unselectable", "on");\u000a            }\u000a\u000a            applyOptions();\u000a\u000a            if (shouldReplace) {\u000a                boundElement.after(replacer).hide();\u000a            }\u000a\u000a            if (!allowEmpty) {\u000a                clearButton.hide();\u000a            }\u000a\u000a            if (flat) {\u000a                boundElement.after(container).hide();\u000a            }\u000a            else {\u000a\u000a                var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);\u000a                if (appendTo.length !== 1) {\u000a                    appendTo = $("body");\u000a                }\u000a\u000a                appendTo.append(container);\u000a            }\u000a\u000a            updateSelectionPaletteFromStorage();\u000a\u000a            offsetElement.bind("click.spectrum touchstart.spectrum", function (e) {\u000a                if (!disabled) {\u000a                    toggle();\u000a                }\u000a\u000a                e.stopPropagation();\u000a\u000a                if (!$(e.target).is("input")) {\u000a                    e.preventDefault();\u000a                }\u000a            });\u000a\u000a            if(boundElement.is(":disabled") || (opts.disabled === true)) {\u000a                disable();\u000a            }\u000a\u000a            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\u000a            container.click(stopPropagation);\u000a\u000a            // Handle user typed input\u000a            textInput.change(setFromTextInput);\u000a            textInput.bind("paste", function () {\u000a                setTimeout(setFromTextInput, 1);\u000a            });\u000a            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\u000a\u000a            cancelButton.text(opts.cancelText);\u000a            cancelButton.bind("click.spectrum", function (e) {\u000a                e.stopPropagation();\u000a                e.preventDefault();\u000a                revert();\u000a                hide();\u000a            });\u000a\u000a            clearButton.attr("title", opts.clearText);\u000a            clearButton.bind("click.spectrum", function (e) {\u000a                e.stopPropagation();\u000a                e.preventDefault();\u000a                isEmpty = true;\u000a                move();\u000a\u000a                if(flat) {\u000a                    //for the flat style, this is a change event\u000a                    updateOriginalInput(true);\u000a                }\u000a            });\u000a\u000a            chooseButton.text(opts.chooseText);\u000a            chooseButton.bind("click.spectrum", function (e) {\u000a                e.stopPropagation();\u000a                e.preventDefault();\u000a\u000a                if (IE && textInput.is(":focus")) {\u000a                    textInput.trigger('change');\u000a                }\u000a\u000a                if (isValid()) {\u000a                    updateOriginalInput(true);\u000a                    hide();\u000a                }\u000a            });\u000a\u000a            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\u000a            toggleButton.bind("click.spectrum", function (e) {\u000a                e.stopPropagation();\u000a                e.preventDefault();\u000a\u000a                opts.showPaletteOnly = !opts.showPaletteOnly;\u000a\u000a                // To make sure the Picker area is drawn on the right, next to the\u000a                // Palette area (and not below the palette), first move the Palette\u000a                // to the left to make space for the picker, plus 5px extra.\u000a                // The 'applyOptions' function puts the whole container back into place\u000a                // and takes care of the button-text and the sp-palette-only CSS class.\u000a                if (!opts.showPaletteOnly && !flat) {\u000a                    container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\u000a                }\u000a                applyOptions();\u000a            });\u000a\u000a            draggable(alphaSlider, function (dragX, dragY, e) {\u000a                currentAlpha = (dragX / alphaWidth);\u000a                isEmpty = false;\u000a                if (e.shiftKey) {\u000a                    currentAlpha = Math.round(currentAlpha * 10) / 10;\u000a                }\u000a\u000a                move();\u000a            }, dragStart, dragStop);\u000a\u000a            draggable(slider, function (dragX, dragY) {\u000a                currentHue = parseFloat(dragY / slideHeight);\u000a                isEmpty = false;\u000a                if (!opts.showAlpha) {\u000a                    currentAlpha = 1;\u000a                }\u000a                move();\u000a            }, dragStart, dragStop);\u000a\u000a            draggable(dragger, function (dragX, dragY, e) {\u000a\u000a                // shift+drag should snap the movement to either the x or y axis.\u000a                if (!e.shiftKey) {\u000a                    shiftMovementDirection = null;\u000a                }\u000a                else if (!shiftMovementDirection) {\u000a                    var oldDragX = currentSaturation * dragWidth;\u000a                    var oldDragY = dragHeight - (currentValue * dragHeight);\u000a                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\u000a\u000a                    shiftMovementDirection = furtherFromX ? "x" : "y";\u000a                }\u000a\u000a                var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";\u000a                var setValue = !shiftMovementDirection || shiftMovementDirection === "y";\u000a\u000a                if (setSaturation) {\u000a                    currentSaturation = parseFloat(dragX / dragWidth);\u000a                }\u000a                if (setValue) {\u000a                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);\u000a                }\u000a\u000a                isEmpty = false;\u000a                if (!opts.showAlpha) {\u000a                    currentAlpha = 1;\u000a                }\u000a\u000a                move();\u000a\u000a            }, dragStart, dragStop);\u000a\u000a            if (!!initialColor) {\u000a                set(initialColor);\u000a\u000a                // In case color was black - update the preview UI and set the format\u000a                // since the set function will not run (default color is black).\u000a                updateUI();\u000a                currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;\u000a\u000a                addColorToSelectionPalette(initialColor);\u000a            }\u000a            else {\u000a                updateUI();\u000a            }\u000a\u000a            if (flat) {\u000a                show();\u000a            }\u000a\u000a            function paletteElementClick(e) {\u000a                if (e.data && e.data.ignore) {\u000a                    set($(e.target).closest(".sp-thumb-el").data("color"));\u000a                    move();\u000a                }\u000a                else {\u000a                    set($(e.target).closest(".sp-thumb-el").data("color"));\u000a                    move();\u000a                    updateOriginalInput(true);\u000a                    if (opts.hideAfterPaletteSelect) {\u000a                      hide();\u000a                    }\u000a                }\u000a\u000a                return false;\u000a            }\u000a\u000a            var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";\u000a            paletteContainer.delegate(".sp-thumb-el", paletteEvent, paletteElementClick);\u000a            initialColorContainer.delegate(".sp-thumb-el:nth-child(1)", paletteEvent, { ignore: true }, paletteElementClick);\u000a        }\u000a\u000a        function updateSelectionPaletteFromStorage() {\u000a\u000a            if (localStorageKey && window.localStorage) {\u000a\u000a                // Migrate old palettes over to new format.  May want to remove this eventually.\u000a                try {\u000a                    var oldPalette = window.localStorage[localStorageKey].split(",#");\u000a                    if (oldPalette.length > 1) {\u000a                        delete window.localStorage[localStorageKey];\u000a                        $.each(oldPalette, function(i, c) {\u000a                             addColorToSelectionPalette(c);\u000a                        });\u000a                    }\u000a                }\u000a                catch(e) { }\u000a\u000a                try {\u000a                    selectionPalette = window.localStorage[localStorageKey].split(";");\u000a                }\u000a                catch (e) { }\u000a            }\u000a        }\u000a\u000a        function addColorToSelectionPalette(color) {\u000a            if (showSelectionPalette) {\u000a                var rgb = tinycolor(color).toRgbString();\u000a                if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {\u000a                    selectionPalette.push(rgb);\u000a                    while(selectionPalette.length > maxSelectionSize) {\u000a                        selectionPalette.shift();\u000a                    }\u000a                }\u000a\u000a                if (localStorageKey && window.localStorage) {\u000a                    try {\u000a                        window.localStorage[localStorageKey] = selectionPalette.join(";");\u000a                    }\u000a                    catch(e) { }\u000a                }\u000a            }\u000a        }\u000a\u000a        function getUniqueSelectionPalette() {\u000a            var unique = [];\u000a            if (opts.showPalette) {\u000a                for (var i = 0; i < selectionPalette.length; i++) {\u000a                    var rgb = tinycolor(selectionPalette[i]).toRgbString();\u000a\u000a                    if (!paletteLookup[rgb]) {\u000a                        unique.push(selectionPalette[i]);\u000a                    }\u000a                }\u000a            }\u000a\u000a            return unique.reverse().slice(0, opts.maxSelectionSize);\u000a        }\u000a\u000a        function drawPalette() {\u000a\u000a            var currentColor = get();\u000a\u000a            var html = $.map(paletteArray, function (palette, i) {\u000a                return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i, opts);\u000a            });\u000a\u000a            updateSelectionPaletteFromStorage();\u000a\u000a            if (selectionPalette) {\u000a                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection", opts));\u000a            }\u000a\u000a            paletteContainer.html(html.join(""));\u000a        }\u000a\u000a        function drawInitial() {\u000a            if (opts.showInitial) {\u000a                var initial = colorOnShow;\u000a                var current = get();\u000a                initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial", opts));\u000a            }\u000a        }\u000a\u000a        function dragStart() {\u000a            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\u000a                reflow();\u000a            }\u000a            isDragging = true;\u000a            container.addClass(draggingClass);\u000a            shiftMovementDirection = null;\u000a            boundElement.trigger('dragstart.spectrum', [ get() ]);\u000a        }\u000a\u000a        function dragStop() {\u000a            isDragging = false;\u000a            container.removeClass(draggingClass);\u000a            boundElement.trigger('dragstop.spectrum', [ get() ]);\u000a        }\u000a\u000a        function setFromTextInput() {\u000a\u000a            var value = textInput.val();\u000a\u000a            if ((value === null || value === "") && allowEmpty) {\u000a                set(null);\u000a                updateOriginalInput(true);\u000a            }\u000a            else {\u000a                var tiny = tinycolor(value);\u000a                if (tiny.isValid()) {\u000a                    set(tiny);\u000a                    updateOriginalInput(true);\u000a                }\u000a                else {\u000a                    textInput.addClass("sp-validation-error");\u000a                }\u000a            }\u000a        }\u000a\u000a        function toggle() {\u000a            if (visible) {\u000a                hide();\u000a            }\u000a            else {\u000a                show();\u000a            }\u000a        }\u000a\u000a        function show() {\u000a            var event = $.Event('beforeShow.spectrum');\u000a\u000a            if (visible) {\u000a                reflow();\u000a                return;\u000a            }\u000a\u000a            boundElement.trigger(event, [ get() ]);\u000a\u000a            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\u000a                return;\u000a            }\u000a\u000a            hideAll();\u000a            visible = true;\u000a\u000a            $(doc).bind("keydown.spectrum", onkeydown);\u000a            $(doc).bind("click.spectrum", clickout);\u000a            $(window).bind("resize.spectrum", resize);\u000a            replacer.addClass("sp-active");\u000a            container.removeClass("sp-hidden");\u000a\u000a            reflow();\u000a            updateUI();\u000a\u000a            colorOnShow = get();\u000a\u000a            drawInitial();\u000a            callbacks.show(colorOnShow);\u000a            boundElement.trigger('show.spectrum', [ colorOnShow ]);\u000a        }\u000a\u000a        function onkeydown(e) {\u000a            // Close on ESC\u000a            if (e.keyCode === 27) {\u000a                hide();\u000a            }\u000a        }\u000a\u000a        function clickout(e) {\u000a            // Return on right click.\u000a            if (e.button == 2) { return; }\u000a\u000a            // If a drag event was happening during the mouseup, don't hide\u000a            // on click.\u000a            if (isDragging) { return; }\u000a\u000a            if (clickoutFiresChange) {\u000a                updateOriginalInput(true);\u000a            }\u000a            else {\u000a                revert();\u000a            }\u000a            hide();\u000a        }\u000a\u000a        function hide() {\u000a            // Return if hiding is unnecessary\u000a            if (!visible || flat) { return; }\u000a            visible = false;\u000a\u000a            $(doc).unbind("keydown.spectrum", onkeydown);\u000a            $(doc).unbind("click.spectrum", clickout);\u000a            $(window).unbind("resize.spectrum", resize);\u000a\u000a            replacer.removeClass("sp-active");\u000a            container.addClass("sp-hidden");\u000a\u000a            callbacks.hide(get());\u000a            boundElement.trigger('hide.spectrum', [ get() ]);\u000a        }\u000a\u000a        function revert() {\u000a            set(colorOnShow, true);\u000a        }\u000a\u000a        function set(color, ignoreFormatChange) {\u000a            if (tinycolor.equals(color, get())) {\u000a                // Update UI just in case a validation error needs\u000a                // to be cleared.\u000a                updateUI();\u000a                return;\u000a            }\u000a\u000a            var newColor, newHsv;\u000a            if (!color && allowEmpty) {\u000a                isEmpty = true;\u000a            } else {\u000a                isEmpty = false;\u000a                newColor = tinycolor(color);\u000a                newHsv = newColor.toHsv();\u000a\u000a                currentHue = (newHsv.h % 360) / 360;\u000a                currentSaturation = newHsv.s;\u000a                currentValue = newHsv.v;\u000a                currentAlpha = newHsv.a;\u000a            }\u000a            updateUI();\u000a\u000a            if (newColor && newColor.isValid() && !ignoreFormatChange) {\u000a                currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\u000a            }\u000a        }\u000a\u000a        function get(opts) {\u000a            opts = opts || { };\u000a\u000a            if (allowEmpty && isEmpty) {\u000a                return null;\u000a            }\u000a\u000a            return tinycolor.fromRatio({\u000a                h: currentHue,\u000a                s: currentSaturation,\u000a                v: currentValue,\u000a                a: Math.round(currentAlpha * 100) / 100\u000a            }, { format: opts.format || currentPreferredFormat });\u000a        }\u000a\u000a        function isValid() {\u000a            return !textInput.hasClass("sp-validation-error");\u000a        }\u000a\u000a        function move() {\u000a            updateUI();\u000a\u000a            callbacks.move(get());\u000a            boundElement.trigger('move.spectrum', [ get() ]);\u000a        }\u000a\u000a        function updateUI() {\u000a\u000a            textInput.removeClass("sp-validation-error");\u000a\u000a            updateHelperLocations();\u000a\u000a            // Update dragger background color (gradients take care of saturation and value).\u000a            var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });\u000a            dragger.css("background-color", flatColor.toHexString());\u000a\u000a            // Get a format that alpha will be included in (hex and names ignore alpha)\u000a            var format = currentPreferredFormat;\u000a            if (currentAlpha < 1 && !(currentAlpha === 0 && format === "name")) {\u000a                if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {\u000a                    format = "rgb";\u000a                }\u000a            }\u000a\u000a            var realColor = get({ format: format }),\u000a                displayColor = '';\u000a\u000a             //reset background info for preview element\u000a            previewElement.removeClass("sp-clear-display");\u000a            previewElement.css('background-color', 'transparent');\u000a\u000a            if (!realColor && allowEmpty) {\u000a                // Update the replaced elements background with icon indicating no color selection\u000a                previewElement.addClass("sp-clear-display");\u000a            }\u000a            else {\u000a                var realHex = realColor.toHexString(),\u000a                    realRgb = realColor.toRgbString();\u000a\u000a                // Update the replaced elements background color (with actual selected color)\u000a                if (rgbaSupport || realColor.alpha === 1) {\u000a                    previewElement.css("background-color", realRgb);\u000a                }\u000a                else {\u000a                    previewElement.css("background-color", "transparent");\u000a                    previewElement.css("filter", realColor.toFilter());\u000a                }\u000a\u000a                if (opts.showAlpha) {\u000a                    var rgb = realColor.toRgb();\u000a                    rgb.a = 0;\u000a                    var realAlpha = tinycolor(rgb).toRgbString();\u000a                    var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";\u000a\u000a                    if (IE) {\u000a                        alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));\u000a                    }\u000a                    else {\u000a                        alphaSliderInner.css("background", "-webkit-" + gradient);\u000a                        alphaSliderInner.css("background", "-moz-" + gradient);\u000a                        alphaSliderInner.css("background", "-ms-" + gradient);\u000a                        // Use current syntax gradient on unprefixed property.\u000a                        alphaSliderInner.css("background",\u000a                            "linear-gradient(to right, " + realAlpha + ", " + realHex + ")");\u000a                    }\u000a                }\u000a\u000a                displayColor = realColor.toString(format);\u000a            }\u000a\u000a            // Update the text entry input as it changes happen\u000a            if (opts.showInput) {\u000a                textInput.val(displayColor);\u000a            }\u000a\u000a            if (opts.showPalette) {\u000a                drawPalette();\u000a            }\u000a\u000a            drawInitial();\u000a        }\u000a\u000a        function updateHelperLocations() {\u000a            var s = currentSaturation;\u000a            var v = currentValue;\u000a\u000a            if(allowEmpty && isEmpty) {\u000a                //if selected color is empty, hide the helpers\u000a                alphaSlideHelper.hide();\u000a                slideHelper.hide();\u000a                dragHelper.hide();\u000a            }\u000a            else {\u000a                //make sure helpers are visible\u000a                alphaSlideHelper.show();\u000a                slideHelper.show();\u000a                dragHelper.show();\u000a\u000a                // Where to show the little circle in that displays your current selected color\u000a                var dragX = s * dragWidth;\u000a                var dragY = dragHeight - (v * dragHeight);\u000a                dragX = Math.max(\u000a                    -dragHelperHeight,\u000a                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\u000a                );\u000a                dragY = Math.max(\u000a                    -dragHelperHeight,\u000a                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\u000a                );\u000a                dragHelper.css({\u000a                    "top": dragY + "px",\u000a                    "left": dragX + "px"\u000a                });\u000a\u000a                var alphaX = currentAlpha * alphaWidth;\u000a                alphaSlideHelper.css({\u000a                    "left": (alphaX - (alphaSlideHelperWidth / 2)) + "px"\u000a                });\u000a\u000a                // Where to show the bar that displays your current selected hue\u000a                var slideY = (currentHue) * slideHeight;\u000a                slideHelper.css({\u000a                    "top": (slideY - slideHelperHeight) + "px"\u000a                });\u000a            }\u000a        }\u000a\u000a        function updateOriginalInput(fireCallback) {\u000a            var color = get(),\u000a                displayColor = '',\u000a                hasChanged = !tinycolor.equals(color, colorOnShow);\u000a\u000a            if (color) {\u000a                displayColor = color.toString(currentPreferredFormat);\u000a                // Update the selection palette with the current color\u000a                addColorToSelectionPalette(color);\u000a            }\u000a\u000a            if (isInput) {\u000a                boundElement.val(displayColor);\u000a            }\u000a\u000a            if (fireCallback && hasChanged) {\u000a                callbacks.change(color);\u000a                boundElement.trigger('change', [ color ]);\u000a            }\u000a        }\u000a\u000a        function reflow() {\u000a            if (!visible) {\u000a                return; // Calculations would be useless and wouldn't be reliable anyways\u000a            }\u000a            dragWidth = dragger.width();\u000a            dragHeight = dragger.height();\u000a            dragHelperHeight = dragHelper.height();\u000a            slideWidth = slider.width();\u000a            slideHeight = slider.height();\u000a            slideHelperHeight = slideHelper.height();\u000a            alphaWidth = alphaSlider.width();\u000a            alphaSlideHelperWidth = alphaSlideHelper.width();\u000a\u000a            if (!flat) {\u000a                container.css("position", "absolute");\u000a                if (opts.offset) {\u000a                    container.offset(opts.offset);\u000a                } else {\u000a                    container.offset(getOffset(container, offsetElement));\u000a                }\u000a            }\u000a\u000a            updateHelperLocations();\u000a\u000a            if (opts.showPalette) {\u000a                drawPalette();\u000a            }\u000a\u000a            boundElement.trigger('reflow.spectrum');\u000a        }\u000a\u000a        function destroy() {\u000a            boundElement.show();\u000a            offsetElement.unbind("click.spectrum touchstart.spectrum");\u000a            container.remove();\u000a            replacer.remove();\u000a            spectrums[spect.id] = null;\u000a        }\u000a\u000a        function option(optionName, optionValue) {\u000a            if (optionName === undefined) {\u000a                return $.extend({}, opts);\u000a            }\u000a            if (optionValue === undefined) {\u000a                return opts[optionName];\u000a            }\u000a\u000a            opts[optionName] = optionValue;\u000a\u000a            if (optionName === "preferredFormat") {\u000a                currentPreferredFormat = opts.preferredFormat;\u000a            }\u000a            applyOptions();\u000a        }\u000a\u000a        function enable() {\u000a            disabled = false;\u000a            boundElement.attr("disabled", false);\u000a            offsetElement.removeClass("sp-disabled");\u000a        }\u000a\u000a        function disable() {\u000a            hide();\u000a            disabled = true;\u000a            boundElement.attr("disabled", true);\u000a            offsetElement.addClass("sp-disabled");\u000a        }\u000a\u000a        function setOffset(coord) {\u000a            opts.offset = coord;\u000a            reflow();\u000a        }\u000a\u000a        initialize();\u000a\u000a        var spect = {\u000a            show: show,\u000a            hide: hide,\u000a            toggle: toggle,\u000a            reflow: reflow,\u000a            option: option,\u000a            enable: enable,\u000a            disable: disable,\u000a            offset: setOffset,\u000a            set: function (c) {\u000a                set(c);\u000a                updateOriginalInput();\u000a            },\u000a            get: get,\u000a            destroy: destroy,\u000a            container: container\u000a        };\u000a\u000a        spect.id = spectrums.push(spect) - 1;\u000a\u000a        return spect;\u000a    }\u000a\u000a    /**\u000a    * checkOffset - get the offset below/above and left/right element depending on screen position\u000a    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\u000a    */\u000a    function getOffset(picker, input) {\u000a        var extraY = 0;\u000a        var dpWidth = picker.outerWidth();\u000a        var dpHeight = picker.outerHeight();\u000a        var inputHeight = input.outerHeight();\u000a        var doc = picker[0].ownerDocument;\u000a        var docElem = doc.documentElement;\u000a        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\u000a        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\u000a        var offset = input.offset();\u000a        offset.top += inputHeight;\u000a\u000a        offset.left -=\u000a            Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?\u000a            Math.abs(offset.left + dpWidth - viewWidth) : 0);\u000a\u000a        offset.top -=\u000a            Math.min(offset.top, ((offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?\u000a            Math.abs(dpHeight + inputHeight - extraY) : extraY));\u000a\u000a        return offset;\u000a    }\u000a\u000a    /**\u000a    * noop - do nothing\u000a    */\u000a    function noop() {\u000a\u000a    }\u000a\u000a    /**\u000a    * stopPropagation - makes the code only doing this a little easier to read in line\u000a    */\u000a    function stopPropagation(e) {\u000a        e.stopPropagation();\u000a    }\u000a\u000a    /**\u000a    * Create a function bound to a given object\u000a    * Thanks to underscore.js\u000a    */\u000a    function bind(func, obj) {\u000a        var slice = Array.prototype.slice;\u000a        var args = slice.call(arguments, 2);\u000a        return function () {\u000a            return func.apply(obj, args.concat(slice.call(arguments)));\u000a        };\u000a    }\u000a\u000a    /**\u000a    * Lightweight drag helper.  Handles containment within the element, so that\u000a    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\u000a    */\u000a    function draggable(element, onmove, onstart, onstop) {\u000a        onmove = onmove || function () { };\u000a        onstart = onstart || function () { };\u000a        onstop = onstop || function () { };\u000a        var doc = document;\u000a        var dragging = false;\u000a        var offset = {};\u000a        var maxHeight = 0;\u000a        var maxWidth = 0;\u000a        var hasTouch = ('ontouchstart' in window);\u000a\u000a        var duringDragEvents = {};\u000a        duringDragEvents["selectstart"] = prevent;\u000a        duringDragEvents["dragstart"] = prevent;\u000a        duringDragEvents["touchmove mousemove"] = move;\u000a        duringDragEvents["touchend mouseup"] = stop;\u000a\u000a        function prevent(e) {\u000a            if (e.stopPropagation) {\u000a                e.stopPropagation();\u000a            }\u000a            if (e.preventDefault) {\u000a                e.preventDefault();\u000a            }\u000a            e.returnValue = false;\u000a        }\u000a\u000a        function move(e) {\u000a            if (dragging) {\u000a                // Mouseup happened outside of window\u000a                if (IE && doc.documentMode < 9 && !e.button) {\u000a                    return stop();\u000a                }\u000a\u000a                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\u000a                var pageX = t0 && t0.pageX || e.pageX;\u000a                var pageY = t0 && t0.pageY || e.pageY;\u000a\u000a                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\u000a                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\u000a\u000a                if (hasTouch) {\u000a                    // Stop scrolling in iOS\u000a                    prevent(e);\u000a                }\u000a\u000a                onmove.apply(element, [dragX, dragY, e]);\u000a            }\u000a        }\u000a\u000a        function start(e) {\u000a            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\u000a\u000a            if (!rightclick && !dragging) {\u000a                if (onstart.apply(element, arguments) !== false) {\u000a                    dragging = true;\u000a                    maxHeight = $(element).height();\u000a                    maxWidth = $(element).width();\u000a                    offset = $(element).offset();\u000a\u000a                    $(doc).bind(duringDragEvents);\u000a                    $(doc.body).addClass("sp-dragging");\u000a\u000a                    move(e);\u000a\u000a                    prevent(e);\u000a                }\u000a            }\u000a        }\u000a\u000a        function stop() {\u000a            if (dragging) {\u000a                $(doc).unbind(duringDragEvents);\u000a                $(doc.body).removeClass("sp-dragging");\u000a\u000a                // Wait a tick before notifying observers to allow the click event\u000a                // to fire in Chrome.\u000a                setTimeout(function() {\u000a                    onstop.apply(element, arguments);\u000a                }, 0);\u000a            }\u000a            dragging = false;\u000a        }\u000a\u000a        $(element).bind("touchstart mousedown", start);\u000a    }\u000a\u000a    function throttle(func, wait, debounce) {\u000a        var timeout;\u000a        return function () {\u000a            var context = this, args = arguments;\u000a            var throttler = function () {\u000a                timeout = null;\u000a                func.apply(context, args);\u000a            };\u000a            if (debounce) clearTimeout(timeout);\u000a            if (debounce || !timeout) timeout = setTimeout(throttler, wait);\u000a        };\u000a    }\u000a\u000a    function inputTypeColorSupport() {\u000a        return $.fn.spectrum.inputTypeColorSupport();\u000a    }\u000a\u000a    /**\u000a    * Define a jQuery plugin\u000a    */\u000a    var dataID = "spectrum.id";\u000a    $.fn.spectrum = function (opts, extra) {\u000a\u000a        if (typeof opts == "string") {\u000a\u000a            var returnValue = this;\u000a            var args = Array.prototype.slice.call( arguments, 1 );\u000a\u000a            this.each(function () {\u000a                var spect = spectrums[$(this).data(dataID)];\u000a                if (spect) {\u000a                    var method = spect[opts];\u000a                    if (!method) {\u000a                        throw new Error( "Spectrum: no such method: '" + opts + "'" );\u000a                    }\u000a\u000a                    if (opts == "get") {\u000a                        returnValue = spect.get();\u000a                    }\u000a                    else if (opts == "container") {\u000a                        returnValue = spect.container;\u000a                    }\u000a                    else if (opts == "option") {\u000a                        returnValue = spect.option.apply(spect, args);\u000a                    }\u000a                    else if (opts == "destroy") {\u000a                        spect.destroy();\u000a                        $(this).removeData(dataID);\u000a                    }\u000a                    else {\u000a                        method.apply(spect, args);\u000a                    }\u000a                }\u000a            });\u000a\u000a            return returnValue;\u000a        }\u000a\u000a        // Initializing a new instance of spectrum\u000a        return this.spectrum("destroy").each(function () {\u000a            var options = $.extend({}, opts, $(this).data());\u000a            var spect = spectrum(this, options);\u000a            $(this).data(dataID, spect.id);\u000a        });\u000a    };\u000a\u000a    $.fn.spectrum.load = true;\u000a    $.fn.spectrum.loadOpts = {};\u000a    $.fn.spectrum.draggable = draggable;\u000a    $.fn.spectrum.defaults = defaultOpts;\u000a    $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {\u000a        if (typeof inputTypeColorSupport._cachedResult === "undefined") {\u000a            var colorInput = $("<input type='color'/>")[0]; // if color element is supported, value will default to not null\u000a            inputTypeColorSupport._cachedResult = colorInput.type === "color" && colorInput.value !== "";\u000a        }\u000a        return inputTypeColorSupport._cachedResult;\u000a    };\u000a\u000a    $.spectrum = { };\u000a    $.spectrum.localization = { };\u000a    $.spectrum.palettes = { };\u000a\u000a    $.fn.spectrum.processNativeColorInputs = function () {\u000a        var colorInputs = $("input[type=color]");\u000a        if (colorInputs.length && !inputTypeColorSupport()) {\u000a            colorInputs.spectrum({\u000a                preferredFormat: "hex6"\u000a            });\u000a        }\u000a    };\u000a\u000a    // TinyColor v1.1.2\u000a    // https://github.com/bgrins/TinyColor\u000a    // Brian Grinstead, MIT License\u000a\u000a    (function() {\u000a\u000a    var trimLeft = /^[\u005cs,#]+/,\u000a        trimRight = /\u005cs+$/,\u000a        tinyCounter = 0,\u000a        math = Math,\u000a        mathRound = math.round,\u000a        mathMin = math.min,\u000a        mathMax = math.max,\u000a        mathRandom = math.random;\u000a\u000a    var tinycolor = function(color, opts) {\u000a\u000a        color = (color) ? color : '';\u000a        opts = opts || { };\u000a\u000a        // If input is already a tinycolor, return itself\u000a        if (color instanceof tinycolor) {\u000a           return color;\u000a        }\u000a        // If we are called as a function, call using new instead\u000a        if (!(this instanceof tinycolor)) {\u000a            return new tinycolor(color, opts);\u000a        }\u000a\u000a        var rgb = inputToRGB(color);\u000a        this._originalInput = color,\u000a        this._r = rgb.r,\u000a        this._g = rgb.g,\u000a        this._b = rgb.b,\u000a        this._a = rgb.a,\u000a        this._roundA = mathRound(100*this._a) / 100,\u000a        this._format = opts.format || rgb.format;\u000a        this._gradientType = opts.gradientType;\u000a\u000a        // Don't let the range of [0,255] come back in [0,1].\u000a        // Potentially lose a little bit of precision here, but will fix issues where\u000a        // .5 gets interpreted as half of the total, instead of half of 1\u000a        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\u000a        if (this._r < 1) { this._r = mathRound(this._r); }\u000a        if (this._g < 1) { this._g = mathRound(this._g); }\u000a        if (this._b < 1) { this._b = mathRound(this._b); }\u000a\u000a        this._ok = rgb.ok;\u000a        this._tc_id = tinyCounter++;\u000a    };\u000a\u000a    tinycolor.prototype = {\u000a        isDark: function() {\u000a            return this.getBrightness() < 128;\u000a        },\u000a        isLight: function() {\u000a            return !this.isDark();\u000a        },\u000a        isValid: function() {\u000a            return this._ok;\u000a        },\u000a        getOriginalInput: function() {\u000a          return this._originalInput;\u000a        },\u000a        getFormat: function() {\u000a            return this._format;\u000a        },\u000a        getAlpha: function() {\u000a            return this._a;\u000a        },\u000a        getBrightness: function() {\u000a            var rgb = this.toRgb();\u000a            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\u000a        },\u000a        setAlpha: function(value) {\u000a            this._a = boundAlpha(value);\u000a            this._roundA = mathRound(100*this._a) / 100;\u000a            return this;\u000a        },\u000a        toHsv: function() {\u000a            var hsv = rgbToHsv(this._r, this._g, this._b);\u000a            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\u000a        },\u000a        toHsvString: function() {\u000a            var hsv = rgbToHsv(this._r, this._g, this._b);\u000a            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\u000a            return (this._a == 1) ?\u000a              "hsv("  + h + ", " + s + "%, " + v + "%)" :\u000a              "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";\u000a        },\u000a        toHsl: function() {\u000a            var hsl = rgbToHsl(this._r, this._g, this._b);\u000a            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\u000a        },\u000a        toHslString: function() {\u000a            var hsl = rgbToHsl(this._r, this._g, this._b);\u000a            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\u000a            return (this._a == 1) ?\u000a              "hsl("  + h + ", " + s + "%, " + l + "%)" :\u000a              "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";\u000a        },\u000a        toHex: function(allow3Char) {\u000a            return rgbToHex(this._r, this._g, this._b, allow3Char);\u000a        },\u000a        toHexString: function(allow3Char) {\u000a            return '#' + this.toHex(allow3Char);\u000a        },\u000a        toHex8: function() {\u000a            return rgbaToHex(this._r, this._g, this._b, this._a);\u000a        },\u000a        toHex8String: function() {\u000a            return '#' + this.toHex8();\u000a        },\u000a        toRgb: function() {\u000a            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\u000a        },\u000a        toRgbString: function() {\u000a            return (this._a == 1) ?\u000a              "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :\u000a              "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";\u000a        },\u000a        toPercentageRgb: function() {\u000a            return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };\u000a        },\u000a        toPercentageRgbString: function() {\u000a            return (this._a == 1) ?\u000a              "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :\u000a              "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";\u000a        },\u000a        toName: function() {\u000a            if (this._a === 0) {\u000a                return "transparent";\u000a            }\u000a\u000a            if (this._a < 1) {\u000a                return false;\u000a            }\u000a\u000a            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\u000a        },\u000a        toFilter: function(secondColor) {\u000a            var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\u000a            var secondHex8String = hex8String;\u000a            var gradientType = this._gradientType ? "GradientType = 1, " : "";\u000a\u000a            if (secondColor) {\u000a                var s = tinycolor(secondColor);\u000a                secondHex8String = s.toHex8String();\u000a            }\u000a\u000a            return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";\u000a        },\u000a        toString: function(format) {\u000a            var formatSet = !!format;\u000a            format = format || this._format;\u000a\u000a            var formattedString = false;\u000a            var hasAlpha = this._a < 1 && this._a >= 0;\u000a            var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");\u000a\u000a            if (needsAlphaFormat) {\u000a                // Special case for "transparent", all other non-alpha formats\u000a                // will return rgba when there is transparency.\u000a                if (format === "name" && this._a === 0) {\u000a                    return this.toName();\u000a                }\u000a                return this.toRgbString();\u000a            }\u000a            if (format === "rgb") {\u000a                formattedString = this.toRgbString();\u000a            }\u000a            if (format === "prgb") {\u000a                formattedString = this.toPercentageRgbString();\u000a            }\u000a            if (format === "hex" || format === "hex6") {\u000a                formattedString = this.toHexString();\u000a            }\u000a            if (format === "hex3") {\u000a                formattedString = this.toHexString(true);\u000a            }\u000a            if (format === "hex8") {\u000a                formattedString = this.toHex8String();\u000a            }\u000a            if (format === "name") {\u000a                formattedString = this.toName();\u000a            }\u000a            if (format === "hsl") {\u000a                formattedString = this.toHslString();\u000a            }\u000a            if (format === "hsv") {\u000a                formattedString = this.toHsvString();\u000a            }\u000a\u000a            return formattedString || this.toHexString();\u000a        },\u000a\u000a        _applyModification: function(fn, args) {\u000a            var color = fn.apply(null, [this].concat([].slice.call(args)));\u000a            this._r = color._r;\u000a            this._g = color._g;\u000a            this._b = color._b;\u000a            this.setAlpha(color._a);\u000a            return this;\u000a        },\u000a        lighten: function() {\u000a            return this._applyModification(lighten, arguments);\u000a        },\u000a        brighten: function() {\u000a            return this._applyModification(brighten, arguments);\u000a        },\u000a        darken: function() {\u000a            return this._applyModification(darken, arguments);\u000a        },\u000a        desaturate: function() {\u000a            return this._applyModification(desaturate, arguments);\u000a        },\u000a        saturate: function() {\u000a            return this._applyModification(saturate, arguments);\u000a        },\u000a        greyscale: function() {\u000a            return this._applyModification(greyscale, arguments);\u000a        },\u000a        spin: function() {\u000a            return this._applyModification(spin, arguments);\u000a        },\u000a\u000a        _applyCombination: function(fn, args) {\u000a            return fn.apply(null, [this].concat([].slice.call(args)));\u000a        },\u000a        analogous: function() {\u000a            return this._applyCombination(analogous, arguments);\u000a        },\u000a        complement: function() {\u000a            return this._applyCombination(complement, arguments);\u000a        },\u000a        monochromatic: function() {\u000a            return this._applyCombination(monochromatic, arguments);\u000a        },\u000a        splitcomplement: function() {\u000a            return this._applyCombination(splitcomplement, arguments);\u000a        },\u000a        triad: function() {\u000a            return this._applyCombination(triad, arguments);\u000a        },\u000a        tetrad: function() {\u000a            return this._applyCombination(tetrad, arguments);\u000a        }\u000a    };\u000a\u000a    // If input is an object, force 1 into "1.0" to handle ratios properly\u000a    // String input requires "1.0" as input, so 1 will be treated as 1\u000a    tinycolor.fromRatio = function(color, opts) {\u000a        if (typeof color == "object") {\u000a            var newColor = {};\u000a            for (var i in color) {\u000a                if (color.hasOwnProperty(i)) {\u000a                    if (i === "a") {\u000a                        newColor[i] = color[i];\u000a                    }\u000a                    else {\u000a                        newColor[i] = convertToPercentage(color[i]);\u000a                    }\u000a                }\u000a            }\u000a            color = newColor;\u000a        }\u000a\u000a        return tinycolor(color, opts);\u000a    };\u000a\u000a    // Given a string or object, convert that input to RGB\u000a    // Possible string inputs:\u000a    //\u000a    //     "red"\u000a    //     "#f00" or "f00"\u000a    //     "#ff0000" or "ff0000"\u000a    //     "#ff000000" or "ff000000"\u000a    //     "rgb 255 0 0" or "rgb (255, 0, 0)"\u000a    //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"\u000a    //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"\u000a    //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"\u000a    //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"\u000a    //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"\u000a    //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"\u000a    //\u000a    function inputToRGB(color) {\u000a\u000a        var rgb = { r: 0, g: 0, b: 0 };\u000a        var a = 1;\u000a        var ok = false;\u000a        var format = false;\u000a\u000a        if (typeof color == "string") {\u000a            color = stringInputToObject(color);\u000a        }\u000a\u000a        if (typeof color == "object") {\u000a            if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {\u000a                rgb = rgbToRgb(color.r, color.g, color.b);\u000a                ok = true;\u000a                format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";\u000a            }\u000a            else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {\u000a                color.s = convertToPercentage(color.s);\u000a                color.v = convertToPercentage(color.v);\u000a                rgb = hsvToRgb(color.h, color.s, color.v);\u000a                ok = true;\u000a                format = "hsv";\u000a            }\u000a            else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {\u000a                color.s = convertToPercentage(color.s);\u000a                color.l = convertToPercentage(color.l);\u000a                rgb = hslToRgb(color.h, color.s, color.l);\u000a                ok = true;\u000a                format = "hsl";\u000a            }\u000a\u000a            if (color.hasOwnProperty("a")) {\u000a                a = color.a;\u000a            }\u000a        }\u000a\u000a        a = boundAlpha(a);\u000a\u000a        return {\u000a            ok: ok,\u000a            format: color.format || format,\u000a            r: mathMin(255, mathMax(rgb.r, 0)),\u000a            g: mathMin(255, mathMax(rgb.g, 0)),\u000a            b: mathMin(255, mathMax(rgb.b, 0)),\u000a            a: a\u000a        };\u000a    }\u000a\u000a\u000a    // Conversion Functions\u000a    // --------------------\u000a\u000a    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\u000a    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\u000a\u000a    // `rgbToRgb`\u000a    // Handle bounds / percentage checking to conform to CSS color spec\u000a    // <http://www.w3.org/TR/css3-color/>\u000a    // *Assumes:* r, g, b in [0, 255] or [0, 1]\u000a    // *Returns:* { r, g, b } in [0, 255]\u000a    function rgbToRgb(r, g, b){\u000a        return {\u000a            r: bound01(r, 255) * 255,\u000a            g: bound01(g, 255) * 255,\u000a            b: bound01(b, 255) * 255\u000a        };\u000a    }\u000a\u000a    // `rgbToHsl`\u000a    // Converts an RGB color value to HSL.\u000a    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\u000a    // *Returns:* { h, s, l } in [0,1]\u000a    function rgbToHsl(r, g, b) {\u000a\u000a        r = bound01(r, 255);\u000a        g = bound01(g, 255);\u000a        b = bound01(b, 255);\u000a\u000a        var max = mathMax(r, g, b), min = mathMin(r, g, b);\u000a        var h, s, l = (max + min) / 2;\u000a\u000a        if(max == min) {\u000a            h = s = 0; // achromatic\u000a        }\u000a        else {\u000a            var d = max - min;\u000a            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\u000a            switch(max) {\u000a                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\u000a                case g: h = (b - r) / d + 2; break;\u000a                case b: h = (r - g) / d + 4; break;\u000a            }\u000a\u000a            h /= 6;\u000a        }\u000a\u000a        return { h: h, s: s, l: l };\u000a    }\u000a\u000a    // `hslToRgb`\u000a    // Converts an HSL color value to RGB.\u000a    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\u000a    // *Returns:* { r, g, b } in the set [0, 255]\u000a    function hslToRgb(h, s, l) {\u000a        var r, g, b;\u000a\u000a        h = bound01(h, 360);\u000a        s = bound01(s, 100);\u000a        l = bound01(l, 100);\u000a\u000a        function hue2rgb(p, q, t) {\u000a            if(t < 0) t += 1;\u000a            if(t > 1) t -= 1;\u000a            if(t < 1/6) return p + (q - p) * 6 * t;\u000a            if(t < 1/2) return q;\u000a            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\u000a            return p;\u000a        }\u000a\u000a        if(s === 0) {\u000a            r = g = b = l; // achromatic\u000a        }\u000a        else {\u000a            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\u000a            var p = 2 * l - q;\u000a            r = hue2rgb(p, q, h + 1/3);\u000a            g = hue2rgb(p, q, h);\u000a            b = hue2rgb(p, q, h - 1/3);\u000a        }\u000a\u000a        return { r: r * 255, g: g * 255, b: b * 255 };\u000a    }\u000a\u000a    // `rgbToHsv`\u000a    // Converts an RGB color value to HSV\u000a    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\u000a    // *Returns:* { h, s, v } in [0,1]\u000a    function rgbToHsv(r, g, b) {\u000a\u000a        r = bound01(r, 255);\u000a        g = bound01(g, 255);\u000a        b = bound01(b, 255);\u000a\u000a        var max = mathMax(r, g, b), min = mathMin(r, g, b);\u000a        var h, s, v = max;\u000a\u000a        var d = max - min;\u000a        s = max === 0 ? 0 : d / max;\u000a\u000a        if(max == min) {\u000a            h = 0; // achromatic\u000a        }\u000a        else {\u000a            switch(max) {\u000a                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\u000a                case g: h = (b - r) / d + 2; break;\u000a                case b: h = (r - g) / d + 4; break;\u000a            }\u000a            h /= 6;\u000a        }\u000a        return { h: h, s: s, v: v };\u000a    }\u000a\u000a    // `hsvToRgb`\u000a    // Converts an HSV color value to RGB.\u000a    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\u000a    // *Returns:* { r, g, b } in the set [0, 255]\u000a     function hsvToRgb(h, s, v) {\u000a\u000a        h = bound01(h, 360) * 6;\u000a        s = bound01(s, 100);\u000a        v = bound01(v, 100);\u000a\u000a        var i = math.floor(h),\u000a            f = h - i,\u000a            p = v * (1 - s),\u000a            q = v * (1 - f * s),\u000a            t = v * (1 - (1 - f) * s),\u000a            mod = i % 6,\u000a            r = [v, q, p, p, t, v][mod],\u000a            g = [t, v, v, q, p, p][mod],\u000a            b = [p, p, t, v, v, q][mod];\u000a\u000a        return { r: r * 255, g: g * 255, b: b * 255 };\u000a    }\u000a\u000a    // `rgbToHex`\u000a    // Converts an RGB color to hex\u000a    // Assumes r, g, and b are contained in the set [0, 255]\u000a    // Returns a 3 or 6 character hex\u000a    function rgbToHex(r, g, b, allow3Char) {\u000a\u000a        var hex = [\u000a            pad2(mathRound(r).toString(16)),\u000a            pad2(mathRound(g).toString(16)),\u000a            pad2(mathRound(b).toString(16))\u000a        ];\u000a\u000a        // Return a 3 character hex if possible\u000a        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\u000a            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\u000a        }\u000a\u000a        return hex.join("");\u000a    }\u000a        // `rgbaToHex`\u000a        // Converts an RGBA color plus alpha transparency to hex\u000a        // Assumes r, g, b and a are contained in the set [0, 255]\u000a        // Returns an 8 character hex\u000a        function rgbaToHex(r, g, b, a) {\u000a\u000a            var hex = [\u000a                pad2(convertDecimalToHex(a)),\u000a                pad2(mathRound(r).toString(16)),\u000a                pad2(mathRound(g).toString(16)),\u000a                pad2(mathRound(b).toString(16))\u000a            ];\u000a\u000a            return hex.join("");\u000a        }\u000a\u000a    // `equals`\u000a    // Can be called with any tinycolor input\u000a    tinycolor.equals = function (color1, color2) {\u000a        if (!color1 || !color2) { return false; }\u000a        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\u000a    };\u000a    tinycolor.random = function() {\u000a        return tinycolor.fromRatio({\u000a            r: mathRandom(),\u000a            g: mathRandom(),\u000a            b: mathRandom()\u000a        });\u000a    };\u000a\u000a\u000a    // Modification Functions\u000a    // ----------------------\u000a    // Thanks to less.js for some of the basics here\u000a    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\u000a\u000a    function desaturate(color, amount) {\u000a        amount = (amount === 0) ? 0 : (amount || 10);\u000a        var hsl = tinycolor(color).toHsl();\u000a        hsl.s -= amount / 100;\u000a        hsl.s = clamp01(hsl.s);\u000a        return tinycolor(hsl);\u000a    }\u000a\u000a    function saturate(color, amount) {\u000a        amount = (amount === 0) ? 0 : (amount || 10);\u000a        var hsl = tinycolor(color).toHsl();\u000a        hsl.s += amount / 100;\u000a        hsl.s = clamp01(hsl.s);\u000a        return tinycolor(hsl);\u000a    }\u000a\u000a    function greyscale(color) {\u000a        return tinycolor(color).desaturate(100);\u000a    }\u000a\u000a    function lighten (color, amount) {\u000a        amount = (amount === 0) ? 0 : (amount || 10);\u000a        var hsl = tinycolor(color).toHsl();\u000a        hsl.l += amount / 100;\u000a        hsl.l = clamp01(hsl.l);\u000a        return tinycolor(hsl);\u000a    }\u000a\u000a    function brighten(color, amount) {\u000a        amount = (amount === 0) ? 0 : (amount || 10);\u000a        var rgb = tinycolor(color).toRgb();\u000a        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\u000a        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\u000a        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\u000a        return tinycolor(rgb);\u000a    }\u000a\u000a    function darken (color, amount) {\u000a        amount = (amount === 0) ? 0 : (amount || 10);\u000a        var hsl = tinycolor(color).toHsl();\u000a        hsl.l -= amount / 100;\u000a        hsl.l = clamp01(hsl.l);\u000a        return tinycolor(hsl);\u000a    }\u000a\u000a    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\u000a    // Values outside of this range will be wrapped into this range.\u000a    function spin(color, amount) {\u000a        var hsl = tinycolor(color).toHsl();\u000a        var hue = (mathRound(hsl.h) + amount) % 360;\u000a        hsl.h = hue < 0 ? 360 + hue : hue;\u000a        return tinycolor(hsl);\u000a    }\u000a\u000a    // Combination Functions\u000a    // ---------------------\u000a    // Thanks to jQuery xColor for some of the ideas behind these\u000a    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\u000a\u000a    function complement(color) {\u000a        var hsl = tinycolor(color).toHsl();\u000a        hsl.h = (hsl.h + 180) % 360;\u000a        return tinycolor(hsl);\u000a    }\u000a\u000a    function triad(color) {\u000a        var hsl = tinycolor(color).toHsl();\u000a        var h = hsl.h;\u000a        return [\u000a            tinycolor(color),\u000a            tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\u000a            tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\u000a        ];\u000a    }\u000a\u000a    function tetrad(color) {\u000a        var hsl = tinycolor(color).toHsl();\u000a        var h = hsl.h;\u000a        return [\u000a            tinycolor(color),\u000a            tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\u000a            tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\u000a            tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\u000a        ];\u000a    }\u000a\u000a    function splitcomplement(color) {\u000a        var hsl = tinycolor(color).toHsl();\u000a        var h = hsl.h;\u000a        return [\u000a            tinycolor(color),\u000a            tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\u000a            tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\u000a        ];\u000a    }\u000a\u000a    function analogous(color, results, slices) {\u000a        results = results || 6;\u000a        slices = slices || 30;\u000a\u000a        var hsl = tinycolor(color).toHsl();\u000a        var part = 360 / slices;\u000a        var ret = [tinycolor(color)];\u000a\u000a        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\u000a            hsl.h = (hsl.h + part) % 360;\u000a            ret.push(tinycolor(hsl));\u000a        }\u000a        return ret;\u000a    }\u000a\u000a    function monochromatic(color, results) {\u000a        results = results || 6;\u000a        var hsv = tinycolor(color).toHsv();\u000a        var h = hsv.h, s = hsv.s, v = hsv.v;\u000a        var ret = [];\u000a        var modification = 1 / results;\u000a\u000a        while (results--) {\u000a            ret.push(tinycolor({ h: h, s: s, v: v}));\u000a            v = (v + modification) % 1;\u000a        }\u000a\u000a        return ret;\u000a    }\u000a\u000a    // Utility Functions\u000a    // ---------------------\u000a\u000a    tinycolor.mix = function(color1, color2, amount) {\u000a        amount = (amount === 0) ? 0 : (amount || 50);\u000a\u000a        var rgb1 = tinycolor(color1).toRgb();\u000a        var rgb2 = tinycolor(color2).toRgb();\u000a\u000a        var p = amount / 100;\u000a        var w = p * 2 - 1;\u000a        var a = rgb2.a - rgb1.a;\u000a\u000a        var w1;\u000a\u000a        if (w * a == -1) {\u000a            w1 = w;\u000a        } else {\u000a            w1 = (w + a) / (1 + w * a);\u000a        }\u000a\u000a        w1 = (w1 + 1) / 2;\u000a\u000a        var w2 = 1 - w1;\u000a\u000a        var rgba = {\u000a            r: rgb2.r * w1 + rgb1.r * w2,\u000a            g: rgb2.g * w1 + rgb1.g * w2,\u000a            b: rgb2.b * w1 + rgb1.b * w2,\u000a            a: rgb2.a * p  + rgb1.a * (1 - p)\u000a        };\u000a\u000a        return tinycolor(rgba);\u000a    };\u000a\u000a\u000a    // Readability Functions\u000a    // ---------------------\u000a    // <http://www.w3.org/TR/AERT#color-contrast>\u000a\u000a    // `readability`\u000a    // Analyze the 2 colors and returns an object with the following properties:\u000a    //    `brightness`: difference in brightness between the two colors\u000a    //    `color`: difference in color/hue between the two colors\u000a    tinycolor.readability = function(color1, color2) {\u000a        var c1 = tinycolor(color1);\u000a        var c2 = tinycolor(color2);\u000a        var rgb1 = c1.toRgb();\u000a        var rgb2 = c2.toRgb();\u000a        var brightnessA = c1.getBrightness();\u000a        var brightnessB = c2.getBrightness();\u000a        var colorDiff = (\u000a            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\u000a            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\u000a            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\u000a        );\u000a\u000a        return {\u000a            brightness: Math.abs(brightnessA - brightnessB),\u000a            color: colorDiff\u000a        };\u000a    };\u000a\u000a    // `readable`\u000a    // http://www.w3.org/TR/AERT#color-contrast\u000a    // Ensure that foreground and background color combinations provide sufficient contrast.\u000a    // *Example*\u000a    //    tinycolor.isReadable("#000", "#111") => false\u000a    tinycolor.isReadable = function(color1, color2) {\u000a        var readability = tinycolor.readability(color1, color2);\u000a        return readability.brightness > 125 && readability.color > 500;\u000a    };\u000a\u000a    // `mostReadable`\u000a    // Given a base color and a list of possible foreground or background\u000a    // colors for that base, returns the most readable color.\u000a    // *Example*\u000a    //    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"\u000a    tinycolor.mostReadable = function(baseColor, colorList) {\u000a        var bestColor = null;\u000a        var bestScore = 0;\u000a        var bestIsReadable = false;\u000a        for (var i=0; i < colorList.length; i++) {\u000a\u000a            // We normalize both around the "acceptable" breaking point,\u000a            // but rank brightness constrast higher than hue.\u000a\u000a            var readability = tinycolor.readability(baseColor, colorList[i]);\u000a            var readable = readability.brightness > 125 && readability.color > 500;\u000a            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\u000a\u000a            if ((readable && ! bestIsReadable) ||\u000a                (readable && bestIsReadable && score > bestScore) ||\u000a                ((! readable) && (! bestIsReadable) && score > bestScore)) {\u000a                bestIsReadable = readable;\u000a                bestScore = score;\u000a                bestColor = tinycolor(colorList[i]);\u000a            }\u000a        }\u000a        return bestColor;\u000a    };\u000a\u000a\u000a    // Big List of Colors\u000a    // ------------------\u000a    // <http://www.w3.org/TR/css3-color/#svg-color>\u000a    var names = tinycolor.names = {\u000a        aliceblue: "f0f8ff",\u000a        antiquewhite: "faebd7",\u000a        aqua: "0ff",\u000a        aquamarine: "7fffd4",\u000a        azure: "f0ffff",\u000a        beige: "f5f5dc",\u000a        bisque: "ffe4c4",\u000a        black: "000",\u000a        blanchedalmond: "ffebcd",\u000a        blue: "00f",\u000a        blueviolet: "8a2be2",\u000a        brown: "a52a2a",\u000a        burlywood: "deb887",\u000a        burntsienna: "ea7e5d",\u000a        cadetblue: "5f9ea0",\u000a        chartreuse: "7fff00",\u000a        chocolate: "d2691e",\u000a        coral: "ff7f50",\u000a        cornflowerblue: "6495ed",\u000a        cornsilk: "fff8dc",\u000a        crimson: "dc143c",\u000a        cyan: "0ff",\u000a        darkblue: "00008b",\u000a        darkcyan: "008b8b",\u000a        darkgoldenrod: "b8860b",\u000a        darkgray: "a9a9a9",\u000a        darkgreen: "006400",\u000a        darkgrey: "a9a9a9",\u000a        darkkhaki: "bdb76b",\u000a        darkmagenta: "8b008b",\u000a        darkolivegreen: "556b2f",\u000a        darkorange: "ff8c00",\u000a        darkorchid: "9932cc",\u000a        darkred: "8b0000",\u000a        darksalmon: "e9967a",\u000a        darkseagreen: "8fbc8f",\u000a        darkslateblue: "483d8b",\u000a        darkslategray: "2f4f4f",\u000a        darkslategrey: "2f4f4f",\u000a        darkturquoise: "00ced1",\u000a        darkviolet: "9400d3",\u000a        deeppink: "ff1493",\u000a        deepskyblue: "00bfff",\u000a        dimgray: "696969",\u000a        dimgrey: "696969",\u000a        dodgerblue: "1e90ff",\u000a        firebrick: "b22222",\u000a        floralwhite: "fffaf0",\u000a        forestgreen: "228b22",\u000a        fuchsia: "f0f",\u000a        gainsboro: "dcdcdc",\u000a        ghostwhite: "f8f8ff",\u000a        gold: "ffd700",\u000a        goldenrod: "daa520",\u000a        gray: "808080",\u000a        green: "008000",\u000a        greenyellow: "adff2f",\u000a        grey: "808080",\u000a        honeydew: "f0fff0",\u000a        hotpink: "ff69b4",\u000a        indianred: "cd5c5c",\u000a        indigo: "4b0082",\u000a        ivory: "fffff0",\u000a        khaki: "f0e68c",\u000a        lavender: "e6e6fa",\u000a        lavenderblush: "fff0f5",\u000a        lawngreen: "7cfc00",\u000a        lemonchiffon: "fffacd",\u000a        lightblue: "add8e6",\u000a        lightcoral: "f08080",\u000a        lightcyan: "e0ffff",\u000a        lightgoldenrodyellow: "fafad2",\u000a        lightgray: "d3d3d3",\u000a        lightgreen: "90ee90",\u000a        lightgrey: "d3d3d3",\u000a        lightpink: "ffb6c1",\u000a        lightsalmon: "ffa07a",\u000a        lightseagreen: "20b2aa",\u000a        lightskyblue: "87cefa",\u000a        lightslategray: "789",\u000a        lightslategrey: "789",\u000a        lightsteelblue: "b0c4de",\u000a        lightyellow: "ffffe0",\u000a        lime: "0f0",\u000a        limegreen: "32cd32",\u000a        linen: "faf0e6",\u000a        magenta: "f0f",\u000a        maroon: "800000",\u000a        mediumaquamarine: "66cdaa",\u000a        mediumblue: "0000cd",\u000a        mediumorchid: "ba55d3",\u000a        mediumpurple: "9370db",\u000a        mediumseagreen: "3cb371",\u000a        mediumslateblue: "7b68ee",\u000a        mediumspringgreen: "00fa9a",\u000a        mediumturquoise: "48d1cc",\u000a        mediumvioletred: "c71585",\u000a        midnightblue: "191970",\u000a        mintcream: "f5fffa",\u000a        mistyrose: "ffe4e1",\u000a        moccasin: "ffe4b5",\u000a        navajowhite: "ffdead",\u000a        navy: "000080",\u000a        oldlace: "fdf5e6",\u000a        olive: "808000",\u000a        olivedrab: "6b8e23",\u000a        orange: "ffa500",\u000a        orangered: "ff4500",\u000a        orchid: "da70d6",\u000a        palegoldenrod: "eee8aa",\u000a        palegreen: "98fb98",\u000a        paleturquoise: "afeeee",\u000a        palevioletred: "db7093",\u000a        papayawhip: "ffefd5",\u000a        peachpuff: "ffdab9",\u000a        peru: "cd853f",\u000a        pink: "ffc0cb",\u000a        plum: "dda0dd",\u000a        powderblue: "b0e0e6",\u000a        purple: "800080",\u000a        rebeccapurple: "663399",\u000a        red: "f00",\u000a        rosybrown: "bc8f8f",\u000a        royalblue: "4169e1",\u000a        saddlebrown: "8b4513",\u000a        salmon: "fa8072",\u000a        sandybrown: "f4a460",\u000a        seagreen: "2e8b57",\u000a        seashell: "fff5ee",\u000a        sienna: "a0522d",\u000a        silver: "c0c0c0",\u000a        skyblue: "87ceeb",\u000a        slateblue: "6a5acd",\u000a        slategray: "708090",\u000a        slategrey: "708090",\u000a        snow: "fffafa",\u000a        springgreen: "00ff7f",\u000a        steelblue: "4682b4",\u000a        tan: "d2b48c",\u000a        teal: "008080",\u000a        thistle: "d8bfd8",\u000a        tomato: "ff6347",\u000a        turquoise: "40e0d0",\u000a        violet: "ee82ee",\u000a        wheat: "f5deb3",\u000a        white: "fff",\u000a        whitesmoke: "f5f5f5",\u000a        yellow: "ff0",\u000a        yellowgreen: "9acd32"\u000a    };\u000a\u000a    // Make it easy to access colors via `hexNames[hex]`\u000a    var hexNames = tinycolor.hexNames = flip(names);\u000a\u000a\u000a    // Utilities\u000a    // ---------\u000a\u000a    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\u000a    function flip(o) {\u000a        var flipped = { };\u000a        for (var i in o) {\u000a            if (o.hasOwnProperty(i)) {\u000a                flipped[o[i]] = i;\u000a            }\u000a        }\u000a        return flipped;\u000a    }\u000a\u000a    // Return a valid alpha value [0,1] with all invalid values being set to 1\u000a    function boundAlpha(a) {\u000a        a = parseFloat(a);\u000a\u000a        if (isNaN(a) || a < 0 || a > 1) {\u000a            a = 1;\u000a        }\u000a\u000a        return a;\u000a    }\u000a\u000a    // Take input from [0, n] and return it as [0, 1]\u000a    function bound01(n, max) {\u000a        if (isOnePointZero(n)) { n = "100%"; }\u000a\u000a        var processPercent = isPercentage(n);\u000a        n = mathMin(max, mathMax(0, parseFloat(n)));\u000a\u000a        // Automatically convert percentage into number\u000a        if (processPercent) {\u000a            n = parseInt(n * max, 10) / 100;\u000a        }\u000a\u000a        // Handle floating point rounding errors\u000a        if ((math.abs(n - max) < 0.000001)) {\u000a            return 1;\u000a        }\u000a\u000a        // Convert into [0, 1] range if it isn't already\u000a        return (n % max) / parseFloat(max);\u000a    }\u000a\u000a    // Force a number between 0 and 1\u000a    function clamp01(val) {\u000a        return mathMin(1, mathMax(0, val));\u000a    }\u000a\u000a    // Parse a base-16 hex value into a base-10 integer\u000a    function parseIntFromHex(val) {\u000a        return parseInt(val, 16);\u000a    }\u000a\u000a    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\u000a    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\u000a    function isOnePointZero(n) {\u000a        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;\u000a    }\u000a\u000a    // Check to see if string passed in is a percentage\u000a    function isPercentage(n) {\u000a        return typeof n === "string" && n.indexOf('%') != -1;\u000a    }\u000a\u000a    // Force a hex value to have 2 characters\u000a    function pad2(c) {\u000a        return c.length == 1 ? '0' + c : '' + c;\u000a    }\u000a\u000a    // Replace a decimal with it's percentage value\u000a    function convertToPercentage(n) {\u000a        if (n <= 1) {\u000a            n = (n * 100) + "%";\u000a        }\u000a\u000a        return n;\u000a    }\u000a\u000a    // Converts a decimal to a hex value\u000a    function convertDecimalToHex(d) {\u000a        return Math.round(parseFloat(d) * 255).toString(16);\u000a    }\u000a    // Converts a hex value to a decimal\u000a    function convertHexToDecimal(h) {\u000a        return (parseIntFromHex(h) / 255);\u000a    }\u000a\u000a    var matchers = (function() {\u000a\u000a        // <http://www.w3.org/TR/css3-values/#integers>\u000a        var CSS_INTEGER = "[-\u005c\u005c+]?\u005c\u005cd+%?";\u000a\u000a        // <http://www.w3.org/TR/css3-values/#number-value>\u000a        var CSS_NUMBER = "[-\u005c\u005c+]?\u005c\u005cd*\u005c\u005c.\u005c\u005cd+%?";\u000a\u000a        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\u000a        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";\u000a\u000a        // Actual matching.\u000a        // Parentheses and commas are optional, but not required.\u000a        // Whitespace can take the place of commas or opening paren\u000a        var PERMISSIVE_MATCH3 = "[\u005c\u005cs|\u005c\u005c(]+(" + CSS_UNIT + ")[,|\u005c\u005cs]+(" + CSS_UNIT + ")[,|\u005c\u005cs]+(" + CSS_UNIT + ")\u005c\u005cs*\u005c\u005c)?";\u000a        var PERMISSIVE_MATCH4 = "[\u005c\u005cs|\u005c\u005c(]+(" + CSS_UNIT + ")[,|\u005c\u005cs]+(" + CSS_UNIT + ")[,|\u005c\u005cs]+(" + CSS_UNIT + ")[,|\u005c\u005cs]+(" + CSS_UNIT + ")\u005c\u005cs*\u005c\u005c)?";\u000a\u000a        return {\u000a            rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),\u000a            rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),\u000a            hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),\u000a            hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),\u000a            hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),\u000a            hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),\u000a            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\u000a            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\u000a            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\u000a        };\u000a    })();\u000a\u000a    // `stringInputToObject`\u000a    // Permissive string parsing.  Take in a number of formats, and output an object\u000a    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\u000a    function stringInputToObject(color) {\u000a\u000a        color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\u000a        var named = false;\u000a        if (names[color]) {\u000a            color = names[color];\u000a            named = true;\u000a        }\u000a        else if (color == 'transparent') {\u000a            return { r: 0, g: 0, b: 0, a: 0, format: "name" };\u000a        }\u000a\u000a        // Try to match string input using regular expressions.\u000a        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\u000a        // Just return an object and let the conversion functions handle that.\u000a        // This way the result will be the same whether the tinycolor is initialized with string or object.\u000a        var match;\u000a        if ((match = matchers.rgb.exec(color))) {\u000a            return { r: match[1], g: match[2], b: match[3] };\u000a        }\u000a        if ((match = matchers.rgba.exec(color))) {\u000a            return { r: match[1], g: match[2], b: match[3], a: match[4] };\u000a        }\u000a        if ((match = matchers.hsl.exec(color))) {\u000a            return { h: match[1], s: match[2], l: match[3] };\u000a        }\u000a        if ((match = matchers.hsla.exec(color))) {\u000a            return { h: match[1], s: match[2], l: match[3], a: match[4] };\u000a        }\u000a        if ((match = matchers.hsv.exec(color))) {\u000a            return { h: match[1], s: match[2], v: match[3] };\u000a        }\u000a        if ((match = matchers.hsva.exec(color))) {\u000a            return { h: match[1], s: match[2], v: match[3], a: match[4] };\u000a        }\u000a        if ((match = matchers.hex8.exec(color))) {\u000a            return {\u000a                a: convertHexToDecimal(match[1]),\u000a                r: parseIntFromHex(match[2]),\u000a                g: parseIntFromHex(match[3]),\u000a                b: parseIntFromHex(match[4]),\u000a                format: named ? "name" : "hex8"\u000a            };\u000a        }\u000a        if ((match = matchers.hex6.exec(color))) {\u000a            return {\u000a                r: parseIntFromHex(match[1]),\u000a                g: parseIntFromHex(match[2]),\u000a                b: parseIntFromHex(match[3]),\u000a                format: named ? "name" : "hex"\u000a            };\u000a        }\u000a        if ((match = matchers.hex3.exec(color))) {\u000a            return {\u000a                r: parseIntFromHex(match[1] + '' + match[1]),\u000a                g: parseIntFromHex(match[2] + '' + match[2]),\u000a                b: parseIntFromHex(match[3] + '' + match[3]),\u000a                format: named ? "name" : "hex"\u000a            };\u000a        }\u000a\u000a        return false;\u000a    }\u000a\u000a    window.tinycolor = tinycolor;\u000a    })();\u000a\u000a    $(function () {\u000a        if ($.fn.spectrum.load) {\u000a            $.fn.spectrum.processNativeColorInputs();\u000a        }\u000a    });\u000a\u000a});\u000a\u000a;\u000a
p0
.