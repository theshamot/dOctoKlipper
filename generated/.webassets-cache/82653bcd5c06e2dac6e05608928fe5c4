V// source: js/lib/bootstrap-slider-knockout-binding.js\u000a/**\u000a * Based on bootstrap-slider-knockout-binding, written by Cosmin Stefan-Dobrin, https://github.com/cosminstefanxp,\u000a * licensed under MIT License\u000a *\u000a * Github: https://github.com/cosminstefanxp/bootstrap-slider-knockout-binding\u000a */\u000ako.bindingHandlers.slider = {\u000a	init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\u000a		var params = valueAccessor();\u000a\u000a		// Check whether the value observable is either placed directly or in the paramaters object.\u000a		if (!(ko.isObservable(params) || params['value']))\u000a			throw "You need to define an observable value for the sliderValue. Either pass the observable directly or as the 'value' field in the parameters.";\u000a\u000a		// Identify the value and initialize the slider\u000a		var valueObservable;\u000a		if (ko.isObservable(params)) {\u000a			valueObservable = params;\u000a			$(element).slider({value: ko.utils.unwrapObservable(params)});\u000a		} else {\u000a			valueObservable = params['value'];\u000a			// Replace the 'value' field in the options object with the actual value\u000a			params['value'] = ko.utils.unwrapObservable(valueObservable);\u000a			$(element).slider(params);\u000a		}\u000a\u000a		// Make sure we update the observable when changing the slider value\u000a		$(element).on('slide', function (ev) {\u000a			valueObservable(ev.value);\u000a		});\u000a\u000a	},\u000a	update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\u000a		var modelValue = valueAccessor();\u000a		var valueObservable;\u000a		if (ko.isObservable(modelValue)) {\u000a			valueObservable = modelValue;\u000a		} else {\u000a			valueObservable = modelValue['value'];\u000a		}\u000a\u000a		$(element).slider('setValue', parseFloat(ko.isObservable(valueObservable) ? valueObservable() : valueObservable));\u000a	}\u000a};\u000a;\u000a
p0
.