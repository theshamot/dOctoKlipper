V// source: js/app/bindings/slimscrolledforeach.js\u000ako.bindingHandlers.slimScrolledForeach = {\u000a    makeTemplateValueAccessor: function (valueAccessor) {\u000a        var modelValue = valueAccessor(),\u000a            unwrappedValue = ko.utils.peekObservable(modelValue), // Unwrap without setting a dependency here\u000a            result,\u000a            slimscroll;\u000a\u000a        // If unwrappedValue is the array, pass in the wrapped value on its own\u000a        // The value will be unwrapped and tracked within the template binding\u000a        // (See https://github.com/SteveSanderson/knockout/issues/523)\u000a        if (!unwrappedValue || typeof unwrappedValue.length === "number") {\u000a            result = {\u000a                foreach: modelValue,\u000a                templateEngine: ko.nativeTemplateEngine.instance\u000a            };\u000a            slimscroll = {};\u000a        } else {\u000a            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\u000a            ko.utils.unwrapObservable(modelValue);\u000a            result = {\u000a                foreach: unwrappedValue["data"],\u000a                as: unwrappedValue["as"],\u000a                includeDestroyed: unwrappedValue["includeDestroyed"],\u000a                afterAdd: unwrappedValue["afterAdd"],\u000a                beforeRemove: unwrappedValue["beforeRemove"],\u000a                afterRender: unwrappedValue["afterRender"],\u000a                beforeMove: unwrappedValue["beforeMove"],\u000a                afterMove: unwrappedValue["afterMove"],\u000a                templateEngine: ko.nativeTemplateEngine.instance\u000a            };\u000a            slimscroll = unwrappedValue["slimscroll"];\u000a        }\u000a\u000a        return {\u000a            accessor: function () {\u000a                return result;\u000a            },\u000a            slimscroll: slimscroll\u000a        };\u000a    },\u000a\u000a    slimscroll: function (element, options) {\u000a        options = options || {};\u000a        setTimeout(function () {\u000a            if (element.nodeName === "#comment") {\u000a                // foreach is bound to a virtual element\u000a                $(element.parentElement).slimScroll(options);\u000a            } else {\u000a                $(element).slimScroll(options);\u000a            }\u000a        }, 10);\u000a    },\u000a\u000a    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\u000a        var prepped = ko.bindingHandlers["slimScrolledForeach"].makeTemplateValueAccessor(\u000a            valueAccessor\u000a        );\u000a        ko.bindingHandlers["slimScrolledForeach"].slimscroll(element, prepped.slimscroll);\u000a        return ko.bindingHandlers["template"]["init"](element, prepped.accessor);\u000a    },\u000a    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\u000a        var prepped = ko.bindingHandlers["slimScrolledForeach"].makeTemplateValueAccessor(\u000a            valueAccessor\u000a        );\u000a        var options = $.extend(prepped.slimscroll, {scrollBy: 0});\u000a        ko.bindingHandlers["slimScrolledForeach"].slimscroll(element, options);\u000a        return ko.bindingHandlers["template"]["update"](\u000a            element,\u000a            prepped.accessor,\u000a            allBindings,\u000a            viewModel,\u000a            bindingContext\u000a        );\u000a    }\u000a};\u000ako.virtualElements.allowedBindings.slimScrolledForeach = true;\u000a\u000a;\u000a
p0
.