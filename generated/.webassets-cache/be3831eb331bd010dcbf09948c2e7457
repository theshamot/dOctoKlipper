V// source: plugin/pluginmanager/js/pluginmanager.js\u000a$(function () {\u000a    function PluginManagerViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a        self.printerState = parameters[2];\u000a        self.systemViewModel = parameters[3];\u000a        self.access = parameters[4];\u000a\u000a        // optional\u000a        self.piSupport = parameters[5];\u000a\u000a        self.config_repositoryUrl = ko.observable();\u000a        self.config_repositoryTtl = ko.observable();\u000a        self.config_noticesUrl = ko.observable();\u000a        self.config_noticesTtl = ko.observable();\u000a        self.config_pipAdditionalArgs = ko.observable();\u000a        self.config_pipForceUser = ko.observable();\u000a        self.config_confirmUninstall = ko.observable();\u000a        self.config_confirmDisable = ko.observable();\u000a\u000a        self.configurationDialog = $(\u000a            "#settings_plugin_pluginmanager_configurationdialog"\u000a        );\u000a\u000a        self.plugins = new ItemListHelper(\u000a            "plugin.pluginmanager.installedplugins",\u000a            {\u000a                name: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a                "bundled": function (item) {\u000a                    return item.bundled;\u000a                },\u000a                "3rdparty": function (item) {\u000a                    return !item.bundled;\u000a                },\u000a                "enabled": function (item) {\u000a                    return item.enabled;\u000a                },\u000a                "disabled": function (item) {\u000a                    return !item.enabled;\u000a                }\u000a            },\u000a            "name",\u000a            [],\u000a            [\u000a                ["bundled", "3rdparty"],\u000a                ["enabled", "disabled"]\u000a            ],\u000a            0\u000a        );\u000a\u000a        self.repositoryplugins = new ItemListHelper(\u000a            "plugin.pluginmanager.repositoryplugins",\u000a            {\u000a                title: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a.title.toLocaleLowerCase() < b.title.toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a.title.toLocaleLowerCase() > b.title.toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                },\u000a                published: function (a, b) {\u000a                    // sorts descending\u000a                    if (a.published.toLocaleLowerCase() > b.published.toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a.published.toLocaleLowerCase() < b.published.toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                },\u000a                popularity: function (a, b) {\u000a                    // sorts descending\u000a                    var countA =\u000a                        a.stats && a.stats.instances_month ? a.stats.instances_month : 0;\u000a                    var countB =\u000a                        b.stats && b.stats.instances_month ? b.stats.instances_month : 0;\u000a\u000a                    if (countA > countB) return -1;\u000a                    if (countA < countB) return 1;\u000a                    return 0;\u000a                },\u000a                release_date: function (a, b) {\u000a                    // sorts descending\u000a                    var valA =\u000a                        a.github && a.github.latest_release\u000a                            ? a.github.latest_release.date.toLocaleLowerCase()\u000a                            : "";\u000a                    var valB =\u000a                        b.github && b.github.latest_release\u000a                            ? b.github.latest_release.date.toLocaleLowerCase()\u000a                            : "";\u000a\u000a                    if (valA > valB) return -1;\u000a                    if (valA < valB) return 1;\u000a                    return 0;\u000a                },\u000a                push_date: function (a, b) {\u000a                    // sorts descending\u000a                    var valA = a.github ? a.github.last_push.toLocaleLowerCase() : "";\u000a                    var valB = b.github ? b.github.last_push.toLocaleLowerCase() : "";\u000a\u000a                    if (valA > valB) return -1;\u000a                    if (valA < valB) return 1;\u000a                    return 0;\u000a                },\u000a                stars: function (a, b) {\u000a                    // sorts descending\u000a                    var valA = a.github ? a.github.stars : 0;\u000a                    var valB = b.github ? b.github.stars : 0;\u000a\u000a                    if (valA > valB) return -1;\u000a                    if (valA < valB) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a                filter_installed: function (plugin) {\u000a                    return !self.installed(plugin);\u000a                },\u000a                filter_incompatible: function (plugin) {\u000a                    return (\u000a                        plugin.is_compatible.octoprint &&\u000a                        plugin.is_compatible.os &&\u000a                        plugin.is_compatible.python\u000a                    );\u000a                },\u000a                filter_abandoned: function (plugin) {\u000a                    return !plugin.abandoned;\u000a                }\u000a            },\u000a            "title",\u000a            ["filter_installed", "filter_incompatible"],\u000a            [],\u000a            0\u000a        );\u000a\u000a        self.orphans = new ItemListHelper(\u000a            "plugin.pluginmanager.orphans",\u000a            {\u000a                identifier: function (a, b) {\u000a                    // sorts ascending\u000a                    if (\u000a                        a["identifier"].toLocaleLowerCase() <\u000a                        b["identifier"].toLocaleLowerCase()\u000a                    )\u000a                        return -1;\u000a                    if (\u000a                        a["identifier"].toLocaleLowerCase() >\u000a                        b["identifier"].toLocaleLowerCase()\u000a                    )\u000a                        return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "identifier",\u000a            [],\u000a            [],\u000a            0\u000a        );\u000a\u000a        self.uploadElement = $("#settings_plugin_pluginmanager_repositorydialog_upload");\u000a        self.uploadButton = $(\u000a            "#settings_plugin_pluginmanager_repositorydialog_upload_start"\u000a        );\u000a\u000a        self.repositoryAvailable = ko.observable(false);\u000a\u000a        self.repositorySearchQuery = ko.observable();\u000a        self.repositorySearchQuery.subscribe(function () {\u000a            self.performRepositorySearch();\u000a        });\u000a\u000a        self.listingSearchQuery = ko.observable();\u000a        self.listingSearchQuery.subscribe(function () {\u000a            self.performListingSearch();\u000a        });\u000a\u000a        self.installUrl = ko.observable();\u000a        self.uploadFilename = ko.observable();\u000a\u000a        self.loglines = ko.observableArray([]);\u000a        self.installedPlugins = ko.observableArray([]);\u000a\u000a        self.followDependencyLinks = ko.observable(false);\u000a\u000a        self.pipAvailable = ko.observable(true);\u000a        self.pipVersion = ko.observable();\u000a        self.pipInstallDir = ko.observable();\u000a        self.pipUseUser = ko.observable();\u000a        self.pipVirtualEnv = ko.observable();\u000a        self.pipAdditionalArgs = ko.observable();\u000a        self.pipPython = ko.observable();\u000a\u000a        self.safeMode = ko.observable();\u000a        self.online = ko.observable();\u000a\u000a        self.requestError = ko.observable(false);\u000a\u000a        self.pipUseUserString = ko.pureComputed(function () {\u000a            return self.pipUseUser() ? "yes" : "no";\u000a        });\u000a        self.pipVirtualEnvString = ko.pureComputed(function () {\u000a            return self.pipVirtualEnv() ? "yes" : "no";\u000a        });\u000a\u000a        self.working = ko.observable(false);\u000a        self.workingTitle = ko.observable();\u000a        self.workingDialog = undefined;\u000a        self.workingOutput = undefined;\u000a\u000a        self.toggling = ko.observable(false);\u000a\u000a        self.restartCommandSpec = undefined;\u000a        self.systemViewModel.systemActions.subscribe(function () {\u000a            var lastResponse = self.systemViewModel.lastCommandResponse;\u000a            if (!lastResponse || !lastResponse.core) {\u000a                self.restartCommandSpec = undefined;\u000a                return;\u000a            }\u000a\u000a            var restartSpec = _.filter(lastResponse.core, function (spec) {\u000a                return spec.action == "restart";\u000a            });\u000a            self.restartCommandSpec =\u000a                restartSpec != undefined && restartSpec.length > 0\u000a                    ? restartSpec[0]\u000a                    : undefined;\u000a        });\u000a\u000a        self.noticeNotifications = [];\u000a        self.hiddenNoticeNotifications = {};\u000a        self.noticeCount = ko.observable(0);\u000a\u000a        self.notification = undefined;\u000a        self.logContents = {\u000a            steps: [],\u000a            action: {\u000a                reload: false,\u000a                refresh: false,\u000a                reconnect: false\u000a            }\u000a        };\u000a\u000a        self.noticeCountText = ko.pureComputed(function () {\u000a            var count = self.noticeCount();\u000a            if (count === 0) {\u000a                return gettext("There are no plugin notices. Great!");\u000a            } else if (count === 1) {\u000a                return gettext(\u000a                    "There is a plugin notice for one of your installed plugins."\u000a                );\u000a            } else {\u000a                return _.sprintf(\u000a                    gettext(\u000a                        "There are %(count)d plugin notices for one or more of your installed plugins."\u000a                    ),\u000a                    {count: count}\u000a                );\u000a            }\u000a        });\u000a\u000a        self.enableManagement = ko.pureComputed(function () {\u000a            return !self.printerState.isBusy();\u000a        });\u000a\u000a        self.enableToggle = function (data) {\u000a            var command = self._getToggleCommand(data);\u000a            var not_safemode_victim = !data.safe_mode_victim;\u000a            var not_blacklisted = !data.blacklisted;\u000a            var not_incompatible = !data.incompatible;\u000a            return (\u000a                self.enableManagement() &&\u000a                !self.toggling() &&\u000a                (command === "disable" ||\u000a                    (not_safemode_victim && not_blacklisted && not_incompatible)) &&\u000a                data.key !== "pluginmanager"\u000a            );\u000a        };\u000a\u000a        self.enableUninstall = function (data) {\u000a            return (\u000a                self.enableManagement() &&\u000a                (data.origin !== "entry_point" || self.pipAvailable()) &&\u000a                data.managable &&\u000a                !data.bundled &&\u000a                data.key !== "pluginmanager" &&\u000a                !data.pending_uninstall\u000a            );\u000a        };\u000a\u000a        self.enableCleanup = function (data) {\u000a            return (\u000a                self.enableManagement() &&\u000a                data.key !== "pluginmanager" &&\u000a                !data.pending_uninstall\u000a            );\u000a        };\u000a\u000a        self.enableRepoInstall = function (data) {\u000a            return (\u000a                self.enableManagement() &&\u000a                self.pipAvailable() &&\u000a                !self.safeMode() &&\u000a                !self.throttled() &&\u000a                self.online() &&\u000a                self.isCompatible(data)\u000a            );\u000a        };\u000a\u000a        self.throttled = ko.pureComputed(function () {\u000a            return (\u000a                self.piSupport &&\u000a                self.piSupport.currentIssue() &&\u000a                !self.settingsViewModel.settings.plugins.pluginmanager.ignore_throttled()\u000a            );\u000a        });\u000a\u000a        self.invalidUrl = ko.pureComputed(function () {\u000a            // supported pip install URL schemes, according to https://pip.pypa.io/en/stable/reference/pip_install/\u000a            var allowedUrlSchemes = [\u000a                "http",\u000a                "https",\u000a                "git",\u000a                "git+http",\u000a                "git+https",\u000a                "git+ssh",\u000a                "git+git",\u000a                "hg+http",\u000a                "hg+https",\u000a                "hg+static-http",\u000a                "hg+ssh",\u000a                "svn",\u000a                "svn+svn",\u000a                "svn+http",\u000a                "svn+https",\u000a                "svn+ssh",\u000a                "bzr+http",\u000a                "bzr+https",\u000a                "bzr+ssh",\u000a                "bzr+sftp",\u000a                "brz+ftp",\u000a                "bzr+lp"\u000a            ];\u000a\u000a            var url = self.installUrl();\u000a            var lowerUrl = url !== undefined ? url.toLocaleLowerCase() : undefined;\u000a\u000a            var lowerUrlStartsWithScheme = function (scheme) {\u000a                return _.startsWith(lowerUrl, scheme + "://");\u000a            };\u000a\u000a            return (\u000a                url !== undefined &&\u000a                url.trim() !== "" &&\u000a                !_.any(allowedUrlSchemes, lowerUrlStartsWithScheme)\u000a            );\u000a        });\u000a\u000a        self.enableUrlInstall = ko.pureComputed(function () {\u000a            var url = self.installUrl();\u000a            return (\u000a                self.enableManagement() &&\u000a                self.pipAvailable() &&\u000a                !self.safeMode() &&\u000a                !self.throttled() &&\u000a                self.online() &&\u000a                url !== undefined &&\u000a                url.trim() !== "" &&\u000a                !self.invalidUrl()\u000a            );\u000a        });\u000a\u000a        self.invalidFile = ko.pureComputed(function () {\u000a            var allowedFileExtensions = [".zip", ".tar.gz", ".tgz", ".tar", ".py"];\u000a\u000a            var name = self.uploadFilename();\u000a            var lowerName = name !== undefined ? name.toLocaleLowerCase() : undefined;\u000a\u000a            var lowerNameHasExtension = function (extension) {\u000a                return _.endsWith(lowerName, extension);\u000a            };\u000a\u000a            return (\u000a                name !== undefined && !_.any(allowedFileExtensions, lowerNameHasExtension)\u000a            );\u000a        });\u000a\u000a        self.enableFileInstall = ko.pureComputed(function () {\u000a            var name = self.uploadFilename();\u000a            return (\u000a                self.enableManagement() &&\u000a                self.pipAvailable() &&\u000a                !self.safeMode() &&\u000a                !self.throttled() &&\u000a                name !== undefined &&\u000a                name.trim() !== "" &&\u000a                !self.invalidFile()\u000a            );\u000a        });\u000a\u000a        self.uploadElement.fileupload({\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            add: function (e, data) {\u000a                if (data.files.length === 0) {\u000a                    return false;\u000a                }\u000a\u000a                self.uploadFilename(data.files[0].name);\u000a\u000a                self.uploadButton.unbind("click");\u000a                self.uploadButton.bind("click", function () {\u000a                    self._markWorking(\u000a                        gettext("Installing plugin..."),\u000a                        gettext("Installing plugin from uploaded archive...")\u000a                    );\u000a                    data.formData = {\u000a                        dependency_links: self.followDependencyLinks()\u000a                    };\u000a                    data.submit();\u000a                    return false;\u000a                });\u000a            },\u000a            done: function (e, data) {\u000a                var response = data.result;\u000a                if (response.result) {\u000a                    self._markDone();\u000a                } else {\u000a                    self._markDone(response.reason);\u000a                }\u000a\u000a                self.uploadButton.unbind("click");\u000a                self.uploadFilename(undefined);\u000a            },\u000a            fail: function (e, data) {\u000a                new PNotify({\u000a                    title: gettext("Something went wrong"),\u000a                    text: gettext("Please consult octoprint.log for details"),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a                self._markDone("Could not install plugin, unknown error.");\u000a                self.uploadButton.unbind("click");\u000a                self.uploadFilename(undefined);\u000a            }\u000a        });\u000a\u000a        self.performListingSearch = function () {\u000a            var query = self.listingSearchQuery();\u000a            if (query !== undefined && query.trim() !== "") {\u000a                query = query.toLocaleLowerCase();\u000a                self.plugins.changeSearchFunction(function (entry) {\u000a                    return (\u000a                        entry &&\u000a                        (entry["name"].toLocaleLowerCase().indexOf(query) > -1 ||\u000a                            (entry.description &&\u000a                                entry.description.toLocaleLowerCase().indexOf(query) >\u000a                                    -1))\u000a                    );\u000a                });\u000a            } else {\u000a                self.plugins.resetSearch();\u000a            }\u000a        };\u000a\u000a        self.performRepositorySearch = function () {\u000a            var query = self.repositorySearchQuery();\u000a            if (query !== undefined && query.trim() !== "") {\u000a                query = query.toLocaleLowerCase();\u000a                self.repositoryplugins.changeSearchFunction(function (entry) {\u000a                    return (\u000a                        entry &&\u000a                        (entry["title"].toLocaleLowerCase().indexOf(query) > -1 ||\u000a                            entry["description"].toLocaleLowerCase().indexOf(query) > -1)\u000a                    );\u000a                });\u000a            } else {\u000a                self.repositoryplugins.resetSearch();\u000a            }\u000a            return false;\u000a        };\u000a\u000a        self.fromResponse = function (data, options) {\u000a            self._fromPluginsResponse(data.plugins, options);\u000a            self._fromOrphanResponse(data.orphan_data, options);\u000a            self._fromRepositoryResponse(data.repository, options);\u000a            self._fromPipResponse(data.pip, options);\u000a\u000a            self.safeMode(data.safe_mode || false);\u000a            self.online(data.online !== undefined ? data.online : true);\u000a        };\u000a\u000a        self._fromPluginsResponse = function (data, options) {\u000a            var evalNotices = options.eval_notices || false;\u000a            var ignoreNoticeHidden = options.ignore_notice_hidden || false;\u000a            var ignoreNoticeIgnored = options.ignore_notice_ignored || false;\u000a\u000a            if (evalNotices) self._removeAllNoticeNotifications();\u000a\u000a            var installedPlugins = [];\u000a            var noticeCount = 0;\u000a            _.each(data, function (plugin) {\u000a                installedPlugins.push(plugin.key);\u000a\u000a                if (evalNotices && plugin.notifications && plugin.notifications.length) {\u000a                    _.each(plugin.notifications, function (notification) {\u000a                        noticeCount++;\u000a                        if (\u000a                            !ignoreNoticeIgnored &&\u000a                            self._isNoticeNotificationIgnored(\u000a                                plugin.key,\u000a                                notification.date\u000a                            )\u000a                        )\u000a                            return;\u000a                        if (\u000a                            !ignoreNoticeHidden &&\u000a                            self._isNoticeNotificationHidden(\u000a                                plugin.key,\u000a                                notification.date\u000a                            )\u000a                        )\u000a                            return;\u000a                        self._showPluginNotification(plugin, notification);\u000a                    });\u000a                }\u000a            });\u000a            if (evalNotices) self.noticeCount(noticeCount);\u000a            self.installedPlugins(installedPlugins);\u000a            self.plugins.updateItems(data);\u000a        };\u000a\u000a        self._fromOrphanResponse = function (data) {\u000a            var orphans = [];\u000a            _.each(data, function (value, key) {\u000a                orphans.push({\u000a                    identifier: key,\u000a                    settings: value.settings,\u000a                    data: value.data\u000a                });\u000a            });\u000a            self.orphans.updateItems(orphans);\u000a        };\u000a\u000a        self._fromRepositoryResponse = function (data) {\u000a            self.repositoryAvailable(data.available);\u000a            if (data.available) {\u000a                self.repositoryplugins.updateItems(data.plugins);\u000a            } else {\u000a                self.repositoryplugins.updateItems([]);\u000a            }\u000a        };\u000a\u000a        self._fromPipResponse = function (data) {\u000a            self.pipAvailable(data.available);\u000a            if (data.available) {\u000a                self.pipVersion(data.version);\u000a                self.pipInstallDir(data.install_dir);\u000a                self.pipUseUser(data.use_user);\u000a                self.pipVirtualEnv(data.virtual_env);\u000a                self.pipAdditionalArgs(data.additional_args);\u000a                self.pipPython(data.python);\u000a            } else {\u000a                self.pipVersion(undefined);\u000a                self.pipInstallDir(undefined);\u000a                self.pipUseUser(undefined);\u000a                self.pipVirtualEnv(undefined);\u000a                self.pipAdditionalArgs(undefined);\u000a            }\u000a        };\u000a\u000a        self.dataDeferred = undefined;\u000a        self.requestData = function (options) {\u000a            if (!_.isPlainObject(options)) {\u000a                options = {\u000a                    refresh_repo: options,\u000a                    refresh_orphans: false,\u000a                    refresh_notices: false,\u000a                    eval_notices: false\u000a                };\u000a            }\u000a\u000a            options.refresh_repo = options.refresh_repo || false;\u000a            options.refresh_orphans = options.refresh_orphans || false;\u000a            options.refresh_notices = options.refresh_notices || false;\u000a            options.eval_notices = options.eval_notices || false;\u000a\u000a            if (\u000a                self.dataDeferred &&\u000a                self.dataDeferred.state() === "pending" &&\u000a                !options.refresh_repo &&\u000a                !options.refresh_orphans &&\u000a                !options.refresh_notices &&\u000a                !options.eval_notices\u000a            ) {\u000a                return self.dataDeferred.promise();\u000a            }\u000a\u000a            var deferred = new $.Deferred();\u000a            if (\u000a                !options.refresh_repo &&\u000a                !options.refresh_orphans &&\u000a                !options.refresh_notices &&\u000a                !options.eval_notices\u000a            ) {\u000a                self.dataDeferred = deferred;\u000a            }\u000a\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_MANAGE\u000a                )\u000a            ) {\u000a                deferred.fail();\u000a                return deferred.promise();\u000a            }\u000a\u000a            OctoPrint.plugins.pluginmanager\u000a                .get({\u000a                    repo: options.refresh_repo,\u000a                    notices: options.refresh_notices,\u000a                    orphans: options.refresh_orphans\u000a                })\u000a                .fail(function () {\u000a                    self.requestError(true);\u000a                    deferred.reject();\u000a                })\u000a                .done(function (data) {\u000a                    self.requestError(false);\u000a                    self.fromResponse(data, options);\u000a                    deferred.resolveWith(data);\u000a                });\u000a\u000a            return deferred.promise();\u000a        };\u000a\u000a        self.togglePlugin = function (data) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            if (data.key === "pluginmanager") return;\u000a\u000a            var onSuccess = function () {\u000a                    self.requestData().always(function () {\u000a                        self.toggling(false);\u000a                    });\u000a                },\u000a                onError = function () {\u000a                    self.toggling(false);\u000a                    new PNotify({\u000a                        title: gettext("Something went wrong"),\u000a                        text: gettext("Please consult octoprint.log for details"),\u000a                        type: "error",\u000a                        hide: false\u000a                    });\u000a                };\u000a\u000a            var performDisabling = function () {\u000a                if (self.toggling()) return;\u000a                self.toggling(true);\u000a\u000a                OctoPrint.plugins.pluginmanager\u000a                    .disable(data.key)\u000a                    .done(onSuccess)\u000a                    .fail(onError);\u000a            };\u000a            var performEnabling = function () {\u000a                if (data.safe_mode_victim) return;\u000a\u000a                if (self.toggling()) return;\u000a                self.toggling(true);\u000a\u000a                OctoPrint.plugins.pluginmanager\u000a                    .enable(data.key)\u000a                    .done(onSuccess)\u000a                    .fail(onError);\u000a            };\u000a\u000a            if (self._getToggleCommand(data) === "enable") {\u000a                performEnabling();\u000a            } else {\u000a                // always warn if plugin is marked "disabling discouraged"\u000a                if (data.disabling_discouraged) {\u000a                    var message =\u000a                        _.sprintf(gettext('You are about to disable "%(name)s".'), {\u000a                            name: _.escape(data.name)\u000a                        }) +\u000a                        "</p><p>" +\u000a                        data.disabling_discouraged;\u000a                    showConfirmationDialog({\u000a                        title: gettext("This is not recommended"),\u000a                        message: message,\u000a                        question: gettext("Do you still want to disable it?"),\u000a                        cancel: gettext("Keep enabled"),\u000a                        proceed: gettext("Disable anyway"),\u000a                        onproceed: performDisabling\u000a                    });\u000a                }\u000a                // warn if global "warn disabling" setting is set"\u000a                else if (\u000a                    self.settingsViewModel.settings.plugins.pluginmanager.confirm_disable()\u000a                ) {\u000a                    showConfirmationDialog({\u000a                        message: _.sprintf(\u000a                            gettext('You are about to disable "%(name)s"'),\u000a                            {name: _.escape(data.name)}\u000a                        ),\u000a                        cancel: gettext("Keep enabled"),\u000a                        proceed: gettext("Disable plugin"),\u000a                        onproceed: performDisabling,\u000a                        nofade: true\u000a                    });\u000a                } else {\u000a                    // otherwise just go ahead and disable...\u000a                    performDisabling();\u000a                }\u000a            }\u000a        };\u000a\u000a        self.showRepository = function () {\u000a            self.repositoryDialog.modal({\u000a                minHeight: function () {\u000a                    return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\u000a                },\u000a                show: true\u000a            });\u000a        };\u000a\u000a        self.pluginDetails = function (data) {\u000a            window.open(data.page);\u000a        };\u000a\u000a        self.installFromRepository = function (data) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_INSTALL\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            self.installPlugin(\u000a                data.archive,\u000a                data.title,\u000a                self.installed(data) ? data.id : undefined,\u000a                data.follow_dependency_links || self.followDependencyLinks()\u000a            );\u000a        };\u000a\u000a        self.installPlugin = function (url, name, reinstall, followDependencyLinks) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_INSTALL\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            if (self.throttled()) {\u000a                return;\u000a            }\u000a\u000a            if (url === undefined) {\u000a                url = self.installUrl();\u000a            }\u000a            if (!url) return;\u000a\u000a            if (followDependencyLinks === undefined) {\u000a                followDependencyLinks = self.followDependencyLinks();\u000a            }\u000a\u000a            var workTitle, workText;\u000a            if (!reinstall) {\u000a                workTitle = gettext("Installing plugin...");\u000a                if (name) {\u000a                    workText = _.sprintf(\u000a                        gettext('Installing plugin "%(name)s" from %(url)s...'),\u000a                        {url: _.escape(url), name: _.escape(name)}\u000a                    );\u000a                } else {\u000a                    workText = _.sprintf(gettext("Installing plugin from %(url)s..."), {\u000a                        url: _.escape(url)\u000a                    });\u000a                }\u000a            } else {\u000a                workTitle = gettext("Reinstalling plugin...");\u000a                workText = _.sprintf(\u000a                    gettext('Reinstalling plugin "%(name)s" from %(url)s...'),\u000a                    {url: _.escape(url), name: _.escape(name)}\u000a                );\u000a            }\u000a            self._markWorking(workTitle, workText);\u000a\u000a            var onSuccess = function (response) {\u000a                    self.installUrl("");\u000a                },\u000a                onError = function () {\u000a                    self._markDone(\u000a                        "Could not install plugin, unknown error, please consult octoprint.log for details"\u000a                    );\u000a                    new PNotify({\u000a                        title: gettext("Something went wrong"),\u000a                        text: gettext("Please consult octoprint.log for details"),\u000a                        type: "error",\u000a                        hide: false\u000a                    });\u000a                };\u000a\u000a            if (reinstall) {\u000a                OctoPrint.plugins.pluginmanager\u000a                    .reinstall(reinstall, url, followDependencyLinks)\u000a                    .done(onSuccess)\u000a                    .fail(onError);\u000a            } else {\u000a                OctoPrint.plugins.pluginmanager\u000a                    .install(url, followDependencyLinks)\u000a                    .done(onSuccess)\u000a                    .fail(onError);\u000a            }\u000a        };\u000a\u000a        self.uninstallPlugin = function (data) {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableUninstall(data)) {\u000a                return;\u000a            }\u000a\u000a            if (data.bundled) return;\u000a            if (data.key === "pluginmanager") return;\u000a\u000a            // defining actual uninstall logic as functor in order to handle\u000a            // the confirm/no-confirm logic without duplication of logic\u000a            var performUninstall = function (cleanup) {\u000a                self._markWorking(\u000a                    gettext("Uninstalling plugin..."),\u000a                    _.sprintf(gettext('Uninstalling plugin "%(name)s"'), {\u000a                        name: _.escape(data.name)\u000a                    })\u000a                );\u000a\u000a                OctoPrint.plugins.pluginmanager\u000a                    .uninstall(data.key, cleanup)\u000a                    .done(function () {\u000a                        self.requestData();\u000a                    })\u000a                    .fail(function () {\u000a                        new PNotify({\u000a                            title: gettext("Something went wrong"),\u000a                            text: gettext("Please consult octoprint.log for details"),\u000a                            type: "error",\u000a                            hide: false\u000a                        });\u000a                    })\u000a                    .always(function () {\u000a                        self._markDone();\u000a                    });\u000a            };\u000a\u000a            showConfirmationDialog({\u000a                message: _.sprintf(\u000a                    gettext('You are about to uninstall the plugin "%(name)s"'),\u000a                    {name: _.escape(data.name)}\u000a                ),\u000a                cancel: gettext("Keep installed"),\u000a                proceed: [gettext("Uninstall"), gettext("Uninstall & clean up data")],\u000a                onproceed: function (button) {\u000a                    // buttons: 0=uninstall, 1=uninstall&cleanup\u000a                    performUninstall(button === 1);\u000a                },\u000a                nofade: true\u000a            });\u000a        };\u000a\u000a        self.cleanupPlugin = function (data) {\u000a            var key, name;\u000a            if (_.isObject(data)) {\u000a                key = data.key;\u000a                name = data.name;\u000a            } else {\u000a                key = name = data;\u000a            }\u000a\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            if (key === "pluginmanager") return;\u000a\u000a            var performCleanup = function () {\u000a                self._markWorking(\u000a                    gettext("Cleaning up plugin data..."),\u000a                    _.sprintf(gettext('Cleaning up data of plugin "%(name)s"'), {\u000a                        name: _.escape(name)\u000a                    })\u000a                );\u000a\u000a                OctoPrint.plugins.pluginmanager\u000a                    .cleanup(key)\u000a                    .done(function () {\u000a                        self.requestData();\u000a                    })\u000a                    .fail(function () {\u000a                        new PNotify({\u000a                            title: gettext("Something went wrong"),\u000a                            text: gettext("Please consult octoprint.log for details"),\u000a                            type: "error",\u000a                            hide: false\u000a                        });\u000a                    })\u000a                    .always(function () {\u000a                        self._markDone();\u000a                    });\u000a            };\u000a\u000a            showConfirmationDialog({\u000a                message: _.sprintf(\u000a                    gettext(\u000a                        'You are about to cleanup the plugin data of "%(name)s". This operation cannot be reversed.'\u000a                    ),\u000a                    {name: _.escape(name)}\u000a                ),\u000a                cancel: gettext("Keep data"),\u000a                proceed: gettext("Cleanup data"),\u000a                onproceed: performCleanup,\u000a                nofade: true\u000a            });\u000a        };\u000a\u000a        self.cleanupAll = function () {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            var performCleanup = function () {\u000a                var title = gettext("Cleaning up all left over plugin data...");\u000a                self._markWorking(title, title);\u000a\u000a                OctoPrint.plugins.pluginmanager\u000a                    .cleanupAll()\u000a                    .fail(function () {\u000a                        new PNotify({\u000a                            title: gettext("Something went wrong"),\u000a                            text: gettext("Please consult octoprint.log for details"),\u000a                            type: "error",\u000a                            hide: false\u000a                        });\u000a                    })\u000a                    .always(function () {\u000a                        self._markDone();\u000a                    });\u000a            };\u000a\u000a            showConfirmationDialog({\u000a                message: gettext(\u000a                    "You are about to cleanup left over plugin settings and data of plugins no longer installed. This operation cannot be reversed."\u000a                ),\u000a                cancel: gettext("Keep data"),\u000a                proceed: gettext("Cleanup all data"),\u000a                onproceed: performCleanup,\u000a                nofade: true\u000a            });\u000a        };\u000a\u000a        self.refreshRepository = function () {\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_INSTALL\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a            self.requestData({refresh_repo: true});\u000a        };\u000a\u000a        self.refreshNotices = function () {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            self.requestData({\u000a                refresh_notices: true,\u000a                eval_notices: true,\u000a                ignore_notice_hidden: true,\u000a                ignore_notice_ignored: true\u000a            });\u000a        };\u000a\u000a        self.reshowNotices = function () {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            self.requestData({\u000a                eval_notices: true,\u000a                ignore_notice_hidden: true,\u000a                ignore_notice_ignored: true\u000a            });\u000a        };\u000a\u000a        self.showPluginSettings = function () {\u000a            self._copyConfig();\u000a            self.configurationDialog.modal();\u000a        };\u000a\u000a        self.savePluginSettings = function () {\u000a            var repository = self.config_repositoryUrl();\u000a            if (repository !== null && repository.trim() === "") {\u000a                repository = null;\u000a            }\u000a\u000a            var repositoryTtl;\u000a            try {\u000a                repositoryTtl = parseInt(self.config_repositoryTtl());\u000a            } catch (ex) {\u000a                repositoryTtl = null;\u000a            }\u000a\u000a            var notices = self.config_noticesUrl();\u000a            if (notices !== null && notices.trim() === "") {\u000a                notices = null;\u000a            }\u000a\u000a            var noticesTtl;\u000a            try {\u000a                noticesTtl = parseInt(self.config_noticesTtl());\u000a            } catch (ex) {\u000a                noticesTtl = null;\u000a            }\u000a\u000a            var pipArgs = self.config_pipAdditionalArgs();\u000a            if (pipArgs !== null && pipArgs.trim() === "") {\u000a                pipArgs = null;\u000a            }\u000a\u000a            var data = {\u000a                plugins: {\u000a                    pluginmanager: {\u000a                        repository: repository,\u000a                        repository_ttl: repositoryTtl,\u000a                        notices: notices,\u000a                        notices_ttl: noticesTtl,\u000a                        pip_args: pipArgs,\u000a                        pip_force_user: self.config_pipForceUser(),\u000a                        confirm_disable: self.config_confirmDisable()\u000a                    }\u000a                }\u000a            };\u000a            self.settingsViewModel.saveData(data, function () {\u000a                self.configurationDialog.modal("hide");\u000a                self._copyConfig();\u000a                self.requestData({\u000a                    refresh_repo: true,\u000a                    refresh_notices: true,\u000a                    eval_notices: true\u000a                });\u000a            });\u000a        };\u000a\u000a        self._copyConfig = function () {\u000a            self.config_repositoryUrl(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.repository()\u000a            );\u000a            self.config_repositoryTtl(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.repository_ttl()\u000a            );\u000a            self.config_noticesUrl(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.notices()\u000a            );\u000a            self.config_noticesTtl(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.notices_ttl()\u000a            );\u000a            self.config_pipAdditionalArgs(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.pip_args()\u000a            );\u000a            self.config_pipForceUser(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.pip_force_user()\u000a            );\u000a            self.config_confirmDisable(\u000a                self.settingsViewModel.settings.plugins.pluginmanager.confirm_disable()\u000a            );\u000a        };\u000a\u000a        self.installed = function (data) {\u000a            return _.includes(self.installedPlugins(), data.id);\u000a        };\u000a\u000a        self.isCompatible = function (data) {\u000a            return (\u000a                data.is_compatible.octoprint &&\u000a                data.is_compatible.os &&\u000a                data.is_compatible.python\u000a            );\u000a        };\u000a\u000a        self.installButtonText = function (data) {\u000a            return self.isCompatible(data)\u000a                ? self.installed(data)\u000a                    ? gettext("Reinstall")\u000a                    : gettext("Install")\u000a                : data.disabled\u000a                ? gettext("Disabled")\u000a                : gettext("Incompatible");\u000a        };\u000a\u000a        self._processPluginManagementResult = function (response, action, plugin) {\u000a            if (response.result) {\u000a                self._markDone();\u000a            } else {\u000a                self._markDone(response.reason);\u000a            }\u000a\u000a            self._displayPluginManagementNotification(response, action, plugin);\u000a        };\u000a\u000a        self._displayPluginManagementNotification = function (response, action, plugin) {\u000a            self.logContents.action.restart =\u000a                self.logContents.action.restart || response.needs_restart;\u000a            self.logContents.action.refresh =\u000a                self.logContents.action.refresh || response.needs_refresh;\u000a            self.logContents.action_reconnect =\u000a                self.logContents.action.reconnect || response.needs_reconnect;\u000a            self.logContents.steps.push({\u000a                action: action,\u000a                plugin: plugin,\u000a                result: response.result\u000a            });\u000a\u000a            var title = gettext("Plugin management log");\u000a            var text = "<p><ul>";\u000a\u000a            var steps = self.logContents.steps;\u000a            if (steps.length > 5) {\u000a                var count = steps.length - 5;\u000a                var line;\u000a                if (count > 1) {\u000a                    line = gettext("%(count)d earlier actions...");\u000a                } else {\u000a                    line = gettext("%(count)d earlier action");\u000a                }\u000a                text += "<li><em>" + _.sprintf(line, {count: count}) + "</em></li>";\u000a                steps = steps.slice(steps.length - 5);\u000a            }\u000a\u000a            _.each(steps, function (step) {\u000a                var line = undefined;\u000a\u000a                switch (step.action) {\u000a                    case "install": {\u000a                        line = gettext("Install <em>%(plugin)s</em>: %(result)s");\u000a                        break;\u000a                    }\u000a                    case "uninstall": {\u000a                        line = gettext("Uninstall <em>%(plugin)s</em>: %(result)s");\u000a                        break;\u000a                    }\u000a                    case "enable": {\u000a                        line = gettext("Enable <em>%(plugin)s</em>: %(result)s");\u000a                        break;\u000a                    }\u000a                    case "disable": {\u000a                        line = gettext("Disable <em>%(plugin)s</em>: %(result)s");\u000a                        break;\u000a                    }\u000a                    case "cleanup": {\u000a                        line = gettext("Cleanup <em>%(plugin)s</em>: %(result)s");\u000a                        break;\u000a                    }\u000a                    case "cleanup_all": {\u000a                        line = gettext("Cleanup all: %(result)s");\u000a                        break;\u000a                    }\u000a                    default: {\u000a                        return;\u000a                    }\u000a                }\u000a\u000a                text +=\u000a                    "<li>" +\u000a                    _.sprintf(line, {\u000a                        plugin: _.escape(step.plugin),\u000a                        result: step.result\u000a                            ? '<i class="fa fa-check"></i>'\u000a                            : '<i class="fa fa-remove"></i>'\u000a                    }) +\u000a                    "</li>";\u000a            });\u000a            text += "</ul></p>";\u000a\u000a            var confirm = undefined;\u000a            var type = "success";\u000a            if (self.logContents.action.restart) {\u000a                text +=\u000a                    "<p>" +\u000a                    gettext("A restart is needed for the changes to take effect.") +\u000a                    "</p>";\u000a                type = "warning";\u000a\u000a                if (self.restartCommandSpec) {\u000a                    var restartClicked = false;\u000a                    confirm = {\u000a                        confirm: true,\u000a                        buttons: [\u000a                            {\u000a                                text: gettext("Restart now"),\u000a                                click: function (notice) {\u000a                                    if (restartClicked) return;\u000a                                    restartClicked = true;\u000a                                    showConfirmationDialog({\u000a                                        message: gettext(\u000a                                            "<strong>This will restart your OctoPrint server.</strong></p><p>This action may disrupt any ongoing print jobs (depending on your printer's controller and general setup that might also apply to prints run directly from your printer's internal storage)."\u000a                                        ),\u000a                                        onproceed: function () {\u000a                                            OctoPrint.system\u000a                                                .executeCommand("core", "restart")\u000a                                                .done(function () {\u000a                                                    notice.remove();\u000a                                                    new PNotify({\u000a                                                        title: gettext(\u000a                                                            "Restart in progress"\u000a                                                        ),\u000a                                                        text: gettext(\u000a                                                            "The server is now being restarted in the background"\u000a                                                        )\u000a                                                    });\u000a                                                })\u000a                                                .fail(function () {\u000a                                                    new PNotify({\u000a                                                        title: gettext(\u000a                                                            "Something went wrong"\u000a                                                        ),\u000a                                                        text: gettext(\u000a                                                            "Trying to restart the server produced an error, please check octoprint.log for details. You'll have to restart manually."\u000a                                                        )\u000a                                                    });\u000a                                                });\u000a                                        },\u000a                                        onclose: function () {\u000a                                            restartClicked = false;\u000a                                        }\u000a                                    });\u000a                                }\u000a                            }\u000a                        ]\u000a                    };\u000a                }\u000a            } else if (self.logContents.action.refresh) {\u000a                text +=\u000a                    "<p>" +\u000a                    gettext("A refresh is needed for the changes to take effect.") +\u000a                    "</p>";\u000a                type = "warning";\u000a\u000a                var refreshClicked = false;\u000a                confirm = {\u000a                    confirm: true,\u000a                    buttons: [\u000a                        {\u000a                            text: gettext("Reload now"),\u000a                            click: function () {\u000a                                if (refreshClicked) return;\u000a                                refreshClicked = true;\u000a                                location.reload(true);\u000a                            }\u000a                        }\u000a                    ]\u000a                };\u000a            } else if (self.logContents.action_reconnect) {\u000a                text +=\u000a                    "<p>" +\u000a                    gettext(\u000a                        "A reconnect to the printer is needed for the changes to take effect."\u000a                    ) +\u000a                    "</p>";\u000a                type = "warning";\u000a            }\u000a\u000a            var options = {\u000a                title: title,\u000a                text: text,\u000a                type: type,\u000a                hide: false\u000a            };\u000a\u000a            if (confirm !== undefined) {\u000a                options.confirm = confirm;\u000a\u000a                if (self.logNotification === undefined) {\u000a                    self.logNotification = PNotify.singleButtonNotify(options);\u000a                } else {\u000a                    self.logNotification.update(options);\u000a                    self.logNotification = PNotify.fixSingleButton(\u000a                        self.logNotification,\u000a                        options\u000a                    );\u000a                }\u000a            } else {\u000a                if (self.logNotification === undefined) {\u000a                    self.logNotification = new PNotify(options);\u000a                } else {\u000a                    self.logNotification.update(options);\u000a                }\u000a            }\u000a\u000a            // make sure the notification is visible\u000a            if (\u000a                self.logNotification.state !== "open" &&\u000a                self.logNotification.state !== "opening"\u000a            ) {\u000a                self.logNotification.open();\u000a            }\u000a        };\u000a\u000a        self._markWorking = function (title, line) {\u000a            self.working(true);\u000a            self.workingTitle(title);\u000a\u000a            self.loglines.removeAll();\u000a            self.loglines.push({line: line, stream: "message"});\u000a            self._scrollWorkingOutputToEnd();\u000a\u000a            self.workingDialog.modal({keyboard: false, backdrop: "static", show: true});\u000a        };\u000a\u000a        self._markDone = function (error) {\u000a            self.working(false);\u000a            if (error) {\u000a                self.loglines.push({line: gettext("Error!"), stream: "error"});\u000a                self.loglines.push({line: error, stream: "error"});\u000a            } else {\u000a                self.loglines.push({line: gettext("Done!"), stream: "message"});\u000a            }\u000a            self._scrollWorkingOutputToEnd();\u000a        };\u000a\u000a        self._scrollWorkingOutputToEnd = function () {\u000a            self.workingOutput.scrollTop(\u000a                self.workingOutput[0].scrollHeight - self.workingOutput.height()\u000a            );\u000a        };\u000a\u000a        self._getToggleCommand = function (data) {\u000a            var disable =\u000a                (data.enabled ||\u000a                    (data.safe_mode_victim && !data.forced_disabled) ||\u000a                    data.pending_enable) &&\u000a                !data.pending_disable;\u000a            return disable ? "disable" : "enable";\u000a        };\u000a\u000a        self.toggleButtonCss = function (data) {\u000a            var icon, disabled;\u000a\u000a            if (self.toggling()) {\u000a                icon = "fa fa-spin fa-spinner";\u000a                disabled = " disabled";\u000a            } else {\u000a                icon =\u000a                    self._getToggleCommand(data) === "enable"\u000a                        ? "fa fa-toggle-off"\u000a                        : "fa fa-toggle-on";\u000a                disabled = self.enableToggle(data) ? "" : " disabled";\u000a            }\u000a\u000a            return icon + disabled;\u000a        };\u000a\u000a        self.toggleButtonTitle = function (data) {\u000a            var command = self._getToggleCommand(data);\u000a            if (command === "enable") {\u000a                if (data.blacklisted) {\u000a                    return gettext("Blacklisted");\u000a                } else if (data.safe_mode_victim) {\u000a                    return gettext("Disabled due to active safe mode");\u000a                } else {\u000a                    return gettext("Enable Plugin");\u000a                }\u000a            } else {\u000a                return gettext("Disable Plugin");\u000a            }\u000a        };\u000a\u000a        self.showPluginNotifications = function (plugin) {\u000a            if (!plugin.notifications || plugin.notifications.length === 0) return;\u000a\u000a            self._removeAllNoticeNotificationsForPlugin(plugin.key);\u000a            _.each(plugin.notifications, function (notification) {\u000a                self._showPluginNotification(plugin, notification);\u000a            });\u000a        };\u000a\u000a        self.showPluginNotificationsLinkText = function (plugins) {\u000a            if (!plugins.notifications || plugins.notifications.length === 0) return;\u000a\u000a            var count = plugins.notifications.length;\u000a            var importantCount = _.filter(plugins.notifications, function (notification) {\u000a                return notification.important;\u000a            }).length;\u000a            if (count > 1) {\u000a                if (importantCount) {\u000a                    return _.sprintf(\u000a                        gettext(\u000a                            "There are %(count)d notices (%(important)d marked as important) available regarding this plugin - click to show!"\u000a                        ),\u000a                        {count: count, important: importantCount}\u000a                    );\u000a                } else {\u000a                    return _.sprintf(\u000a                        gettext(\u000a                            "There are %(count)d notices available regarding this plugin - click to show!"\u000a                        ),\u000a                        {count: count}\u000a                    );\u000a                }\u000a            } else {\u000a                if (importantCount) {\u000a                    return gettext(\u000a                        "There is an important notice available regarding this plugin - click to show!"\u000a                    );\u000a                } else {\u000a                    return gettext(\u000a                        "There is a notice available regarding this plugin - click to show!"\u000a                    );\u000a                }\u000a            }\u000a        };\u000a\u000a        self._showPluginNotification = function (plugin, notification) {\u000a            var name = plugin.name;\u000a            var version = plugin.version;\u000a\u000a            var important = notification.important;\u000a            var link = notification.link;\u000a\u000a            var title;\u000a            if (important) {\u000a                title = _.sprintf(\u000a                    gettext('Important notice regarding plugin "%(name)s"'),\u000a                    {name: _.escape(name)}\u000a                );\u000a            } else {\u000a                title = _.sprintf(gettext('Notice regarding plugin "%(name)s"'), {\u000a                    name: _.escape(name)\u000a                });\u000a            }\u000a\u000a            var text = "";\u000a\u000a            if (notification.versions && notification.versions.length > 0) {\u000a                var versions = _.map(notification.versions, function (v) {\u000a                    return v === version\u000a                        ? "<strong>" + _.escape(v) + "</strong>"\u000a                        : _.escape(v);\u000a                }).join(", ");\u000a                text +=\u000a                    "<small>" +\u000a                    _.sprintf(gettext("Affected versions: %(versions)s"), {\u000a                        versions: versions\u000a                    }) +\u000a                    "</small>";\u000a            } else {\u000a                text += "<small>" + gettext("Affected versions: all") + "</small>";\u000a            }\u000a\u000a            text += "<p>" + notification.text + "</p>";\u000a            if (link) {\u000a                text +=\u000a                    "<p><a href='" +\u000a                    link +\u000a                    "' target='_blank'>" +\u000a                    gettext("Read more...") +\u000a                    "</a></p>";\u000a            }\u000a\u000a            var beforeClose = function (notification) {\u000a                if (!self.noticeNotifications[plugin.key]) return;\u000a                self.noticeNotifications[plugin.key] = _.without(\u000a                    self.noticeNotifications[plugin.key],\u000a                    notification\u000a                );\u000a            };\u000a\u000a            var options = {\u000a                title: title,\u000a                text: text,\u000a                type: important ? "error" : "notice",\u000a                before_close: beforeClose,\u000a                hide: false,\u000a                confirm: {\u000a                    confirm: true,\u000a                    buttons: [\u000a                        {\u000a                            text: gettext("Later"),\u000a                            click: function (notice) {\u000a                                self._hideNoticeNotification(\u000a                                    plugin.key,\u000a                                    notification.date\u000a                                );\u000a                                notice.remove();\u000a                                notice.get().trigger("pnotify.cancel", notice);\u000a                            }\u000a                        },\u000a                        {\u000a                            text: gettext("Mark read"),\u000a                            click: function (notice) {\u000a                                self._ignoreNoticeNotification(\u000a                                    plugin.key,\u000a                                    notification.date\u000a                                );\u000a                                notice.remove();\u000a                                notice.get().trigger("pnotify.cancel", notice);\u000a                            }\u000a                        }\u000a                    ]\u000a                },\u000a                buttons: {\u000a                    sticker: false,\u000a                    closer: false\u000a                }\u000a            };\u000a\u000a            if (!self.noticeNotifications[plugin.key]) {\u000a                self.noticeNotifications[plugin.key] = [];\u000a            }\u000a            self.noticeNotifications[plugin.key].push(new PNotify(options));\u000a        };\u000a\u000a        self._removeAllNoticeNotifications = function () {\u000a            _.each(_.keys(self.noticeNotifications), function (key) {\u000a                self._removeAllNoticeNotificationsForPlugin(key);\u000a            });\u000a        };\u000a\u000a        self._removeAllNoticeNotificationsForPlugin = function (key) {\u000a            if (!self.noticeNotifications[key] || !self.noticeNotifications[key].length)\u000a                return;\u000a            _.each(self.noticeNotifications[key], function (notification) {\u000a                notification.remove();\u000a            });\u000a        };\u000a\u000a        self._hideNoticeNotification = function (key, date) {\u000a            if (!self.hiddenNoticeNotifications[key]) {\u000a                self.hiddenNoticeNotifications[key] = [];\u000a            }\u000a            if (!_.contains(self.hiddenNoticeNotifications[key], date)) {\u000a                self.hiddenNoticeNotifications[key].push(date);\u000a            }\u000a        };\u000a\u000a        self._isNoticeNotificationHidden = function (key, date) {\u000a            if (!self.hiddenNoticeNotifications[key]) return false;\u000a            return _.any(\u000a                _.map(self.hiddenNoticeNotifications[key], function (d) {\u000a                    return date == d;\u000a                })\u000a            );\u000a        };\u000a\u000a        var noticeLocalStorageKey = "plugin.pluginmanager.seen_notices";\u000a        self._ignoreNoticeNotification = function (key, date) {\u000a            if (!Modernizr.localstorage) return false;\u000a            if (!self.loginState.isAdmin()) return false;\u000a\u000a            var currentString = localStorage[noticeLocalStorageKey];\u000a            var current;\u000a            if (currentString === undefined) {\u000a                current = {};\u000a            } else {\u000a                current = JSON.parse(currentString);\u000a            }\u000a            if (!current[self.loginState.username()]) {\u000a                current[self.loginState.username()] = {};\u000a            }\u000a            if (!current[self.loginState.username()][key]) {\u000a                current[self.loginState.username()][key] = [];\u000a            }\u000a\u000a            if (!_.contains(current[self.loginState.username()][key], date)) {\u000a                current[self.loginState.username()][key].push(date);\u000a                localStorage[noticeLocalStorageKey] = JSON.stringify(current);\u000a            }\u000a        };\u000a\u000a        self._isNoticeNotificationIgnored = function (key, date) {\u000a            if (!Modernizr.localstorage) return false;\u000a\u000a            if (localStorage[noticeLocalStorageKey] === undefined) return false;\u000a\u000a            var knownData = JSON.parse(localStorage[noticeLocalStorageKey]);\u000a\u000a            if (!self.loginState.isAdmin()) return true;\u000a\u000a            var userData = knownData[self.loginState.username()];\u000a            if (userData === undefined) return false;\u000a\u000a            return userData[key] && _.contains(userData[key], date);\u000a        };\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.settings = self.settingsViewModel.settings;\u000a        };\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            if (\u000a                self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_MANAGE\u000a                )\u000a            ) {\u000a                self.requestData({eval_notices: true});\u000a            } else {\u000a                self._resetNotifications();\u000a            }\u000a        };\u000a\u000a        self.onEventConnectivityChanged = function (payload) {\u000a            self.requestData({eval_notices: true});\u000a        };\u000a\u000a        self._resetNotifications = function () {\u000a            self._closeAllNotifications();\u000a            self.logContents.action.restart = self.logContents.action.reload = self.logContents.action.reconnect = false;\u000a            self.logContents.steps = [];\u000a        };\u000a\u000a        self._closeAllNotifications = function () {\u000a            if (self.logNotification) {\u000a                self.logNotification.remove();\u000a            }\u000a        };\u000a\u000a        self.onServerDisconnect = function () {\u000a            self._resetNotifications();\u000a            return true;\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            self.workingDialog = $("#settings_plugin_pluginmanager_workingdialog");\u000a            self.workingOutput = $("#settings_plugin_pluginmanager_workingdialog_output");\u000a            self.repositoryDialog = $("#settings_plugin_pluginmanager_repositorydialog");\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a            if (plugin !== "pluginmanager") {\u000a                return;\u000a            }\u000a\u000a            if (\u000a                !self.loginState.hasPermission(\u000a                    self.access.permissions.PLUGIN_PLUGINMANAGER_MANAGE\u000a                )\u000a            ) {\u000a                return;\u000a            }\u000a\u000a            if (!data.hasOwnProperty("type")) {\u000a                return;\u000a            }\u000a\u000a            var messageType = data.type;\u000a\u000a            if (messageType === "loglines" && self.working()) {\u000a                _.each(data.loglines, function (line) {\u000a                    self.loglines.push(self._preprocessLine(line));\u000a                });\u000a                self._scrollWorkingOutputToEnd();\u000a            } else if (messageType === "result") {\u000a                var action = data.action;\u000a                var name = "Unknown";\u000a                if (data.hasOwnProperty("plugin")) {\u000a                    if (data.plugin !== "unknown") {\u000a                        if (_.isPlainObject(data.plugin)) {\u000a                            name = data.plugin.name;\u000a                        } else {\u000a                            name = data.plugin;\u000a                        }\u000a                    }\u000a                }\u000a\u000a                self._processPluginManagementResult(data, action, name);\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self._forcedStdoutLine = /You are using pip version .*?, however version .*? is available\u005c.|You should consider upgrading via the '.*?' command\u005c./;\u000a        self._preprocessLine = function (line) {\u000a            if (line.stream === "stderr" && line.line.match(self._forcedStdoutLine)) {\u000a                line.stream = "stdout";\u000a            }\u000a            return line;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: PluginManagerViewModel,\u000a        dependencies: [\u000a            "loginStateViewModel",\u000a            "settingsViewModel",\u000a            "printerStateViewModel",\u000a            "systemViewModel",\u000a            "accessViewModel",\u000a            "piSupportViewModel"\u000a        ],\u000a        optional: ["piSupportViewModel"],\u000a        elements: ["#settings_plugin_pluginmanager"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.