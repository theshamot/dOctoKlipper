V// source: js/lib/jquery/jquery.bootstrap.wizard.js\u000a/*!\u000a * jQuery twitter bootstrap wizard plugin\u000a * Examples and documentation at: http://github.com/VinceG/twitter-bootstrap-wizard\u000a * version 1.4.2\u000a * Requires jQuery v1.3.2 or later\u000a * Supports Bootstrap 2.2.x, 2.3.x, 3.0\u000a * Dual licensed under the MIT and GPL licenses:\u000a * http://www.opensource.org/licenses/mit-license.php\u000a * http://www.gnu.org/licenses/gpl.html\u000a * Authors: Vadim Vincent Gabriel (http://vadimg.com), Jason Gill (www.gilluminate.com)\u000a */\u000a/*\u000a * Changed for OctoPrint:\u000a *\u000a *   * Call of onTabShown has $element (tab object) added back as last parameter\u000a *   * $settings.withVisible defaults to false\u000a */\u000a;(function($) {\u000avar bootstrapWizardCreate = function(element, options) {\u000a	var element = $(element);\u000a	var obj = this;\u000a\u000a	// selector skips any 'li' elements that do not contain a child with a tab data-toggle\u000a	var baseItemSelector = 'li:has([data-toggle="tab"])';\u000a	var historyStack = [];\u000a\u000a	// Merge options with defaults\u000a	var $settings = $.extend({}, $.fn.bootstrapWizard.defaults, options);\u000a	var $activeTab = null;\u000a	var $navigation = null;\u000a\u000a	this.rebindClick = function(selector, fn)\u000a	{\u000a		selector.unbind('click', fn).bind('click', fn);\u000a	}\u000a\u000a	this.fixNavigationButtons = function() {\u000a		// Get the current active tab\u000a		if(!$activeTab.length) {\u000a			// Select first one\u000a			$navigation.find('a:first').tab('show');\u000a			$activeTab = $navigation.find(baseItemSelector + ':first');\u000a		}\u000a\u000a		// See if we're currently in the first/last then disable the previous and last buttons\u000a		$($settings.previousSelector, element).toggleClass('disabled', (obj.firstIndex() >= obj.currentIndex()));\u000a		$($settings.nextSelector, element).toggleClass('disabled', (obj.currentIndex() >= obj.navigationLength()));\u000a		$($settings.nextSelector, element).toggleClass('hidden', (obj.currentIndex() >= obj.navigationLength() && $($settings.finishSelector, element).length > 0));\u000a		$($settings.lastSelector, element).toggleClass('hidden', (obj.currentIndex() >= obj.navigationLength() && $($settings.finishSelector, element).length > 0));\u000a		$($settings.finishSelector, element).toggleClass('hidden', (obj.currentIndex() < obj.navigationLength()));\u000a		$($settings.backSelector, element).toggleClass('disabled', (historyStack.length == 0));\u000a		$($settings.backSelector, element).toggleClass('hidden', (obj.currentIndex() >= obj.navigationLength() && $($settings.finishSelector, element).length > 0));\u000a\u000a		// We are unbinding and rebinding to ensure single firing and no double-click errors\u000a		obj.rebindClick($($settings.nextSelector, element), obj.next);\u000a		obj.rebindClick($($settings.previousSelector, element), obj.previous);\u000a		obj.rebindClick($($settings.lastSelector, element), obj.last);\u000a		obj.rebindClick($($settings.firstSelector, element), obj.first);\u000a		obj.rebindClick($($settings.finishSelector, element), obj.finish);\u000a		obj.rebindClick($($settings.backSelector, element), obj.back);\u000a\u000a		if($settings.onTabShow && typeof $settings.onTabShow === 'function' && $settings.onTabShow($activeTab, $navigation, obj.currentIndex())===false){\u000a			return false;\u000a		}\u000a	};\u000a\u000a	this.next = function(e) {\u000a		// If we clicked the last then dont activate this\u000a		if(element.hasClass('last')) {\u000a			return false;\u000a		}\u000a\u000a		if($settings.onNext && typeof $settings.onNext === 'function' && $settings.onNext($activeTab, $navigation, obj.nextIndex())===false){\u000a			return false;\u000a		}\u000a\u000a		var formerIndex = obj.currentIndex();\u000a		var $index = obj.nextIndex();\u000a\u000a	  // Did we click the last button\u000a		if($index > obj.navigationLength()) {\u000a		} else {\u000a		  historyStack.push(formerIndex);\u000a		  $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ':eq(' + $index + ') a').tab('show');\u000a		}\u000a	};\u000a\u000a	this.previous = function(e) {\u000a		// If we clicked the first then dont activate this\u000a		if(element.hasClass('first')) {\u000a			return false;\u000a		}\u000a\u000a		if($settings.onPrevious && typeof $settings.onPrevious === 'function' && $settings.onPrevious($activeTab, $navigation, obj.previousIndex())===false){\u000a			return false;\u000a		}\u000a\u000a		var formerIndex = obj.currentIndex();\u000a		var $index = obj.previousIndex();\u000a\u000a		if($index < 0) {\u000a		} else {\u000a		  historyStack.push(formerIndex);\u000a		  $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ':eq(' + $index + ') a').tab('show');\u000a		}\u000a	};\u000a\u000a	this.first = function (e) {\u000a		if($settings.onFirst && typeof $settings.onFirst === 'function' && $settings.onFirst($activeTab, $navigation, obj.firstIndex())===false){\u000a			return false;\u000a		}\u000a\u000a		// If the element is disabled then we won't do anything\u000a		if(element.hasClass('disabled')) {\u000a			return false;\u000a		}\u000a\u000a\u000a		historyStack.push(obj.currentIndex());\u000a		$navigation.find(baseItemSelector + ':eq(0) a').tab('show');\u000a	};\u000a\u000a	this.last = function(e) {\u000a		if($settings.onLast && typeof $settings.onLast === 'function' && $settings.onLast($activeTab, $navigation, obj.lastIndex())===false){\u000a			return false;\u000a		}\u000a\u000a		// If the element is disabled then we won't do anything\u000a		if(element.hasClass('disabled')) {\u000a			return false;\u000a		}\u000a\u000a		historyStack.push(obj.currentIndex());\u000a		$navigation.find(baseItemSelector + ':eq(' + obj.navigationLength() + ') a').tab('show');\u000a	};\u000a\u000a	this.finish = function (e) {\u000a	  if ($settings.onFinish && typeof $settings.onFinish === 'function') {\u000a	    $settings.onFinish($activeTab, $navigation, obj.lastIndex());\u000a	  }\u000a	};\u000a\u000a	this.back = function () {\u000a	  if (historyStack.length == 0) {\u000a	    return null;\u000a	  }\u000a\u000a	  var formerIndex = historyStack.pop();\u000a	  if ($settings.onBack && typeof $settings.onBack === 'function' && $settings.onBack($activeTab, $navigation, formerIndex) === false) {\u000a	    historyStack.push(formerIndex);\u000a	    return false;\u000a	  }\u000a\u000a	  element.find(baseItemSelector + ':eq(' + formerIndex + ') a').tab('show');\u000a	};\u000a\u000a	this.currentIndex = function() {\u000a		return $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '')).index($activeTab);\u000a	};\u000a\u000a	this.firstIndex = function() {\u000a		return 0;\u000a	};\u000a\u000a	this.lastIndex = function() {\u000a		return obj.navigationLength();\u000a	};\u000a\u000a	this.getIndex = function(e) {\u000a		return $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '')).index(e);\u000a	};\u000a\u000a	this.nextIndex = function() {\u000a		var nextIndexCandidate=this.currentIndex();\u000a		var nextTabCandidate=null;\u000a		do {\u000a			nextIndexCandidate++;\u000a			nextTabCandidate = $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ":eq(" + nextIndexCandidate + ")");\u000a		} while ((nextTabCandidate)&&(nextTabCandidate.hasClass("disabled")));\u000a		return nextIndexCandidate;\u000a	};\u000a	this.previousIndex = function() {\u000a		var prevIndexCandidate=this.currentIndex();\u000a		var prevTabCandidate=null;\u000a		do {\u000a			prevIndexCandidate--;\u000a			prevTabCandidate = $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ":eq(" + prevIndexCandidate + ")");\u000a		} while ((prevTabCandidate)&&(prevTabCandidate.hasClass("disabled")));\u000a		return prevIndexCandidate;\u000a	};\u000a	this.navigationLength = function() {\u000a		return $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '')).length - 1;\u000a	};\u000a	this.activeTab = function() {\u000a		return $activeTab;\u000a	};\u000a	this.nextTab = function() {\u000a		return $navigation.find(baseItemSelector + ':eq('+(obj.currentIndex()+1)+')').length ? $navigation.find(baseItemSelector + ':eq('+(obj.currentIndex()+1)+')') : null;\u000a	};\u000a	this.previousTab = function() {\u000a		if(obj.currentIndex() <= 0) {\u000a			return null;\u000a		}\u000a		return $navigation.find(baseItemSelector + ':eq('+parseInt(obj.currentIndex()-1)+')');\u000a	};\u000a	this.show = function(index) {\u000a	  var tabToShow = isNaN(index) ?\u000a      element.find(baseItemSelector + ' a[href="#' + index + '"]') :\u000a      element.find(baseItemSelector + ':eq(' + index + ') a');\u000a	  if (tabToShow.length > 0) {\u000a	    historyStack.push(obj.currentIndex());\u000a	    tabToShow.tab('show');\u000a	  }\u000a	};\u000a	this.disable = function (index) {\u000a		$navigation.find(baseItemSelector + ':eq('+index+')').addClass('disabled');\u000a	};\u000a	this.enable = function(index) {\u000a		$navigation.find(baseItemSelector + ':eq('+index+')').removeClass('disabled');\u000a	};\u000a	this.hide = function(index) {\u000a		$navigation.find(baseItemSelector + ':eq('+index+')').hide();\u000a	};\u000a	this.display = function(index) {\u000a		$navigation.find(baseItemSelector + ':eq('+index+')').show();\u000a	};\u000a	this.remove = function(args) {\u000a		var $index = args[0];\u000a		var $removeTabPane = typeof args[1] != 'undefined' ? args[1] : false;\u000a		var $item = $navigation.find(baseItemSelector + ':eq('+$index+')');\u000a\u000a		// Remove the tab pane first if needed\u000a		if($removeTabPane) {\u000a			var $href = $item.find('a').attr('href');\u000a			$($href).remove();\u000a		}\u000a\u000a		// Remove menu item\u000a		$item.remove();\u000a	};\u000a\u000a	var innerTabClick = function (e) {\u000a		// Get the index of the clicked tab\u000a		var $ul = $navigation.find(baseItemSelector);\u000a		var clickedIndex = $ul.index($(e.currentTarget).parent(baseItemSelector));\u000a		var $clickedTab = $( $ul[clickedIndex] );\u000a		if($settings.onTabClick && typeof $settings.onTabClick === 'function' && $settings.onTabClick($activeTab, $navigation, obj.currentIndex(), clickedIndex, $clickedTab)===false){\u000a		    return false;\u000a		}\u000a	};\u000a\u000a	var innerTabShown = function (e) {\u000a		var $element = $(e.target).parent();\u000a		var nextTab = $navigation.find(baseItemSelector).index($element);\u000a\u000a		// If it's disabled then do not change\u000a		if($element.hasClass('disabled')) {\u000a			return false;\u000a		}\u000a\u000a		if($settings.onTabChange && typeof $settings.onTabChange === 'function' && $settings.onTabChange($activeTab, $navigation, obj.currentIndex(), nextTab, $element)===false){\u000a				return false;\u000a		}\u000a\u000a		$activeTab = $element; // activated tab\u000a		obj.fixNavigationButtons();\u000a	};\u000a\u000a	this.resetWizard = function() {\u000a\u000a		// remove the existing handlers\u000a		$('a[data-toggle="tab"]', $navigation).off('click', innerTabClick);\u000a		$('a[data-toggle="tab"]', $navigation).off('show show.bs.tab', innerTabShown);\u000a\u000a		// reset elements based on current state of the DOM\u000a		$navigation = element.find('ul:first', element);\u000a		$activeTab = $navigation.find(baseItemSelector + '.active', element);\u000a\u000a		// re-add handlers\u000a		$('a[data-toggle="tab"]', $navigation).on('click', innerTabClick);\u000a		$('a[data-toggle="tab"]', $navigation).on('show show.bs.tab', innerTabShown);\u000a\u000a		obj.fixNavigationButtons();\u000a	};\u000a\u000a	$navigation = element.find('ul:first', element);\u000a	$activeTab = $navigation.find(baseItemSelector + '.active', element);\u000a\u000a	if(!$navigation.hasClass($settings.tabClass)) {\u000a		$navigation.addClass($settings.tabClass);\u000a	}\u000a\u000a	// Load onInit\u000a	if($settings.onInit && typeof $settings.onInit === 'function'){\u000a		$settings.onInit($activeTab, $navigation, 0);\u000a	}\u000a\u000a	// Load onShow\u000a	if($settings.onShow && typeof $settings.onShow === 'function'){\u000a		$settings.onShow($activeTab, $navigation, obj.nextIndex());\u000a	}\u000a\u000a	$('a[data-toggle="tab"]', $navigation).on('click', innerTabClick);\u000a\u000a	// attach to both show and show.bs.tab to support Bootstrap versions 2.3.2 and 3.0.0\u000a	$('a[data-toggle="tab"]', $navigation).on('show show.bs.tab', innerTabShown);\u000a};\u000a$.fn.bootstrapWizard = function(options) {\u000a	//expose methods\u000a	if (typeof options == 'string') {\u000a		var args = Array.prototype.slice.call(arguments, 1)\u000a		if(args.length === 1) {\u000a			args.toString();\u000a		}\u000a		return this.data('bootstrapWizard')[options](args);\u000a	}\u000a	return this.each(function(index){\u000a		var element = $(this);\u000a		// Return early if this element already has a plugin instance\u000a		if (element.data('bootstrapWizard')) return;\u000a		// pass options to plugin constructor\u000a		var wizard = new bootstrapWizardCreate(element, options);\u000a		// Store plugin object in this element's data\u000a		element.data('bootstrapWizard', wizard);\u000a		// and then trigger initial change\u000a		wizard.fixNavigationButtons();\u000a	});\u000a};\u000a\u000a// expose options\u000a$.fn.bootstrapWizard.defaults = {\u000a	withVisible:      false,\u000a	tabClass:         'nav nav-pills',\u000a	nextSelector:     '.wizard li.next',\u000a	previousSelector: '.wizard li.previous',\u000a	firstSelector:    '.wizard li.first',\u000a	lastSelector:     '.wizard li.last',\u000a  finishSelector:   '.wizard li.finish',\u000a	backSelector:     '.wizard li.back',\u000a	onShow:           null,\u000a	onInit:           null,\u000a	onNext:           null,\u000a	onPrevious:       null,\u000a	onLast:           null,\u000a	onFirst:          null,\u000a  onFinish:         null,\u000a  onBack:           null,\u000a	onTabChange:      null,\u000a	onTabClick:       null,\u000a	onTabShow:        null\u000a};\u000a\u000a})(jQuery);\u000a\u000a;\u000a
p0
.