V// source: js/app/client/timelapse.js\u000a(function (global, factory) {\u000a    if (typeof define === "function" && define.amd) {\u000a        define(["OctoPrintClient", "jquery"], factory);\u000a    } else {\u000a        factory(global.OctoPrintClient, global.$);\u000a    }\u000a})(this, function (OctoPrintClient, $) {\u000a    var url = "api/timelapse";\u000a\u000a    var downloadUrl = "downloads/timelapse";\u000a\u000a    var timelapseUrl = function (filename) {\u000a        return url + "/" + filename;\u000a    };\u000a\u000a    var timelapseDownloadUrl = function (filename) {\u000a        return downloadUrl + "/" + filename;\u000a    };\u000a\u000a    var unrenderedTimelapseUrl = function (name) {\u000a        return url + "/unrendered/" + name;\u000a    };\u000a\u000a    var OctoPrintTimelapseClient = function (base) {\u000a        this.base = base;\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.get = function (unrendered, opts) {\u000a        if (unrendered) {\u000a            opts = opts || {};\u000a            opts.data = {unrendered: unrendered};\u000a        }\u000a        return this.base.get(url, opts);\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.list = function (opts) {\u000a        var deferred = $.Deferred();\u000a\u000a        this.get(true, opts)\u000a            .done(function (response, status, request) {\u000a                deferred.resolve(\u000a                    {\u000a                        rendered: response.files,\u000a                        unrendered: response.unrendered\u000a                    },\u000a                    status,\u000a                    request\u000a                );\u000a            })\u000a            .fail(function () {\u000a                deferred.reject.apply(null, arguments);\u000a            });\u000a\u000a        return deferred.promise();\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.listRendered = function (opts) {\u000a        var deferred = $.Deferred();\u000a\u000a        this.get(false, opts)\u000a            .done(function (response, status, request) {\u000a                deferred.resolve(response.files, status, request);\u000a            })\u000a            .fail(function () {\u000a                deferred.reject.apply(null, arguments);\u000a            });\u000a\u000a        return deferred.promise();\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.listUnrendered = function (opts) {\u000a        var deferred = $.Deferred();\u000a\u000a        this.get(true, opts)\u000a            .done(function (response, status, request) {\u000a                deferred.resolve(response.unrendered, status, request);\u000a            })\u000a            .fail(function () {\u000a                deferred.reject.apply(null, arguments);\u000a            });\u000a\u000a        return deferred.promise();\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.download = function (filename, opts) {\u000a        return this.base.download(timelapseDownloadUrl(filename), opts);\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.delete = function (filename, opts) {\u000a        return this.base.delete(timelapseUrl(filename), opts);\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.deleteUnrendered = function (name, opts) {\u000a        return this.base.delete(unrenderedTimelapseUrl(name), opts);\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.renderUnrendered = function (name, opts) {\u000a        return this.base.issueCommand(unrenderedTimelapseUrl(name), "render");\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.getConfig = function (opts) {\u000a        var deferred = $.Deferred();\u000a        this.get(false, opts)\u000a            .done(function (response, status, request) {\u000a                deferred.resolve(response.config, status, request);\u000a            })\u000a            .fail(function () {\u000a                deferred.reject.apply(null, arguments);\u000a            });\u000a        return deferred.promise();\u000a    };\u000a\u000a    OctoPrintTimelapseClient.prototype.saveConfig = function (config, opts) {\u000a        config = config || {};\u000a        return OctoPrint.postJson(url, config, opts);\u000a    };\u000a\u000a    OctoPrintClient.registerComponent("timelapse", OctoPrintTimelapseClient);\u000a    return OctoPrintTimelapseClient;\u000a});\u000a\u000a;\u000a
p0
.