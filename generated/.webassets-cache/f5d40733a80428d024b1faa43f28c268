V// source: js/app/viewmodels/usersettings.js\u000a$(function () {\u000a    function UserSettingsViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.access = parameters[1];\u000a\u000a        self.users = self.access.users;\u000a\u000a        self.userSettingsDialog = undefined;\u000a\u000a        var auto_locale = {\u000a            language: "_default",\u000a            display: gettext("Site default"),\u000a            english: undefined\u000a        };\u000a        self.locales = ko.observableArray(\u000a            [auto_locale].concat(\u000a                _.sortBy(_.values(AVAILABLE_LOCALES), function (n) {\u000a                    return n.display;\u000a                })\u000a            )\u000a        );\u000a        self.locale_languages = _.keys(AVAILABLE_LOCALES);\u000a\u000a        self.access_password = ko.observable(undefined);\u000a        self.access_repeatedPassword = ko.observable(undefined);\u000a        self.access_apikey = ko.observable(undefined);\u000a        self.interface_language = ko.observable(undefined);\u000a\u000a        self.currentUser = ko.observable(undefined);\u000a        self.currentUser.subscribe(function (newUser) {\u000a            self.access_password(undefined);\u000a            self.access_repeatedPassword(undefined);\u000a            self.access_apikey(undefined);\u000a            self.interface_language("_default");\u000a\u000a            if (newUser !== undefined) {\u000a                self.access_apikey(newUser.apikey);\u000a                if (\u000a                    newUser.settings.hasOwnProperty("interface") &&\u000a                    newUser.settings.interface.hasOwnProperty("language")\u000a                ) {\u000a                    self.interface_language(newUser.settings.interface.language);\u000a                }\u000a            }\u000a        });\u000a\u000a        self.passwordMismatch = ko.pureComputed(function () {\u000a            return self.access_password() !== self.access_repeatedPassword();\u000a        });\u000a\u000a        self.show = function (user) {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            if (user === undefined) {\u000a                user = self.loginState.currentUser();\u000a            }\u000a\u000a            var process = function (user) {\u000a                self.currentUser(user);\u000a                self.userSettingsDialog.modal("show");\u000a            };\u000a\u000a            // make sure we have the current user data, see #2534\u000a            OctoPrint.access.users\u000a                .get(user.name)\u000a                .done(function (data) {\u000a                    process(data);\u000a                })\u000a                .fail(function () {\u000a                    log.warn(\u000a                        "Could not fetch current user data, proceeding with client side data copy"\u000a                    );\u000a                    process(user);\u000a                });\u000a        };\u000a\u000a        self.save = function () {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            if (self.access_password() && !self.passwordMismatch()) {\u000a                self.users.updatePassword(\u000a                    self.currentUser().name,\u000a                    self.access_password(),\u000a                    function () {}\u000a                );\u000a            }\u000a\u000a            var settings = {\u000a                interface: {\u000a                    language: self.interface_language()\u000a                }\u000a            };\u000a            self.updateSettings(self.currentUser().name, settings).done(function () {\u000a                // close dialog\u000a                self.currentUser(undefined);\u000a                self.userSettingsDialog.modal("hide");\u000a                self.loginState.reloadUser();\u000a            });\u000a        };\u000a\u000a        self.copyApikey = function () {\u000a            copyToClipboard(self.access_apikey());\u000a        };\u000a\u000a        self.generateApikey = function () {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a            var generate = function () {\u000a                self.users\u000a                    .generateApikey(self.currentUser().name)\u000a                    .done(function (response) {\u000a                        self.access_apikey(response.apikey);\u000a                    });\u000a            };\u000a\u000a            if (self.access_apikey()) {\u000a                showConfirmationDialog(\u000a                    gettext(\u000a                        "This will generate a new API Key. The old API Key will cease to function immediately."\u000a                    ),\u000a                    generate\u000a                );\u000a            } else {\u000a                generate();\u000a            }\u000a        };\u000a\u000a        self.deleteApikey = function () {\u000a            if (!CONFIG_ACCESS_CONTROL) return;\u000a            if (!self.access_apikey()) return;\u000a\u000a            showConfirmationDialog(\u000a                gettext(\u000a                    "This will delete the API Key. It will cease to to function immediately."\u000a                ),\u000a                function () {\u000a                    self.users.deleteApikey(self.currentUser().name).done(function () {\u000a                        self.access_apikey(undefined);\u000a                    });\u000a                }\u000a            );\u000a        };\u000a\u000a        self.updateSettings = function (username, settings) {\u000a            return OctoPrint.access.users.saveSettings(username, settings);\u000a        };\u000a\u000a        self.saveEnabled = function () {\u000a            return !self.passwordMismatch();\u000a        };\u000a\u000a        self.onStartup = function () {\u000a            self.userSettingsDialog = $("#usersettings_dialog");\u000a        };\u000a\u000a        self.onAllBound = function (allViewModels) {\u000a            self.userSettingsDialog.on("show", function () {\u000a                callViewModels(allViewModels, "onUserSettingsShown");\u000a            });\u000a            self.userSettingsDialog.on("hidden", function () {\u000a                callViewModels(allViewModels, "onUserSettingsHidden");\u000a            });\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: UserSettingsViewModel,\u000a        dependencies: ["loginStateViewModel", "accessViewModel"],\u000a        elements: ["#usersettings_dialog"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.