V// source: js/app/viewmodels/printerprofiles.js\u000a$(function () {\u000a    var cleanProfile = function () {\u000a        return {\u000a            id: "",\u000a            name: "",\u000a            model: "",\u000a            color: "default",\u000a            volume: {\u000a                formFactor: "rectangular",\u000a                width: 200,\u000a                depth: 200,\u000a                height: 200,\u000a                origin: "lowerleft",\u000a                custom_box: false\u000a            },\u000a            heatedBed: true,\u000a            heatedChamber: false,\u000a            axes: {\u000a                x: {speed: 6000, inverted: false},\u000a                y: {speed: 6000, inverted: false},\u000a                z: {speed: 200, inverted: false},\u000a                e: {speed: 300, inverted: false}\u000a            },\u000a            extruder: {\u000a                count: 1,\u000a                offsets: [[0, 0]],\u000a                nozzleDiameter: 0.4,\u000a                sharedNozzle: false\u000a            }\u000a        };\u000a    };\u000a\u000a    function EditedProfileViewModel(profiles) {\u000a        var self = this;\u000a\u000a        self.profiles = profiles;\u000a\u000a        self.isNew = ko.observable(false);\u000a\u000a        self.name = ko.observable();\u000a        self.color = ko.observable();\u000a        self.identifier = ko.observable();\u000a        self.identifierPlaceholder = ko.observable();\u000a        self.model = ko.observable();\u000a\u000a        self.volumeWidth = ko.observable();\u000a        self.volumeHeight = ko.observable();\u000a        self.volumeDepth = ko.observable();\u000a        self.volumeFormFactor = ko.observable();\u000a        self.volumeOrigin = ko.observable();\u000a\u000a        self.volumeFormFactor.subscribe(function (value) {\u000a            if (value == "circular") {\u000a                self.volumeOrigin("center");\u000a            }\u000a        });\u000a        self.volumeOrigin.subscribe(function () {\u000a            self.toBoundingBoxPlaceholders(\u000a                self.defaultBoundingBox(\u000a                    self.volumeWidth(),\u000a                    self.volumeDepth(),\u000a                    self.volumeHeight(),\u000a                    self.volumeOrigin()\u000a                )\u000a            );\u000a        });\u000a\u000a        self.heatedBed = ko.observable();\u000a        self.heatedChamber = ko.observable();\u000a\u000a        self.nozzleDiameter = ko.observable();\u000a        self.extruders = ko.observable();\u000a        self.extruderOffsets = ko.observableArray();\u000a        self.sharedNozzle = ko.observable();\u000a\u000a        self.axisXSpeed = ko.observable();\u000a        self.axisYSpeed = ko.observable();\u000a        self.axisZSpeed = ko.observable();\u000a        self.axisESpeed = ko.observable();\u000a\u000a        self.axisXInverted = ko.observable(false);\u000a        self.axisYInverted = ko.observable(false);\u000a        self.axisZInverted = ko.observable(false);\u000a        self.axisEInverted = ko.observable(false);\u000a\u000a        self.customBoundingBox = ko.observable(false);\u000a        self.boundingBoxMinX = ko.observable();\u000a        self.boundingBoxMinY = ko.observable();\u000a        self.boundingBoxMinZ = ko.observable();\u000a        self.boundingBoxMaxX = ko.observable();\u000a        self.boundingBoxMaxY = ko.observable();\u000a        self.boundingBoxMaxZ = ko.observable();\u000a        self.boundingBoxMinXPlaceholder = ko.observable();\u000a        self.boundingBoxMinYPlaceholder = ko.observable();\u000a        self.boundingBoxMinZPlaceholder = ko.observable();\u000a        self.boundingBoxMaxXPlaceholder = ko.observable();\u000a        self.boundingBoxMaxYPlaceholder = ko.observable();\u000a        self.boundingBoxMaxZPlaceholder = ko.observable();\u000a\u000a        self.koExtruderOffsets = ko.pureComputed(function () {\u000a            var extruderOffsets = self.extruderOffsets();\u000a            var numExtruders = self.extruders();\u000a            if (!numExtruders) {\u000a                numExtruders = 1;\u000a            }\u000a\u000a            if (numExtruders - 1 > extruderOffsets.length) {\u000a                for (var i = extruderOffsets.length; i < numExtruders; i++) {\u000a                    extruderOffsets[i] = {\u000a                        idx: i + 1,\u000a                        x: ko.observable(0),\u000a                        y: ko.observable(0)\u000a                    };\u000a                }\u000a                self.extruderOffsets(extruderOffsets);\u000a            }\u000a\u000a            return extruderOffsets.slice(0, numExtruders - 1);\u000a        });\u000a\u000a        self.nameInvalid = ko.pureComputed(function () {\u000a            return !self.name();\u000a        });\u000a\u000a        self.identifierInvalid = ko.pureComputed(function () {\u000a            var identifier = self.identifier();\u000a            var placeholder = self.identifierPlaceholder();\u000a            var data = identifier;\u000a            if (!identifier) {\u000a                data = placeholder;\u000a            }\u000a\u000a            var validCharacters = data && data == self._sanitize(data);\u000a\u000a            var existingProfile = self.profiles.getItem(function (item) {\u000a                return item.id == data;\u000a            });\u000a            return (\u000a                !data ||\u000a                !validCharacters ||\u000a                (self.isNew() && existingProfile != undefined)\u000a            );\u000a        });\u000a\u000a        self.identifierInvalidText = ko.pureComputed(function () {\u000a            if (!self.identifierInvalid()) {\u000a                return "";\u000a            }\u000a\u000a            if (!self.identifier() && !self.identifierPlaceholder()) {\u000a                return gettext("Identifier must be set");\u000a            } else if (self.identifier() != self._sanitize(self.identifier())) {\u000a                return gettext(\u000a                    "Invalid characters, only a-z, A-Z, 0-9, -, ., _, ( and ) are allowed"\u000a                );\u000a            } else {\u000a                return gettext("A profile with such an identifier already exists");\u000a            }\u000a        });\u000a\u000a        self.name.subscribe(function () {\u000a            self.identifierPlaceholder(self._sanitize(self.name()).toLowerCase());\u000a        });\u000a\u000a        self.valid = function () {\u000a            return !self.nameInvalid() && !self.identifierInvalid();\u000a        };\u000a\u000a        self.availableColors = ko.observable([\u000a            {key: "default", name: gettext("default")},\u000a            {key: "red", name: gettext("red")},\u000a            {key: "orange", name: gettext("orange")},\u000a            {key: "yellow", name: gettext("yellow")},\u000a            {key: "green", name: gettext("green")},\u000a            {key: "blue", name: gettext("blue")},\u000a            {key: "black", name: gettext("black")}\u000a        ]);\u000a\u000a        self.availableOrigins = ko.pureComputed(function () {\u000a            var formFactor = self.volumeFormFactor();\u000a\u000a            var possibleOrigins = {\u000a                lowerleft: gettext("Lower Left"),\u000a                center: gettext("Center")\u000a            };\u000a\u000a            var keys = [];\u000a            if (formFactor == "rectangular") {\u000a                keys = ["lowerleft", "center"];\u000a            } else if (formFactor == "circular") {\u000a                keys = ["center"];\u000a            }\u000a\u000a            var result = [];\u000a            _.each(keys, function (key) {\u000a                result.push({key: key, name: possibleOrigins[key]});\u000a            });\u000a            return result;\u000a        });\u000a\u000a        self.fromProfileData = function (data) {\u000a            self.isNew(data === undefined);\u000a\u000a            if (data === undefined) {\u000a                data = cleanProfile();\u000a            }\u000a\u000a            self.identifier(data.id);\u000a            self.name(data.name);\u000a            self.color(data.color);\u000a            self.model(data.model);\u000a\u000a            self.volumeWidth(data.volume.width);\u000a            self.volumeHeight(data.volume.height);\u000a            self.volumeDepth(data.volume.depth);\u000a            self.volumeFormFactor(data.volume.formFactor);\u000a            self.volumeOrigin(data.volume.origin);\u000a\u000a            if (data.volume.custom_box) {\u000a                self.toBoundingBoxData(data.volume.custom_box, true);\u000a            } else {\u000a                var box = self.defaultBoundingBox(\u000a                    data.volume.width,\u000a                    data.volume.depth,\u000a                    data.volume.height,\u000a                    data.volume.origin\u000a                );\u000a                self.toBoundingBoxData(box, false);\u000a            }\u000a\u000a            self.heatedBed(data.heatedBed);\u000a            self.heatedChamber(data.heatedChamber);\u000a\u000a            self.nozzleDiameter(data.extruder.nozzleDiameter);\u000a            self.sharedNozzle(data.extruder.sharedNozzle);\u000a            self.extruders(data.extruder.count);\u000a            var offsets = [];\u000a            if (data.extruder.count > 1) {\u000a                _.each(_.slice(data.extruder.offsets, 1), function (offset, index) {\u000a                    offsets.push({\u000a                        idx: index + 1,\u000a                        x: ko.observable(offset[0]),\u000a                        y: ko.observable(offset[1])\u000a                    });\u000a                });\u000a            }\u000a            self.extruderOffsets(offsets);\u000a\u000a            self.axisXSpeed(data.axes.x.speed);\u000a            self.axisXInverted(data.axes.x.inverted);\u000a            self.axisYSpeed(data.axes.y.speed);\u000a            self.axisYInverted(data.axes.y.inverted);\u000a            self.axisZSpeed(data.axes.z.speed);\u000a            self.axisZInverted(data.axes.z.inverted);\u000a            self.axisESpeed(data.axes.e.speed);\u000a            self.axisEInverted(data.axes.e.inverted);\u000a        };\u000a\u000a        self.toProfileData = function () {\u000a            var identifier = self.identifier();\u000a            if (!identifier) {\u000a                identifier = self.identifierPlaceholder();\u000a            }\u000a\u000a            var defaultProfile = cleanProfile();\u000a            var valid = function (value, f, def) {\u000a                var v = f(value);\u000a                if (isNaN(v)) {\u000a                    return def;\u000a                }\u000a                return v;\u000a            };\u000a            var validFloat = function (value, def) {\u000a                return valid(value, parseFloat, def);\u000a            };\u000a            var validInt = function (value, def) {\u000a                return valid(value, parseInt, def);\u000a            };\u000a\u000a            var profile = {\u000a                id: identifier,\u000a                name: self.name(),\u000a                color: self.color(),\u000a                model: self.model(),\u000a                volume: {\u000a                    width: validFloat(self.volumeWidth(), defaultProfile.volume.width),\u000a                    depth: validFloat(self.volumeDepth(), defaultProfile.volume.depth),\u000a                    height: validFloat(self.volumeHeight(), defaultProfile.volume.height),\u000a                    formFactor: self.volumeFormFactor(),\u000a                    origin: self.volumeOrigin()\u000a                },\u000a                heatedBed: self.heatedBed(),\u000a                heatedChamber: self.heatedChamber(),\u000a                extruder: {\u000a                    count: parseInt(self.extruders()),\u000a                    offsets: [[0.0, 0.0]],\u000a                    nozzleDiameter: validFloat(\u000a                        self.nozzleDiameter(),\u000a                        defaultProfile.extruder.nozzleDiameter\u000a                    ),\u000a                    sharedNozzle: self.sharedNozzle()\u000a                },\u000a                axes: {\u000a                    x: {\u000a                        speed: validInt(self.axisXSpeed(), defaultProfile.axes.x.speed),\u000a                        inverted: self.axisXInverted()\u000a                    },\u000a                    y: {\u000a                        speed: validInt(self.axisYSpeed(), defaultProfile.axes.y.speed),\u000a                        inverted: self.axisYInverted()\u000a                    },\u000a                    z: {\u000a                        speed: validInt(self.axisZSpeed(), defaultProfile.axes.z.speed),\u000a                        inverted: self.axisZInverted()\u000a                    },\u000a                    e: {\u000a                        speed: validInt(self.axisESpeed(), defaultProfile.axes.e.speed),\u000a                        inverted: self.axisEInverted()\u000a                    }\u000a                }\u000a            };\u000a\u000a            self.fillBoundingBoxData(profile);\u000a\u000a            var offsetX, offsetY;\u000a            if (self.extruders() > 1) {\u000a                for (var i = 0; i < self.extruders() - 1; i++) {\u000a                    var offset = [0.0, 0.0];\u000a                    if (i < self.extruderOffsets().length) {\u000a                        offsetX = validFloat(self.extruderOffsets()[i]["x"](), 0.0);\u000a                        offsetY = validFloat(self.extruderOffsets()[i]["y"](), 0.0);\u000a                        offset = [offsetX, offsetY];\u000a                    }\u000a                    profile.extruder.offsets.push(offset);\u000a                }\u000a            }\u000a\u000a            if (profile.volume.formFactor == "circular") {\u000a                profile.volume.depth = profile.volume.width;\u000a            }\u000a\u000a            return profile;\u000a        };\u000a\u000a        self.defaultBoundingBox = function (width, depth, height, origin) {\u000a            if (origin == "center") {\u000a                var halfWidth = width / 2.0;\u000a                var halfDepth = depth / 2.0;\u000a\u000a                return {\u000a                    x_min: -halfWidth,\u000a                    y_min: -halfDepth,\u000a                    z_min: 0.0,\u000a                    x_max: halfWidth,\u000a                    y_max: halfDepth,\u000a                    z_max: height\u000a                };\u000a            } else {\u000a                return {\u000a                    x_min: 0.0,\u000a                    y_min: 0.0,\u000a                    z_min: 0.0,\u000a                    x_max: width,\u000a                    y_max: depth,\u000a                    z_max: height\u000a                };\u000a            }\u000a        };\u000a\u000a        self.toBoundingBoxData = function (box, custom) {\u000a            self.customBoundingBox(custom);\u000a            if (custom) {\u000a                self.boundingBoxMinX(box.x_min);\u000a                self.boundingBoxMinY(box.y_min);\u000a                self.boundingBoxMinZ(box.z_min);\u000a                self.boundingBoxMaxX(box.x_max);\u000a                self.boundingBoxMaxY(box.y_max);\u000a                self.boundingBoxMaxZ(box.z_max);\u000a            } else {\u000a                self.boundingBoxMinX(undefined);\u000a                self.boundingBoxMinY(undefined);\u000a                self.boundingBoxMinZ(undefined);\u000a                self.boundingBoxMaxX(undefined);\u000a                self.boundingBoxMaxY(undefined);\u000a                self.boundingBoxMaxZ(undefined);\u000a            }\u000a            self.toBoundingBoxPlaceholders(box);\u000a        };\u000a\u000a        self.toBoundingBoxPlaceholders = function (box) {\u000a            self.boundingBoxMinXPlaceholder(box.x_min);\u000a            self.boundingBoxMinYPlaceholder(box.y_min);\u000a            self.boundingBoxMinZPlaceholder(box.z_min);\u000a            self.boundingBoxMaxXPlaceholder(box.x_max);\u000a            self.boundingBoxMaxYPlaceholder(box.y_max);\u000a            self.boundingBoxMaxZPlaceholder(box.z_max);\u000a        };\u000a\u000a        self.fillBoundingBoxData = function (profile) {\u000a            if (self.customBoundingBox()) {\u000a                var defaultBox = self.defaultBoundingBox(\u000a                    self.volumeWidth(),\u000a                    self.volumeDepth(),\u000a                    self.volumeHeight(),\u000a                    self.volumeOrigin()\u000a                );\u000a                profile.volume.custom_box = {\u000a                    x_min:\u000a                        self.boundingBoxMinX() !== undefined\u000a                            ? Math.min(self.boundingBoxMinX(), defaultBox.x_min)\u000a                            : defaultBox.x_min,\u000a                    y_min:\u000a                        self.boundingBoxMinY() !== undefined\u000a                            ? Math.min(self.boundingBoxMinY(), defaultBox.y_min)\u000a                            : defaultBox.y_min,\u000a                    z_min:\u000a                        self.boundingBoxMinZ() !== undefined\u000a                            ? Math.min(self.boundingBoxMinZ(), defaultBox.z_min)\u000a                            : defaultBox.z_min,\u000a                    x_max:\u000a                        self.boundingBoxMaxX() !== undefined\u000a                            ? Math.max(self.boundingBoxMaxX(), defaultBox.x_max)\u000a                            : defaultBox.x_max,\u000a                    y_max:\u000a                        self.boundingBoxMaxY() !== undefined\u000a                            ? Math.max(self.boundingBoxMaxY(), defaultBox.y_max)\u000a                            : defaultBox.y_max,\u000a                    z_max:\u000a                        self.boundingBoxMaxZ() !== undefined\u000a                            ? Math.max(self.boundingBoxMaxZ(), defaultBox.z_max)\u000a                            : defaultBox.z_max\u000a                };\u000a            } else {\u000a                profile.volume.custom_box = false;\u000a            }\u000a        };\u000a\u000a        self._sanitize = function (name) {\u000a            return name.replace(/[^a-zA-Z0-9\u005c-_\u005c.\u005c(\u005c) ]/g, "").replace(/ /g, "_");\u000a        };\u000a\u000a        self.fromProfileData(cleanProfile());\u000a    }\u000a\u000a    function PrinterProfilesViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.access = parameters[1];\u000a\u000a        self.requestInProgress = ko.observable(false);\u000a\u000a        self.profiles = new ItemListHelper(\u000a            "printerProfiles",\u000a            {\u000a                name: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                        return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                        return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            10\u000a        );\u000a        self.defaultProfile = ko.observable();\u000a        self.currentProfile = ko.observable();\u000a\u000a        self.createProfileEditor = function (data) {\u000a            var editor = new EditedProfileViewModel(self.profiles);\u000a            if (data !== undefined) {\u000a                editor.fromProfileData(data);\u000a            }\u000a            return editor;\u000a        };\u000a\u000a        self.editor = self.createProfileEditor();\u000a        self.currentProfileData = ko.observable(ko.mapping.fromJS(cleanProfile()));\u000a\u000a        self.enableEditorSubmitButton = ko.pureComputed(function () {\u000a            return self.editor.valid() && !self.requestInProgress();\u000a        });\u000a\u000a        self.makeDefault = function (data) {\u000a            var profile = {\u000a                id: data.id,\u000a                default: true\u000a            };\u000a\u000a            self.updateProfile(profile);\u000a        };\u000a\u000a        self.canMakeDefault = function (data) {\u000a            return !data.isdefault();\u000a        };\u000a\u000a        self.canRemove = function (data) {\u000a            return !data.iscurrent() && !data.isdefault();\u000a        };\u000a\u000a        self.requestData = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.CONNECTION)) {\u000a                return;\u000a            }\u000a\u000a            return OctoPrint.printerprofiles.list().done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (data) {\u000a            var items = [];\u000a            var defaultProfile = undefined;\u000a            var currentProfile = undefined;\u000a            var currentProfileData = undefined;\u000a            _.each(data.profiles, function (entry) {\u000a                if (entry.default) {\u000a                    defaultProfile = entry.id;\u000a                }\u000a                if (entry.current) {\u000a                    currentProfile = entry.id;\u000a                    currentProfileData = ko.mapping.fromJS(\u000a                        entry,\u000a                        self.currentProfileData\u000a                    );\u000a                }\u000a                entry["isdefault"] = ko.observable(entry.default);\u000a                entry["iscurrent"] = ko.observable(entry.current);\u000a                items.push(entry);\u000a            });\u000a            self.profiles.updateItems(items);\u000a            self.defaultProfile(defaultProfile);\u000a\u000a            if (currentProfile && currentProfileData) {\u000a                self.currentProfile(currentProfile);\u000a                self.currentProfileData(currentProfileData);\u000a            } else {\u000a                // shouldn't normally happen, but just to not have anything else crash...\u000a                log.warn(\u000a                    "Current printer profile could not be detected, using default values"\u000a                );\u000a                self.currentProfile("");\u000a                self.currentProfileData(\u000a                    ko.mapping.fromJS(cleanProfile(), self.currentProfileData)\u000a                );\u000a            }\u000a        };\u000a\u000a        self.addProfile = function (callback) {\u000a            var profile = self.editor.toProfileData();\u000a            self.requestInProgress(true);\u000a            OctoPrint.printerprofiles\u000a                .add(profile)\u000a                .done(function () {\u000a                    if (callback !== undefined) {\u000a                        callback();\u000a                    }\u000a                    self.requestData();\u000a                })\u000a                .fail(function (xhr) {\u000a                    var text = gettext(\u000a                        "There was unexpected error while saving the printer profile, please consult the logs."\u000a                    );\u000a                    new PNotify({\u000a                        title: gettext("Could not add profile"),\u000a                        text: text,\u000a                        type: "error",\u000a                        hide: false\u000a                    });\u000a                })\u000a                .always(function () {\u000a                    self.requestInProgress(false);\u000a                });\u000a        };\u000a\u000a        self.removeProfile = function (data) {\u000a            var perform = function () {\u000a                self.requestInProgress(true);\u000a                OctoPrint.printerprofiles\u000a                    .delete(data.id, {url: data.resource})\u000a                    .done(function () {\u000a                        self.requestData().always(function () {\u000a                            self.requestInProgress(false);\u000a                        });\u000a                    })\u000a                    .fail(function (xhr) {\u000a                        var text;\u000a                        if (xhr.status == 409) {\u000a                            text = gettext(\u000a                                "Cannot delete the default profile or the currently active profile."\u000a                            );\u000a                        } else {\u000a                            text = gettext(\u000a                                "There was unexpected error while removing the printer profile, please consult the logs."\u000a                            );\u000a                        }\u000a                        new PNotify({\u000a                            title: gettext("Could not delete profile"),\u000a                            text: text,\u000a                            type: "error",\u000a                            hide: false\u000a                        });\u000a                        self.requestInProgress(false);\u000a                    });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext('You are about to delete the printer profile "%(name)s".'),\u000a                    {name: _.escape(data.name)}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.updateProfile = function (profile, callback) {\u000a            if (profile == undefined) {\u000a                profile = self.editor.toProfileData();\u000a            }\u000a\u000a            self.requestInProgress(true);\u000a            OctoPrint.printerprofiles\u000a                .update(profile.id, profile)\u000a                .done(function () {\u000a                    if (callback !== undefined) {\u000a                        callback();\u000a                    }\u000a                    self.requestData().always(function () {\u000a                        self.requestInProgress(false);\u000a                    });\u000a                })\u000a                .fail(function () {\u000a                    var text = gettext(\u000a                        "There was unexpected error while updating the printer profile, please consult the logs."\u000a                    );\u000a                    new PNotify({\u000a                        title: gettext("Could not update profile"),\u000a                        text: text,\u000a                        type: "error",\u000a                        hide: false\u000a                    });\u000a                    self.requestInProgress(false);\u000a                });\u000a        };\u000a\u000a        self.showEditProfileDialog = function (data) {\u000a            self.editor.fromProfileData(data);\u000a\u000a            var editDialog = $("#settings_printerProfiles_editDialog");\u000a            var confirmButton = $("button.btn-confirm", editDialog);\u000a            var dialogTitle = $("h3.modal-title", editDialog);\u000a\u000a            var add = data === undefined;\u000a            dialogTitle.text(\u000a                add\u000a                    ? gettext("Add Printer Profile")\u000a                    : _.sprintf(gettext('Edit Printer Profile "%(name)s"'), {\u000a                          name: _.escape(data.name)\u000a                      })\u000a            );\u000a            confirmButton.unbind("click");\u000a            confirmButton.bind("click", function () {\u000a                if (self.enableEditorSubmitButton()) {\u000a                    self.confirmEditProfile(add);\u000a                }\u000a            });\u000a\u000a            $('ul.nav-pills a[data-toggle="tab"]:first', editDialog).tab("show");\u000a            editDialog\u000a                .modal({\u000a                    minHeight: function () {\u000a                        return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\u000a                    }\u000a                })\u000a                .css({\u000a                    "width": "auto",\u000a                    "margin-left": function () {\u000a                        return -($(this).width() / 2);\u000a                    }\u000a                });\u000a        };\u000a\u000a        self.confirmEditProfile = function (add) {\u000a            var callback = function () {\u000a                $("#settings_printerProfiles_editDialog").modal("hide");\u000a            };\u000a\u000a            if (add) {\u000a                self.addProfile(callback);\u000a            } else {\u000a                self.updateProfile(undefined, callback);\u000a            }\u000a        };\u000a\u000a        self.onSettingsShown = self.requestData;\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            self.requestData();\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: PrinterProfilesViewModel,\u000a        dependencies: ["loginStateViewModel", "accessViewModel"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.