V// source: js/lib/bootstrap/bootstrap-modal.js\u000a/* ===========================================================\u000a * bootstrap-modal.js v2.2.5\u000a * ===========================================================\u000a * Copyright 2012 Jordan Schroter\u000a *\u000a * Licensed under the Apache License, Version 2.0 (the "License");\u000a * you may not use this file except in compliance with the License.\u000a * You may obtain a copy of the License at\u000a *\u000a * http://www.apache.org/licenses/LICENSE-2.0\u000a *\u000a * Unless required by applicable law or agreed to in writing, software\u000a * distributed under the License is distributed on an "AS IS" BASIS,\u000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\u000a * See the License for the specific language governing permissions and\u000a * limitations under the License.\u000a * ========================================================== */\u000a\u000a\u000a!function ($) {\u000a\u000a	"use strict"; // jshint ;_;\u000a\u000a	/* MODAL CLASS DEFINITION\u000a	* ====================== */\u000a\u000a	var Modal = function (element, options) {\u000a		this.init(element, options);\u000a	};\u000a\u000a	Modal.prototype = {\u000a\u000a		constructor: Modal,\u000a\u000a		init: function (element, options) {\u000a			var that = this;\u000a\u000a			this.options = options;\u000a\u000a			this.$element = $(element)\u000a				.delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this));\u000a\u000a			this.options.remote && this.$element.find('.modal-body').load(this.options.remote, function () {\u000a				var e = $.Event('loaded');\u000a				that.$element.trigger(e);\u000a			});\u000a\u000a			var manager = typeof this.options.manager === 'function' ?\u000a				this.options.manager.call(this) : this.options.manager;\u000a\u000a			manager = manager.appendModal ?\u000a				manager : $(manager).modalmanager().data('modalmanager');\u000a\u000a			manager.appendModal(this);\u000a		},\u000a\u000a		toggle: function () {\u000a			return this[!this.isShown ? 'show' : 'hide']();\u000a		},\u000a\u000a		show: function () {\u000a			var e = $.Event('show');\u000a\u000a			if (this.isShown) return;\u000a\u000a			this.$element.trigger(e);\u000a\u000a			if (e.isDefaultPrevented()) return;\u000a\u000a			this.escape();\u000a\u000a			this.tab();\u000a\u000a			this.options.loading && this.loading();\u000a		},\u000a\u000a		hide: function (e) {\u000a			e && e.preventDefault();\u000a\u000a			e = $.Event('hide');\u000a\u000a			this.$element.trigger(e);\u000a\u000a			if (!this.isShown || e.isDefaultPrevented()) return;\u000a\u000a			this.isShown = false;\u000a\u000a			this.escape();\u000a\u000a			this.tab();\u000a\u000a			this.isLoading && this.loading();\u000a\u000a			$(document).off('focusin.modal');\u000a\u000a			this.$element\u000a				.removeClass('in')\u000a				.removeClass('animated')\u000a				.removeClass(this.options.attentionAnimation)\u000a				.removeClass('modal-overflow')\u000a				.attr('aria-hidden', true);\u000a\u000a			$.support.transition && this.$element.hasClass('fade') ?\u000a				this.hideWithTransition() :\u000a				this.hideModal();\u000a		},\u000a\u000a		layout: function () {\u000a			var prop = this.options.height ? 'height' : 'max-height',\u000a				value = this.options.height || this.options.maxHeight,\u000a				minHeight = this.options.minHeight;\u000a\u000a			if (this.options.width){\u000a				this.$element.css('width', this.options.width);\u000a\u000a				var that = this;\u000a				this.$element.css('margin-left', function () {\u000a					if (/%/ig.test(that.options.width)){\u000a						return -(parseInt(that.options.width) / 2) + '%';\u000a					} else {\u000a						return -($(this).width() / 2) + 'px';\u000a					}\u000a				});\u000a			} else {\u000a				this.$element.css('width', '');\u000a				this.$element.css('margin-left', '');\u000a			}\u000a\u000a			this.$element.find('.modal-body')\u000a				.css('overflow', '')\u000a				.css(prop, '')\u000a				.css('min-height', '');\u000a\u000a			if (value){\u000a				this.$element.find('.modal-body')\u000a					.css('overflow', 'auto')\u000a					.css(prop, value);\u000a			}\u000a\u000a			if (minHeight) {\u000a				this.$element.find('.modal-body')\u000a					.css('min-height', minHeight);\u000a			}\u000a\u000a			var modalOverflow = $(window).height() - 10 < this.$element.height();\u000a\u000a			if (modalOverflow || this.options.modalOverflow) {\u000a				this.$element\u000a					.css('margin-top', 0)\u000a					.addClass('modal-overflow');\u000a			} else {\u000a				this.$element\u000a					.css('margin-top', 0 - this.$element.height() / 2)\u000a					.removeClass('modal-overflow');\u000a			}\u000a		},\u000a\u000a		tab: function () {\u000a			var that = this;\u000a\u000a			if (this.isShown && this.options.consumeTab) {\u000a				this.$element.on('keydown.tabindex.modal', '[data-tabindex]', function (e) {\u000a			    	if (e.keyCode && e.keyCode == 9){\u000a						var elements = [],\u000a							tabindex = Number($(this).data('tabindex'));\u000a\u000a						that.$element.find('[data-tabindex]:enabled:visible:not([readonly])').each(function (ev) {\u000a							elements.push(Number($(this).data('tabindex')));\u000a						});\u000a						elements.sort(function(a,b){return a-b});\u000a\u000a						var arrayPos = $.inArray(tabindex, elements);\u000a						if (!e.shiftKey){\u000a						 		arrayPos < elements.length-1 ?\u000a									that.$element.find('[data-tabindex='+elements[arrayPos+1]+']').focus() :\u000a									that.$element.find('[data-tabindex='+elements[0]+']').focus();\u000a							} else {\u000a								arrayPos == 0 ?\u000a									that.$element.find('[data-tabindex='+elements[elements.length-1]+']').focus() :\u000a									that.$element.find('[data-tabindex='+elements[arrayPos-1]+']').focus();\u000a							}\u000a\u000a						e.preventDefault();\u000a					}\u000a				});\u000a			} else if (!this.isShown) {\u000a				this.$element.off('keydown.tabindex.modal');\u000a			}\u000a		},\u000a\u000a		escape: function () {\u000a			var that = this;\u000a			if (this.isShown && this.options.keyboard) {\u000a				if (!this.$element.attr('tabindex')) this.$element.attr('tabindex', -1);\u000a\u000a				this.$element.on('keyup.dismiss.modal', function (e) {\u000a					e.which == 27 && that.hide();\u000a				});\u000a			} else if (!this.isShown) {\u000a				this.$element.off('keyup.dismiss.modal')\u000a			}\u000a		},\u000a\u000a		hideWithTransition: function () {\u000a			var that = this\u000a				, timeout = setTimeout(function () {\u000a					that.$element.off($.support.transition.end);\u000a					that.hideModal();\u000a				}, 500);\u000a\u000a			this.$element.one($.support.transition.end, function () {\u000a				clearTimeout(timeout);\u000a				that.hideModal();\u000a			});\u000a		},\u000a\u000a		hideModal: function () {\u000a			var prop = this.options.height ? 'height' : 'max-height';\u000a			var value = this.options.height || this.options.maxHeight;\u000a\u000a			if (value){\u000a				this.$element.find('.modal-body')\u000a					.css('overflow', '')\u000a					.css(prop, '');\u000a			}\u000a\u000a			this.$element\u000a				.hide()\u000a				.trigger('hidden');\u000a		},\u000a\u000a		removeLoading: function () {\u000a			this.$loading.remove();\u000a			this.$loading = null;\u000a			this.isLoading = false;\u000a		},\u000a\u000a		loading: function (callback) {\u000a			callback = callback || function () {};\u000a\u000a			var animate = this.$element.hasClass('fade') ? 'fade' : '';\u000a\u000a			if (!this.isLoading) {\u000a				var doAnimate = $.support.transition && animate;\u000a\u000a				this.$loading = $('<div class="loading-mask ' + animate + '">')\u000a					.append(this.options.spinner)\u000a					.appendTo(this.$element);\u000a\u000a				if (doAnimate) this.$loading[0].offsetWidth; // force reflow\u000a\u000a				this.$loading.addClass('in');\u000a\u000a				this.isLoading = true;\u000a\u000a				doAnimate ?\u000a					this.$loading.one($.support.transition.end, callback) :\u000a					callback();\u000a\u000a			} else if (this.isLoading && this.$loading) {\u000a				this.$loading.removeClass('in');\u000a\u000a				var that = this;\u000a				$.support.transition && this.$element.hasClass('fade')?\u000a					this.$loading.one($.support.transition.end, function () { that.removeLoading() }) :\u000a					that.removeLoading();\u000a\u000a			} else if (callback) {\u000a				callback(this.isLoading);\u000a			}\u000a		},\u000a\u000a		focus: function () {\u000a			var $focusElem = this.$element.find(this.options.focusOn);\u000a\u000a			$focusElem = $focusElem.length ? $focusElem : this.$element;\u000a\u000a			$focusElem.focus();\u000a		},\u000a\u000a		attention: function (){\u000a			// NOTE: transitionEnd with keyframes causes odd behaviour\u000a\u000a			if (this.options.attentionAnimation){\u000a				this.$element\u000a					.removeClass('animated')\u000a					.removeClass(this.options.attentionAnimation);\u000a\u000a				var that = this;\u000a\u000a				setTimeout(function () {\u000a					that.$element\u000a						.addClass('animated')\u000a						.addClass(that.options.attentionAnimation);\u000a				}, 0);\u000a			}\u000a\u000a\u000a			this.focus();\u000a		},\u000a\u000a\u000a		destroy: function () {\u000a			var e = $.Event('destroy');\u000a\u000a			this.$element.trigger(e);\u000a\u000a			if (e.isDefaultPrevented()) return;\u000a\u000a			this.$element\u000a				.off('.modal')\u000a				.removeData('modal')\u000a				.removeClass('in')\u000a				.attr('aria-hidden', true);\u000a\u000a			if (this.$parent !== this.$element.parent()) {\u000a				this.$element.appendTo(this.$parent);\u000a			} else if (!this.$parent.length) {\u000a				// modal is not part of the DOM so remove it.\u000a				this.$element.remove();\u000a				this.$element = null;\u000a			}\u000a\u000a			this.$element.trigger('destroyed');\u000a		}\u000a	};\u000a\u000a\u000a	/* MODAL PLUGIN DEFINITION\u000a	* ======================= */\u000a\u000a	$.fn.modal = function (option, args) {\u000a		return this.each(function () {\u000a			var $this = $(this),\u000a				data = $this.data('modal'),\u000a				options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option);\u000a\u000a			if (!data) $this.data('modal', (data = new Modal(this, options)));\u000a			if (typeof option == 'string') data[option].apply(data, [].concat(args));\u000a			else if (options.show) data.show()\u000a		})\u000a	};\u000a\u000a	$.fn.modal.defaults = {\u000a		keyboard: true,\u000a		backdrop: true,\u000a		loading: false,\u000a		show: true,\u000a		width: null,\u000a		height: null,\u000a		maxHeight: null,\u000a		minHeight: null,\u000a		modalOverflow: false,\u000a		consumeTab: true,\u000a		focusOn: null,\u000a		replace: false,\u000a		resize: false,\u000a		attentionAnimation: 'shake',\u000a		manager: 'body',\u000a		spinner: '<div class="loading-spinner" style="width: 200px; margin-left: -100px;"><div class="progress progress-striped active"><div class="bar" style="width: 100%;"></div></div></div>',\u000a		backdropTemplate: '<div class="modal-backdrop" />'\u000a	};\u000a\u000a	$.fn.modal.Constructor = Modal;\u000a\u000a\u000a	/* MODAL DATA-API\u000a	* ============== */\u000a\u000a	$(function () {\u000a		$(document).off('click.modal').on('click.modal.data-api', '[data-toggle="modal"]', function ( e ) {\u000a			var $this = $(this),\u000a				href = $this.attr('href'),\u000a				$target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\u005cs]+$)/, ''))), //strip for ie7\u000a				option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());\u000a\u000a			e.preventDefault();\u000a			$target\u000a				.modal(option)\u000a				.one('hide', function () {\u000a					$this.focus();\u000a				})\u000a		});\u000a	});\u000a\u000a}(window.jQuery);\u000a\u000a;\u000a
p0
.