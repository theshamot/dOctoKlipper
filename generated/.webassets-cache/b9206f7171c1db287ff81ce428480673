V// source: js/app/viewmodels/slicing.js\u000a$(function () {\u000a    function SlicingViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.printerProfiles = parameters[1];\u000a        self.printerState = parameters[2];\u000a        self.access = parameters[3];\u000a\u000a        self.file = ko.observable(undefined);\u000a        self.target = undefined;\u000a        self.path = undefined;\u000a        self.data = undefined;\u000a\u000a        self.defaultSlicer = undefined;\u000a        self.defaultProfile = undefined;\u000a\u000a        self.destinationFilename = ko.observable();\u000a        self.gcodeFilename = self.destinationFilename; // TODO: for backwards compatibility, mark deprecated ASAP\u000a\u000a        self.title = ko.observable();\u000a        self.slicer = ko.observable();\u000a        self.slicers = ko.observableArray();\u000a        self.profile = ko.observable();\u000a        self.profiles = ko.observableArray();\u000a        self.printerProfile = ko.observable();\u000a\u000a        self.slicerSameDevice = ko.observable();\u000a\u000a        self.allViewModels = undefined;\u000a\u000a        self.slicersForFile = function (file) {\u000a            if (file === undefined) {\u000a                return [];\u000a            }\u000a\u000a            return _.filter(self.configuredSlicers(), function (slicer) {\u000a                return _.any(slicer.sourceExtensions, function (extension) {\u000a                    return _.endsWith(file.toLowerCase(), "." + extension.toLowerCase());\u000a                });\u000a            });\u000a        };\u000a\u000a        self.profilesForSlicer = function (key) {\u000a            if (key == undefined) {\u000a                key = self.slicer();\u000a            }\u000a            if (key == undefined || !self.data.hasOwnProperty(key)) {\u000a                return;\u000a            }\u000a            var slicer = self.data[key];\u000a\u000a            var selectedProfile = undefined;\u000a            self.profiles.removeAll();\u000a            _.each(_.values(slicer.profiles), function (profile) {\u000a                var name = profile.displayName;\u000a                if (name == undefined) {\u000a                    name = profile.key;\u000a                }\u000a\u000a                if (profile.default) {\u000a                    selectedProfile = profile.key;\u000a                }\u000a\u000a                self.profiles.push({\u000a                    key: profile.key,\u000a                    name: name\u000a                });\u000a            });\u000a\u000a            self.profile(selectedProfile);\u000a            self.defaultProfile = selectedProfile;\u000a        };\u000a\u000a        self.resetProfiles = function () {\u000a            self.profiles.removeAll();\u000a            self.profile(undefined);\u000a        };\u000a\u000a        self.metadataForSlicer = function (key) {\u000a            if (key == undefined || !self.data.hasOwnProperty(key)) {\u000a                return;\u000a            }\u000a\u000a            var slicer = self.data[key];\u000a            self.slicerSameDevice(slicer.sameDevice);\u000a        };\u000a\u000a        self.resetMetadata = function () {\u000a            self.slicerSameDevice(true);\u000a        };\u000a\u000a        self.configuredSlicers = ko.pureComputed(function () {\u000a            return _.filter(self.slicers(), function (slicer) {\u000a                return slicer.configured;\u000a            });\u000a        });\u000a\u000a        self.matchingSlicers = ko.computed(function () {\u000a            var slicers = self.slicersForFile(self.file());\u000a\u000a            var containsSlicer = function (key) {\u000a                return _.any(slicers, function (slicer) {\u000a                    return slicer.key == key;\u000a                });\u000a            };\u000a\u000a            var current = self.slicer();\u000a            if (!containsSlicer(current)) {\u000a                if (\u000a                    self.defaultSlicer !== undefined &&\u000a                    containsSlicer(self.defaultSlicer)\u000a                ) {\u000a                    self.slicer(self.defaultSlicer);\u000a                } else {\u000a                    self.slicer(undefined);\u000a                    self.resetProfiles();\u000a                }\u000a            } else {\u000a                self.profilesForSlicer(self.slicer());\u000a            }\u000a\u000a            return slicers;\u000a        });\u000a\u000a        self.afterSlicingOptions = [\u000a            {value: "none", text: gettext("Do nothing")},\u000a            {value: "select", text: gettext("Select for printing")},\u000a            {value: "print", text: gettext("Start printing")}\u000a        ];\u000a        self.afterSlicing = ko.observable("none");\u000a\u000a        self.show = function (target, file, force, path, options) {\u000a            options = options || {};\u000a\u000a            if (!self.enableSlicingDialog() && !force) {\u000a                return;\u000a            }\u000a\u000a            var filename = file;\u000a            if (filename.lastIndexOf("/") != 0) {\u000a                path = path || filename.substr(0, filename.lastIndexOf("/"));\u000a                filename = filename.substr(filename.lastIndexOf("/") + 1);\u000a            }\u000a\u000a            var display = options.display || filename;\u000a            var destination = display.substr(0, display.lastIndexOf("."));\u000a\u000a            self.requestData();\u000a            self.target = target;\u000a            self.file(file);\u000a            self.path = path;\u000a            self.title(\u000a                _.sprintf(gettext("Slicing %(filename)s"), {filename: _.escape(display)})\u000a            );\u000a            self.destinationFilename(destination);\u000a            self.printerProfile(self.printerProfiles.currentProfile());\u000a            self.afterSlicing("none");\u000a\u000a            $("#slicing_configuration_dialog").modal("show");\u000a        };\u000a\u000a        self.slicer.subscribe(function (newValue) {\u000a            if (newValue === undefined) {\u000a                self.resetProfiles();\u000a                self.resetMetadata();\u000a            } else {\u000a                self.profilesForSlicer(newValue);\u000a                self.metadataForSlicer(newValue);\u000a            }\u000a        });\u000a\u000a        self.enableSlicingDialog = ko.pureComputed(function () {\u000a            return self.configuredSlicers().length > 0;\u000a        });\u000a\u000a        self.enableSlicingDialogForFile = function (file) {\u000a            return self.slicersForFile(file).length > 0;\u000a        };\u000a\u000a        self.enableSliceButton = ko.pureComputed(function () {\u000a            return (\u000a                self.destinationFilename() != undefined &&\u000a                self.destinationFilename().trim() != "" &&\u000a                self.slicer() != undefined &&\u000a                self.profile() != undefined &&\u000a                (!(self.printerState.isPrinting() || self.printerState.isPaused()) ||\u000a                    !self.slicerSameDevice())\u000a            );\u000a        });\u000a\u000a        self.sliceButtonTooltip = ko.pureComputed(function () {\u000a            if (!self.enableSliceButton()) {\u000a                if (\u000a                    (self.printerState.isPrinting() || self.printerState.isPaused()) &&\u000a                    self.slicerSameDevice()\u000a                ) {\u000a                    return gettext("Cannot slice on the same device while printing");\u000a                } else {\u000a                    return gettext("Cannot slice, not all parameters specified");\u000a                }\u000a            } else {\u000a                return gettext("Start the slicing process");\u000a            }\u000a        });\u000a\u000a        self.requestData = function () {\u000a            if (!self.loginState.hasPermission(self.access.permissions.SLICE)) {\u000a                return;\u000a            }\u000a\u000a            return OctoPrint.slicing.listAllSlicersAndProfiles().done(function (data) {\u000a                self.fromResponse(data);\u000a            });\u000a        };\u000a\u000a        self.destinationExtension = ko.pureComputed(function () {\u000a            var fallback = "???";\u000a            if (self.slicer() === undefined) {\u000a                return fallback;\u000a            }\u000a            var slicer = self.data[self.slicer()];\u000a            if (slicer === undefined) {\u000a                return fallback;\u000a            }\u000a            var extensions = slicer.extensions;\u000a            if (extensions === undefined) {\u000a                return fallback;\u000a            }\u000a            var destinationExtensions = extensions.destination;\u000a            if (destinationExtensions === undefined || !destinationExtensions.length) {\u000a                return fallback;\u000a            }\u000a\u000a            return destinationExtensions[0] || fallback;\u000a        });\u000a\u000a        self.fromResponse = function (data) {\u000a            self.data = data;\u000a\u000a            var selectedSlicer = undefined;\u000a            self.slicers.removeAll();\u000a            _.each(_.values(data), function (slicer) {\u000a                var name = slicer.displayName;\u000a                if (name == undefined) {\u000a                    name = slicer.key;\u000a                }\u000a\u000a                if (slicer.default && slicer.configured) {\u000a                    selectedSlicer = slicer.key;\u000a                }\u000a\u000a                var props = {\u000a                    key: slicer.key,\u000a                    name: name,\u000a                    configured: slicer.configured,\u000a                    sourceExtensions: slicer.extensions.source,\u000a                    destinationExtensions: slicer.extensions.destination,\u000a                    sameDevice: slicer.sameDevice\u000a                };\u000a                self.slicers.push(props);\u000a            });\u000a\u000a            self.defaultSlicer = selectedSlicer;\u000a\u000a            if (self.allViewModels) {\u000a                callViewModels(self.allViewModels, "onSlicingData", [data]);\u000a            }\u000a        };\u000a\u000a        self.slice = function () {\u000a            if (!self.enableSliceButton()) {\u000a                return;\u000a            }\u000a\u000a            var destinationFilename = self.destinationFilename();\u000a\u000a            var destinationExtensions =\u000a                self.data[self.slicer()] &&\u000a                self.data[self.slicer()].extensions &&\u000a                self.data[self.slicer()].extensions.destination\u000a                    ? self.data[self.slicer()].extensions.destination\u000a                    : ["???"];\u000a            if (\u000a                !_.any(destinationExtensions, function (extension) {\u000a                    return _.endsWith(\u000a                        destinationFilename.toLowerCase(),\u000a                        "." + extension.toLowerCase()\u000a                    );\u000a                })\u000a            ) {\u000a                destinationFilename =\u000a                    destinationFilename + "." + destinationExtensions[0];\u000a            }\u000a\u000a            var data = {\u000a                slicer: self.slicer(),\u000a                profile: self.profile(),\u000a                printerProfile: self.printerProfile(),\u000a                destination: destinationFilename\u000a            };\u000a\u000a            if (self.path != undefined) {\u000a                data["path"] = self.path;\u000a            }\u000a\u000a            if (self.afterSlicing() == "print") {\u000a                data["print"] = true;\u000a            } else if (self.afterSlicing() == "select") {\u000a                data["select"] = true;\u000a            }\u000a\u000a            OctoPrint.files.slice(self.target, self.file(), data).done(function () {\u000a                $("#slicing_configuration_dialog").modal("hide");\u000a\u000a                self.destinationFilename(undefined);\u000a                self.slicer(self.defaultSlicer);\u000a                self.profile(self.defaultProfile);\u000a            });\u000a        };\u000a\u000a        self._sanitize = function (name) {\u000a            return name.replace(/[^a-zA-Z0-9\u005c-_\u005c.\u005c(\u005c) ]/g, "").replace(/ /g, "_");\u000a        };\u000a\u000a        self.onUserPermissionsChanged = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventSettingsUpdated = function (payload) {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onAllBound = function (allViewModels) {\u000a            self.allViewModels = allViewModels;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: SlicingViewModel,\u000a        dependencies: [\u000a            "loginStateViewModel",\u000a            "printerProfilesViewModel",\u000a            "printerStateViewModel",\u000a            "accessViewModel"\u000a        ],\u000a        elements: ["#slicing_configuration_dialog"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.