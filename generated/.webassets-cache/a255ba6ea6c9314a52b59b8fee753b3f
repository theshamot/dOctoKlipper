V// source: plugin/appkeys/js/appkeys.js\u000a$(function () {\u000a    function AppKeysDialogViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.dialog = undefined;\u000a\u000a        self.onStartup = function () {\u000a            self.dialog = $("#plugin_appkeys_keygenerated");\u000a        };\u000a\u000a        self.showDialog = function (title, data) {\u000a            if (self.dialog === undefined) return;\u000a\u000a            var qrcode = {\u000a                text: data.api_key,\u000a                size: 180,\u000a                fill: "#000",\u000a                background: null,\u000a                label: "",\u000a                fontname: "sans",\u000a                fontcolor: "#000",\u000a                radius: 0,\u000a                ecLevel: "L"\u000a            };\u000a\u000a            self.dialog.find("#plugin_appkeys_keygenerated_title").text(title);\u000a            self.dialog.find("#plugin_appkeys_keygenerated_user").text(data.user_id);\u000a            self.dialog.find("#plugin_appkeys_keygenerated_app").text(data.app_id);\u000a            self.dialog.find("#plugin_appkeys_keygenerated_key_text").text(data.api_key);\u000a            self.dialog\u000a                .find("#plugin_appkeys_keygenerated_key_copy")\u000a                .off()\u000a                .click(function () {\u000a                    copyToClipboard(data.api_key);\u000a                });\u000a            self.dialog\u000a                .find("#plugin_appkeys_keygenerated_key_qrcode")\u000a                .empty()\u000a                .qrcode(qrcode);\u000a\u000a            self.dialog.modal("show");\u000a        };\u000a    }\u000a\u000a    function UserAppKeysViewModel(parameters) {\u000a        var self = this;\u000a        self.dialog = parameters[0];\u000a        self.loginState = parameters[1];\u000a\u000a        self.keys = new ItemListHelper(\u000a            "plugin.appkeys.userkeys",\u000a            {\u000a                app: function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["app_id"].toLowerCase() < b["app_id"].toLowerCase()) return -1;\u000a                    if (a["app_id"].toLowerCase() > b["app_id"].toLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "app",\u000a            [],\u000a            [],\u000a            5\u000a        );\u000a        self.pending = {};\u000a        self.openRequests = {};\u000a\u000a        self.editorApp = ko.observable();\u000a\u000a        self.requestData = function () {\u000a            OctoPrint.plugins.appkeys.getKeys().done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            self.keys.updateItems(response.keys);\u000a            self.pending = response.pending;\u000a            _.each(self.pending, function (data, token) {\u000a                self.openRequests[token] = self.promptForAccess(data.app_id, token);\u000a            });\u000a        };\u000a\u000a        self.generateKey = function () {\u000a            return OctoPrint.plugins.appkeys\u000a                .generateKey(self.editorApp())\u000a                .done(self.requestData)\u000a                .done(function () {\u000a                    self.editorApp("");\u000a                });\u000a        };\u000a\u000a        self.revokeKey = function (key) {\u000a            var perform = function () {\u000a                OctoPrint.plugins.appkeys.revokeKey(key).done(self.requestData);\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext('You are about to revoke the application key "%(key)s".'),\u000a                    {key: _.escape(key)}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.allowApp = function (token) {\u000a            return OctoPrint.plugins.appkeys.decide(token, true).done(self.requestData);\u000a        };\u000a\u000a        self.denyApp = function (token) {\u000a            return OctoPrint.plugins.appkeys.decide(token, false).done(self.requestData);\u000a        };\u000a\u000a        self.promptForAccess = function (app, token) {\u000a            var message = gettext(\u000a                '"<strong>%(app)s</strong>" has requested access to control OctoPrint through the API.'\u000a            );\u000a            message = _.sprintf(message, {app: _.escape(app)});\u000a            message =\u000a                "<p>" +\u000a                message +\u000a                "</p><p>" +\u000a                gettext(\u000a                    "Do you want to allow access to this application with your user account?"\u000a                ) +\u000a                "</p>";\u000a            return new PNotify({\u000a                title: gettext("Access Request"),\u000a                text: message,\u000a                hide: false,\u000a                icon: "fa fa-key",\u000a                confirm: {\u000a                    confirm: true,\u000a                    buttons: [\u000a                        {\u000a                            text: gettext("Allow"),\u000a                            click: function (notice) {\u000a                                self.allowApp(token);\u000a                                notice.remove();\u000a                            }\u000a                        },\u000a                        {\u000a                            text: gettext("Deny"),\u000a                            click: function (notice) {\u000a                                self.denyApp(token);\u000a                                notice.remove();\u000a                            }\u000a                        }\u000a                    ]\u000a                },\u000a                buttons: {\u000a                    sticker: false,\u000a                    closer: false\u000a                }\u000a            });\u000a        };\u000a\u000a        self.onUserSettingsShown = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onUserLoggedIn = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a            if (plugin !== "appkeys") {\u000a                return;\u000a            }\u000a\u000a            var app, token, user;\u000a\u000a            if (data.type === "request_access" && self.loginState.isUser()) {\u000a                app = data.app_name;\u000a                token = data.user_token;\u000a                user = data.user_id;\u000a\u000a                if (user && user !== self.loginState.username()) {\u000a                    return;\u000a                }\u000a\u000a                if (self.pending[token] !== undefined) {\u000a                    return;\u000a                }\u000a\u000a                self.openRequests[token] = self.promptForAccess(app, token);\u000a            } else if (data.type === "end_request") {\u000a                token = data.user_token;\u000a\u000a                if (self.openRequests[token] !== undefined) {\u000a                    // another instance responded to the access request before the current user did\u000a                    if (self.openRequests[token].state !== "closed") {\u000a                        self.openRequests[token].remove();\u000a                    }\u000a                    delete self.openRequests[token];\u000a                }\u000a            }\u000a        };\u000a    }\u000a\u000a    function AllAppKeysViewModel(parameters) {\u000a        var self = this;\u000a        self.dialog = parameters[0];\u000a        self.loginState = parameters[1];\u000a        self.access = parameters[2];\u000a\u000a        self.keys = new ItemListHelper(\u000a            "plugin.appkeys.allkeys",\u000a            {\u000a                user_app: function (a, b) {\u000a                    // sorts ascending, first by user, then by app\u000a                    if (a["user_id"] > b["user_id"]) return 1;\u000a                    if (a["user_id"] < b["user_id"]) return -1;\u000a\u000a                    if (a["app_id"].toLowerCase() > b["app_id"].toLowerCase()) return 1;\u000a                    if (a["app_id"].toLowerCase() < b["app_id"].toLowerCase()) return -1;\u000a\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "user_app",\u000a            [],\u000a            [],\u000a            10\u000a        );\u000a        self.users = ko.observableArray([]);\u000a        self.apps = ko.observableArray([]);\u000a\u000a        self.editorApp = ko.observable();\u000a        self.editorUser = ko.observable();\u000a\u000a        self.markedForDeletion = ko.observableArray([]);\u000a\u000a        self.onSettingsShown = function () {\u000a            self.requestData();\u000a            self.editorUser(self.loginState.username());\u000a            self.editorApp("");\u000a        };\u000a\u000a        self.onUserLoggedIn = function () {\u000a            self.requestData();\u000a            self.editorUser(self.loginState.username());\u000a            self.editorApp("");\u000a        };\u000a\u000a        self.requestData = function () {\u000a            OctoPrint.plugins.appkeys.getAllKeys().done(self.fromResponse);\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            self.keys.updateItems(response.keys);\u000a\u000a            var users = [];\u000a            var apps = [];\u000a            _.each(response.keys, function (key) {\u000a                users.push(key.user_id);\u000a                apps.push(key.app_id.toLowerCase());\u000a            });\u000a\u000a            users = _.uniq(users);\u000a            users.sort();\u000a            self.users(users);\u000a\u000a            apps = _.uniq(apps);\u000a            apps.sort();\u000a            self.apps(apps);\u000a        };\u000a\u000a        self.generateKey = function () {\u000a            return OctoPrint.plugins.appkeys\u000a                .generateKeyForUser(self.editorUser(), self.editorApp())\u000a                .done(self.requestData)\u000a                .done(function () {\u000a                    self.editorUser(self.loginState.username());\u000a                    self.editorApp("");\u000a                })\u000a                .done(function (data) {\u000a                    self.dialog.showDialog(gettext("New key generated!"), data);\u000a                });\u000a        };\u000a\u000a        self.revokeKey = function (key) {\u000a            var perform = function () {\u000a                OctoPrint.plugins.appkeys.revokeKey(key).done(self.requestData);\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext('You are about to revoke the application key "%(key)s".'),\u000a                    {key: _.escape(key)}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.revokeMarked = function () {\u000a            var perform = function () {\u000a                self._bulkRevoke(self.markedForDeletion()).done(function () {\u000a                    self.markedForDeletion.removeAll();\u000a                });\u000a            };\u000a\u000a            showConfirmationDialog(\u000a                _.sprintf(\u000a                    gettext("You are about to revoke %(count)d application keys."),\u000a                    {count: self.markedForDeletion().length}\u000a                ),\u000a                perform\u000a            );\u000a        };\u000a\u000a        self.markAllOnPageForDeletion = function () {\u000a            self.markedForDeletion(\u000a                _.uniq(\u000a                    self\u000a                        .markedForDeletion()\u000a                        .concat(_.map(self.keys.paginatedItems(), "api_key"))\u000a                )\u000a            );\u000a        };\u000a\u000a        self.markAllForDeletion = function () {\u000a            self.markedForDeletion(_.uniq(_.map(self.keys.allItems, "api_key")));\u000a        };\u000a\u000a        self.markAllByUserForDeletion = function (user) {\u000a            self.markAllByFilterForDeletion(function (e) {\u000a                return e.user_id === user;\u000a            });\u000a        };\u000a\u000a        self.markAllByAppForDeletion = function (app) {\u000a            self.markAllByFilterForDeletion(function (e) {\u000a                return e.app_id.toLowerCase() === app;\u000a            });\u000a        };\u000a\u000a        self.markAllByFilterForDeletion = function (filter) {\u000a            self.markedForDeletion(\u000a                _.uniq(\u000a                    self\u000a                        .markedForDeletion()\u000a                        .concat(_.map(_.filter(self.keys.allItems, filter), "api_key"))\u000a                )\u000a            );\u000a        };\u000a\u000a        self.clearMarked = function () {\u000a            self.markedForDeletion.removeAll();\u000a        };\u000a\u000a        self._bulkRevoke = function (keys) {\u000a            var title, message, handler;\u000a\u000a            title = gettext("Revoking application keys");\u000a            message = _.sprintf(gettext("Revoking %(count)d application keys..."), {\u000a                count: keys.length\u000a            });\u000a            handler = function (key) {\u000a                return OctoPrint.plugins.appkeys\u000a                    .revokeKey(key)\u000a                    .done(function () {\u000a                        deferred.notify(\u000a                            _.sprintf(gettext("Revoked %(key)s..."), {\u000a                                key: _.escape(key)\u000a                            }),\u000a                            true\u000a                        );\u000a                    })\u000a                    .fail(function (jqXHR) {\u000a                        var short = _.sprintf(\u000a                            gettext("Revocation of %(key)s failed, continuing..."),\u000a                            {key: _.escape(key)}\u000a                        );\u000a                        var long = _.sprintf(\u000a                            gettext("Deletion of %(key)s failed: %(error)s"),\u000a                            {key: _.escape(key), error: _.escape(jqXHR.responseText)}\u000a                        );\u000a                        deferred.notify(short, long, false);\u000a                    });\u000a            };\u000a\u000a            var deferred = $.Deferred();\u000a\u000a            var promise = deferred.promise();\u000a\u000a            var options = {\u000a                title: title,\u000a                message: message,\u000a                max: keys.length,\u000a                output: true\u000a            };\u000a            showProgressModal(options, promise);\u000a\u000a            var requests = [];\u000a            _.each(keys, function (key) {\u000a                var request = handler(key);\u000a                requests.push(request);\u000a            });\u000a            $.when.apply($, _.map(requests, wrapPromiseWithAlways)).done(function () {\u000a                deferred.resolve();\u000a                self.requestData();\u000a            });\u000a\u000a            return promise;\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([AppKeysDialogViewModel, [], []]);\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        UserAppKeysViewModel,\u000a        ["appKeysDialogViewModel", "loginStateViewModel"],\u000a        ["#usersettings_plugin_appkeys"]\u000a    ]);\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        AllAppKeysViewModel,\u000a        ["appKeysDialogViewModel", "loginStateViewModel", "accessViewModel"],\u000a        ["#settings_plugin_appkeys"]\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.