V// source: plugin/klipper/js/klipper.js\u000a// <Octoprint Klipper Plugin>\u000a\u000a// This program is free software: you can redistribute it and/or modify\u000a// it under the terms of the GNU Affero General Public License as\u000a// published by the Free Software Foundation, either version 3 of the\u000a// License, or (at your option) any later version.\u000a \u000a// This program is distributed in the hope that it will be useful,\u000a// but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a// GNU Affero General Public License for more details.\u000a \u000a// You should have received a copy of the GNU Affero General Public License\u000a// along with this program.  If not, see <https://www.gnu.org/licenses/>.\u000a\u000a$(function() {\u000a    function KlipperViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settings = parameters[0];\u000a        self.loginState = parameters[1];\u000a        self.connectionState = parameters[2];\u000a        self.levelingViewModel = parameters[3];\u000a        self.paramMacroViewModel = parameters[4];\u000a        \u000a        self.shortStatus = ko.observable();\u000a        self.logMessages = ko.observableArray();\u000a        \u000a        self.showLevelingDialog = function() {\u000a           var dialog = $("#klipper_leveling_dialog");\u000a           dialog.modal({\u000a              show: 'true',\u000a              backdrop: 'static',\u000a              keyboard: false\u000a           });\u000a           self.levelingViewModel.initView();\u000a        }\u000a        \u000a        self.showPidTuningDialog = function() {\u000a           var dialog = $("#klipper_pid_tuning_dialog");\u000a           dialog.modal({\u000a              show: 'true',\u000a              backdrop: 'static',\u000a              keyboard: false\u000a           });\u000a        }\u000a        \u000a        self.showOffsetDialog = function() {\u000a           var dialog = $("#klipper_offset_dialog");\u000a           dialog.modal({\u000a              show: 'true',\u000a              backdrop: 'static'\u000a           });\u000a        }\u000a        \u000a        self.showGraphDialog = function() {\u000a           var dialog = $("#klipper_graph_dialog");\u000a           dialog.modal({\u000a              show: 'true',\u000a              minHeight: "500px",\u000a              maxHeight: "600px"\u000a           });\u000a        }\u000a        \u000a        self.executeMacro = function(macro) {\u000a           var paramObjRegex = /{(.*?)}/g;\u000a           \u000a           if (macro.macro().match(paramObjRegex) == null) {\u000a              OctoPrint.control.sendGcode(\u000a                 // Use .split to create an array of strings which is sent to \u000a                 // OctoPrint.control.sendGcode instead of a single string.\u000a                 macro.macro().split(/\u005cr\u005cn|\u005cr|\u005cn/)\u000a              );\u000a           } else {\u000a              self.paramMacroViewModel.process(macro);\u000a              \u000a              var dialog = $("#klipper_macro_dialog");\u000a              dialog.modal({\u000a                 show: 'true',\u000a                 backdrop: 'static'\u000a              });\u000a           }\u000a        }\u000a\u000a        self.navbarClicked = function() {\u000a            $("#tab_plugin_klipper_main_link").find("a").click();\u000a        }\u000a\u000a        self.onGetStatus = function() {\u000a           OctoPrint.control.sendGcode("Status")\u000a        }\u000a        \u000a        self.onRestartFirmware = function() {\u000a           OctoPrint.control.sendGcode("FIRMWARE_RESTART")\u000a        };\u000a        \u000a        self.onRestartHost = function() {\u000a           OctoPrint.control.sendGcode("RESTART")\u000a        };\u000a        \u000a        self.onAfterBinding = function() {\u000a           self.connectionState.selectedPort(self.settings.settings.plugins.klipper.connection.port());\u000a        }\u000a        \u000a        self.onDataUpdaterPluginMessage = function(plugin, message) {\u000a           if(plugin == "klipper") {\u000a              if(message["type"] == "status") {\u000a                 self.shortStatus(message["payload"]);\u000a              } else {\u000a                 self.logMessage(message["time"], message["subtype"], message["payload"]);\u000a              }\u000a           }\u000a        }\u000a\u000a        self.logMessage = function(timestamp, type, message) {\u000a           self.logMessages.push({\u000a              time: timestamp,\u000a              type: type,\u000a              msg: message.replace(/\u005cn/gi, "<br>")}\u000a           );\u000a        }\u000a        \u000a        self.onClearLog = function() {\u000a           self.logMessages.removeAll();\u000a        };\u000a        \u000a        self.isActive = function() {\u000a           return self.connectionState.isOperational() && self.loginState.isUser();\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: KlipperViewModel,\u000a        dependencies: [\u000a           "settingsViewModel",\u000a           "loginStateViewModel",\u000a           "connectionViewModel",\u000a           "klipperLevelingViewModel",\u000a           "klipperMacroDialogViewModel"\u000a        ],\u000a        elements: ["#tab_plugin_klipper_main", "#sidebar_plugin_klipper", "#navbar_plugin_klipper"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.