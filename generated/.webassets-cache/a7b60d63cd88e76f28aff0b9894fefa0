V// source: js/app/viewmodels/access.js\u000a$(function () {\u000a    function AccessViewModel(parameters) {\u000a        var access = this;\u000a\u000a        access.loginState = parameters[0];\u000a\u000a        var GROUP_ADMINS = "admins";\u000a        var GROUP_GUESTS = "guests";\u000a\u000a        //~~ Users ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u000a\u000a        access.users = (function () {\u000a            var self = {};\u000a            // initialize list helper\u000a            self.listHelper = new ItemListHelper(\u000a                "users",\u000a                {\u000a                    name: function (a, b) {\u000a                        // sorts ascending\u000a                        if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                            return -1;\u000a                        if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                            return 1;\u000a                        return 0;\u000a                    }\u000a                },\u000a                {},\u000a                "name",\u000a                [],\u000a                [],\u000a                CONFIG_USERSPERPAGE\u000a            );\u000a\u000a            self.emptyUser = {name: "", active: false};\u000a\u000a            self.currentUser = ko.observable(self.emptyUser).extend({notify: "always"});\u000a\u000a            self.editor = {\u000a                name: ko.observable(undefined),\u000a                groups: ko.observableArray([]),\u000a                permissions: ko.observableArray([]),\u000a                password: ko.observable(undefined),\u000a                repeatedPassword: ko.observable(undefined),\u000a                passwordMismatch: ko.pureComputed(function () {\u000a                    return self.editor.password() !== self.editor.repeatedPassword();\u000a                }),\u000a                apikey: ko.observable(undefined),\u000a                active: ko.observable(undefined),\u000a                permissionSelectable: function (permission) {\u000a                    return true;\u000a                },\u000a                permissionSelected: function (permission) {\u000a                    var index = self.editor.permissions().indexOf(permission);\u000a                    return index >= 0;\u000a                },\u000a                togglePermission: function (permission) {\u000a                    var permissions = self.editor.permissions();\u000a                    var index = permissions.indexOf(permission);\u000a                    if (index < 0) {\u000a                        permissions.push(permission);\u000a                    } else {\u000a                        permissions.splice(index, 1);\u000a                    }\u000a                    self.editor.permissions(permissions);\u000a                },\u000a                groupSelected: function (group) {\u000a                    var index = self.editor.groups().indexOf(group);\u000a                    return index >= 0;\u000a                },\u000a                toggleGroup: function (group) {\u000a                    var groups = self.editor.groups();\u000a                    var index = groups.indexOf(group);\u000a                    if (index < 0) {\u000a                        groups.push(group);\u000a                    } else {\u000a                        groups.splice(index, 1);\u000a                    }\u000a                    self.editor.groups(groups);\u000a                },\u000a                joinedGroupPermissions: function (group) {\u000a                    return access.permissionList(group);\u000a                },\u000a                header: ko.observable(undefined),\u000a                new: ko.observable(true),\u000a                confirm: undefined,\u000a                valid: ko.pureComputed(function () {\u000a                    return (\u000a                        self.editor.name() &&\u000a                        self.editor.name().trim() &&\u000a                        (!self.editor.new() ||\u000a                            (self.editor.password() &&\u000a                                self.editor.password().trim() &&\u000a                                !self.editor.passwordMismatch()))\u000a                    );\u000a                }),\u000a                dangerRestricted: function () {\u000a                    return false;\u000a                },\u000a                dangerRestrictedText: gettext(\u000a                    "This user may not have dangerous permissions."\u000a                )\u000a            };\u000a\u000a            self.userEditorDialog = undefined;\u000a            self.changePasswordDialog = undefined;\u000a\u000a            self.currentUser.subscribe(function (newValue) {\u000a                if (newValue === undefined) {\u000a                    self.editor.name(undefined);\u000a                    self.editor.groups(access.groups.defaults.slice(0));\u000a                    self.editor.permissions([]);\u000a                    self.editor.active(true);\u000a                    self.editor.apikey(undefined);\u000a                    self.editor.header(gettext("Add user"));\u000a                    self.editor.new(true);\u000a                    self.editor.confirm = self.confirmAddUser;\u000a                } else {\u000a                    self.editor.name(newValue.name);\u000a                    self.editor.groups(newValue.groups.slice(0));\u000a                    self.editor.permissions(newValue.permissions.slice(0));\u000a                    self.editor.active(newValue.active);\u000a                    self.editor.apikey(newValue.apikey);\u000a                    self.editor.header(\u000a                        _.sprintf(gettext('Edit user "%(name)s"'), {name: newValue.name})\u000a                    );\u000a                    self.editor.new(false);\u000a                    self.editor.confirm = self.confirmEditUser;\u000a                }\u000a                self.editor.password(undefined);\u000a                self.editor.repeatedPassword(undefined);\u000a            });\u000a\u000a            self.requestData = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN)) return;\u000a\u000a                return OctoPrint.access.users.list().done(self.fromResponse);\u000a            };\u000a\u000a            self.fromResponse = function (response) {\u000a                self.listHelper.updateItems(response.users);\u000a            };\u000a\u000a            self.showAddUserDialog = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                self.currentUser(undefined);\u000a\u000a                $('ul.nav-pills a[data-toggle="tab"]:first', self.userEditorDialog).tab(\u000a                    "show"\u000a                );\u000a                self.userEditorDialog\u000a                    .modal({\u000a                        minHeight: function () {\u000a                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\u000a                        }\u000a                    })\u000a                    .css({\u000a                        "width": "auto",\u000a                        "margin-left": function () {\u000a                            return -($(this).width() / 2);\u000a                        }\u000a                    });\u000a            };\u000a\u000a            self.confirmAddUser = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                var user = {\u000a                    name: self.editor.name(),\u000a                    password: self.editor.password(),\u000a                    groups: self.editor.groups(),\u000a                    permissions: self.editor.permissions(),\u000a                    active: self.editor.active()\u000a                };\u000a\u000a                self.addUser(user).done(function () {\u000a                    // close dialog\u000a                    self.currentUser(undefined);\u000a                    self.userEditorDialog.modal("hide");\u000a                });\u000a            };\u000a\u000a            self.showEditUserDialog = function (user) {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                var process = function (user) {\u000a                    self.currentUser(user);\u000a\u000a                    $(\u000a                        'ul.nav-pills a[data-toggle="tab"]:first',\u000a                        self.userEditorDialog\u000a                    ).tab("show");\u000a                    self.userEditorDialog\u000a                        .modal({\u000a                            minHeight: function () {\u000a                                return Math.max(\u000a                                    $.fn.modal.defaults.maxHeight() - 80,\u000a                                    250\u000a                                );\u000a                            }\u000a                        })\u000a                        .css({\u000a                            "width": "auto",\u000a                            "margin-left": function () {\u000a                                return -($(this).width() / 2);\u000a                            }\u000a                        });\u000a                };\u000a\u000a                OctoPrint.users\u000a                    .get(user.name)\u000a                    .done(function (data) {\u000a                        process(data);\u000a                    })\u000a                    .fail(function () {\u000a                        log.warn(\u000a                            "Could not fetch current user data, proceeding with client side data copy"\u000a                        );\u000a                        process(user);\u000a                    });\u000a            };\u000a\u000a            self.confirmEditUser = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                var user = self.currentUser();\u000a                user.active = self.editor.active();\u000a                user.groups = self.editor.groups();\u000a                user.permissions = self.editor.permissions();\u000a\u000a                self.updateUser(user).done(function () {\u000a                    // close dialog\u000a                    self.currentUser(undefined);\u000a                    self.userEditorDialog.modal("hide");\u000a                });\u000a            };\u000a\u000a            self.showChangePasswordDialog = function (user) {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                self.currentUser(user);\u000a                self.changePasswordDialog.modal("show");\u000a            };\u000a\u000a            self.confirmChangePassword = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                self.updatePassword(self.currentUser().name, self.editor.password()).done(\u000a                    function () {\u000a                        // close dialog\u000a                        self.currentUser(undefined);\u000a                        self.changePasswordDialog.modal("hide");\u000a                    }\u000a                );\u000a            };\u000a\u000a            self.confirmGenerateApikey = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                self.generateApikey(self.currentUser().name).done(function (response) {\u000a                    self._updateApikey(response.apikey);\u000a                });\u000a            };\u000a\u000a            self.copyApikey = function () {\u000a                copyToClipboard(self.editor.apikey());\u000a            };\u000a\u000a            self._updateApikey = function (apikey) {\u000a                self.editor.apikey(apikey);\u000a                self.requestData();\u000a            };\u000a\u000a            self.confirmDeleteApikey = function () {\u000a                if (!CONFIG_ACCESS_CONTROL) return;\u000a\u000a                self.deleteApikey(self.currentUser().name).done(function () {\u000a                    self._updateApikey(undefined);\u000a                });\u000a            };\u000a\u000a            //~~ Framework\u000a\u000a            self.onStartup = function () {\u000a                self.userEditorDialog = $("#settings-usersEditorDialog");\u000a                self.changePasswordDialog = $("#settings-usersDialogChangePassword");\u000a            };\u000a\u000a            //~~ API calls\u000a\u000a            self.addUser = function (user) {\u000a                if (!user) {\u000a                    throw OctoPrint.InvalidArgumentError("user must be set");\u000a                }\u000a                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))\u000a                    return $.Deferred()\u000a                        .reject("You are not authorized to perform this action")\u000a                        .promise();\u000a\u000a                return OctoPrint.access.users.add(user).done(self.fromResponse);\u000a            };\u000a\u000a            self.removeUser = function (user) {\u000a                if (!user) {\u000a                    throw OctoPrint.InvalidArgumentError("user must be set");\u000a                }\u000a                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))\u000a                    return $.Deferred()\u000a                        .reject("You are not authorized to perform this action")\u000a                        .promise();\u000a\u000a                if (user.name === access.loginState.username()) {\u000a                    // we do not allow to delete ourselves\u000a                    new PNotify({\u000a                        title: gettext("Not possible"),\u000a                        text: gettext("You may not delete your own account."),\u000a                        type: "error"\u000a                    });\u000a                    return $.Deferred()\u000a                        .reject("You may not delete your own account")\u000a                        .promise();\u000a                }\u000a\u000a                showConfirmationDialog({\u000a                    title: gettext("Are you sure?"),\u000a                    message: _.sprintf(\u000a                        gettext('You are about to delete the user "%(name)s".'),\u000a                        {name: user.name}\u000a                    ),\u000a                    proceed: gettext("Delete"),\u000a                    onproceed: function () {\u000a                        OctoPrint.access.users.delete(user.name).done(self.fromResponse);\u000a                    }\u000a                });\u000a            };\u000a\u000a            self.updateUser = function (user) {\u000a                if (!user) {\u000a                    throw OctoPrint.InvalidArgumentError("user must be set");\u000a                }\u000a\u000a                return OctoPrint.access.users\u000a                    .update(\u000a                        user.name,\u000a                        user.active,\u000a                        user.admin,\u000a                        user.permissions,\u000a                        user.groups\u000a                    )\u000a                    .done(self.fromResponse);\u000a            };\u000a\u000a            self.updatePassword = function (username, password) {\u000a                return OctoPrint.access.users.changePassword(username, password);\u000a            };\u000a\u000a            self.generateApikey = function (username) {\u000a                return OctoPrint.access.users.generateApiKey(username).done(function () {\u000a                    self.requestData();\u000a                });\u000a            };\u000a\u000a            self.deleteApikey = function (username) {\u000a                return OctoPrint.access.users.resetApiKey(username);\u000a            };\u000a\u000a            return self;\u000a        })();\u000a\u000a        //~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u000a\u000a        access.groups = (function () {\u000a            var self = {};\u000a            // initialize list helper\u000a            self.listHelper = new ItemListHelper(\u000a                "groups",\u000a                {\u000a                    name: function (a, b) {\u000a                        // sorts ascending\u000a                        if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase())\u000a                            return -1;\u000a                        if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase())\u000a                            return 1;\u000a                        return 0;\u000a                    }\u000a                },\u000a                {},\u000a                "name",\u000a                [],\u000a                [],\u000a                CONFIG_GROUPSPERPAGE\u000a            );\u000a\u000a            self.groupsList = self.listHelper.items; // Alias for easier reference\u000a            self.lookup = {};\u000a            self.defaults = [];\u000a\u000a            self.emptyGroup = {name: ""};\u000a\u000a            self.currentGroup = ko.observable(self.emptyGroup);\u000a\u000a            self.editor = {\u000a                key: ko.observable(undefined),\u000a                name: ko.observable(undefined),\u000a                description: ko.observable(undefined),\u000a                permissions: ko.observableArray([]),\u000a                subgroups: ko.observableArray([]),\u000a                default: ko.observable(false),\u000a                permissionSelectable: function (permission) {\u000a                    // guests may not get dangerous permissions\u000a                    return self.editor.key() !== GROUP_GUESTS || !permission.dangerous;\u000a                },\u000a                permissionSelected: function (permission) {\u000a                    var index = self.editor.permissions().indexOf(permission);\u000a                    return index >= 0;\u000a                },\u000a                togglePermission: function (permission) {\u000a                    var permissions = self.editor.permissions();\u000a                    var index = permissions.indexOf(permission);\u000a                    if (index < 0) {\u000a                        permissions.push(permission);\u000a                    } else {\u000a                        permissions.splice(index, 1);\u000a                    }\u000a                    self.editor.permissions(permissions);\u000a                },\u000a                subgroupSelectable: function (subgroup) {\u000a                    // guests may not get dangerous subgroups\u000a                    return (\u000a                        self.editor.key() !== subgroup.key &&\u000a                        (self.editor.key() !== GROUP_GUESTS || !subgroup.dangerous)\u000a                    );\u000a                },\u000a                subgroupSelected: function (subgroup) {\u000a                    var index = self.editor.subgroups().indexOf(subgroup);\u000a                    return index >= 0;\u000a                },\u000a                toggleSubgroup: function (subgroup) {\u000a                    var subgroups = self.editor.subgroups();\u000a                    var index = subgroups.indexOf(subgroup);\u000a                    if (index < 0) {\u000a                        subgroups.push(subgroup);\u000a                    } else {\u000a                        subgroups.splice(index, 1);\u000a                    }\u000a                    self.editor.subgroups(subgroups);\u000a                },\u000a                joinedGroupPermissions: function (group) {\u000a                    return access.permissionList(group);\u000a                },\u000a                header: ko.observable(undefined),\u000a                new: ko.observable(true),\u000a                confirm: undefined,\u000a                valid: ko.pureComputed(function () {\u000a                    return self.editor.name() && self.editor.name().trim();\u000a                }),\u000a                dangerRestricted: function () {\u000a                    return self.editor.key() === GROUP_GUESTS;\u000a                },\u000a                dangerRestrictedText: gettext(\u000a                    "This group may not have dangerous permissions or subgroups."\u000a                )\u000a            };\u000a\u000a            self.groupEditorDialog = undefined;\u000a\u000a            // used to delete all the groups before registering new ones\u000a            self.groupsList.subscribe(\u000a                function (oldValue) {\u000a                    if (oldValue === undefined || oldValue.length === 0) return;\u000a\u000a                    oldValue.forEach(function (p) {\u000a                        delete self[p.key.toUpperCase()];\u000a                    });\u000a                },\u000a                null,\u000a                "beforeChange"\u000a            );\u000a\u000a            // used to register new groups\u000a            self.groupsList.subscribe(function (newValue) {\u000a                if (newValue === undefined) return;\u000a\u000a                newValue.forEach(function (g) {\u000a                    var needs = [];\u000a                    g.permissions.forEach(function (p) {\u000a                        for (var key in p.needs) {\u000a                            p.needs[key].forEach(function (value) {\u000a                                needs.push(access.permissions.need(key, value));\u000a                            });\u000a                        }\u000a                    });\u000a\u000a                    // if the permission has no need sets do not register it.\u000a                    if (needs.length > 0) {\u000a                        self.registerGroup(g.key.toUpperCase(), needs);\u000a                    }\u000a                });\u000a            });\u000a\u000a            self.registerGroup = function (name, group) {\u000a                Object.defineProperty(self, name, {\u000a                    value: group,\u000a                    enumerable: true,\u000a                    configurable: true\u000a                });\u000a            };\u000a\u000a            self.currentGroup.subscribe(function (newValue) {\u000a                if (newValue === undefined) {\u000a                    // group add\u000a                    self.editor.key(undefined);\u000a                    self.editor.name(undefined);\u000a                    self.editor.description(undefined);\u000a                    self.editor.permissions([]);\u000a                    self.editor.subgroups([]);\u000a                    self.editor.default(false);\u000a                    self.editor.header(gettext("Add group"));\u000a                    self.editor.new(true);\u000a                    self.editor.confirm = self.confirmAddGroup;\u000a                } else {\u000a                    // group update\u000a                    self.editor.key(newValue.key);\u000a                    self.editor.name(newValue.name);\u000a                    self.editor.description(newValue.description);\u000a                    self.editor.permissions(newValue.permissions.slice(0));\u000a                    self.editor.subgroups(newValue.subgroups.slice(0));\u000a                    self.editor.default(newValue.default);\u000a                    self.editor.header(\u000a                        _.sprintf(gettext('Edit group "%(name)s"'), {name: newValue.name})\u000a                    );\u000a                    self.editor.new(false);\u000a                    self.editor.confirm = self.confirmEditGroup;\u000a                }\u000a            });\u000a\u000a            self.requestData = function () {\u000a                return OctoPrint.access.groups.list().done(self.fromResponse);\u000a            };\u000a\u000a            self.fromResponse = function (response) {\u000a                var lookup = {};\u000a                var defaults = [];\u000a                _.each(response.groups, function (group) {\u000a                    lookup[group.key] = group;\u000a                    if (group.default) {\u000a                        defaults.push(group.key);\u000a                    }\u000a                });\u000a                self.lookup = lookup;\u000a                self.defaults = defaults;\u000a                self.listHelper.updateItems(response.groups);\u000a            };\u000a\u000a            self.showAddGroupDialog = function () {\u000a                self.currentGroup(undefined);\u000a                $('ul.nav-pills a[data-toggle="tab"]:first', self.groupEditorDialog).tab(\u000a                    "show"\u000a                );\u000a                self.groupEditorDialog\u000a                    .modal({\u000a                        minHeight: function () {\u000a                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\u000a                        }\u000a                    })\u000a                    .css({\u000a                        "width": "auto",\u000a                        "margin-left": function () {\u000a                            return -($(this).width() / 2);\u000a                        }\u000a                    });\u000a            };\u000a\u000a            self.confirmAddGroup = function () {\u000a                var group = {\u000a                    key: self.editor\u000a                        .name()\u000a                        .toLowerCase()\u000a                        .replace(/[^a-z0-9_ ]/g, "")\u000a                        .replace(/ /g, "_"),\u000a                    name: self.editor.name(),\u000a                    description: self.editor.description(),\u000a                    permissions: self.editor.permissions(),\u000a                    subgroups: self.editor.subgroups(),\u000a                    default: self.editor.default()\u000a                };\u000a\u000a                self.addGroup(group).done(function () {\u000a                    // close dialog\u000a                    self.currentGroup(undefined);\u000a                    self.groupEditorDialog.modal("hide");\u000a                });\u000a            };\u000a\u000a            self.showEditGroupDialog = function (group) {\u000a                if (!group.changeable) return;\u000a\u000a                self.currentGroup(group);\u000a                $('ul.nav-pills a[data-toggle="tab"]:first', self.groupEditorDialog).tab(\u000a                    "show"\u000a                );\u000a                self.groupEditorDialog\u000a                    .modal({\u000a                        minHeight: function () {\u000a                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\u000a                        }\u000a                    })\u000a                    .css({\u000a                        "width": "auto",\u000a                        "margin-left": function () {\u000a                            return -($(this).width() / 2);\u000a                        }\u000a                    });\u000a            };\u000a\u000a            self.confirmEditGroup = function () {\u000a                var group = self.currentGroup();\u000a\u000a                var data = {\u000a                    key: group.key,\u000a                    name: group.name,\u000a                    description: self.editor.description(),\u000a                    permissions: self.editor.permissions(),\u000a                    subgroups: self.editor.subgroups(),\u000a                    default: self.editor.default()\u000a                };\u000a\u000a                self.updateGroup(data).done(function () {\u000a                    // close dialog\u000a                    self.currentGroup(undefined);\u000a                    self.groupEditorDialog.modal("hide");\u000a                });\u000a            };\u000a\u000a            //~~ Framework\u000a\u000a            self.onStartup = function () {\u000a                self.groupEditorDialog = $("#settings-groupsEditorDialog");\u000a            };\u000a\u000a            //~~ API calls\u000a\u000a            self.addGroup = function (group) {\u000a                if (!group) {\u000a                    throw OctoPrint.InvalidArgumentError("group must be set");\u000a                }\u000a\u000a                return OctoPrint.access.groups.add(group).done(self.fromResponse);\u000a            };\u000a\u000a            self.removeGroup = function (group) {\u000a                if (!group) {\u000a                    throw OctoPrint.InvalidArgumentError("group must be set");\u000a                }\u000a\u000a                if (!group.removable) return;\u000a\u000a                showConfirmationDialog({\u000a                    title: gettext("Are you sure?"),\u000a                    message: _.sprintf(\u000a                        gettext('You are about to delete the group "%(name)s".'),\u000a                        {name: group.name}\u000a                    ),\u000a                    proceed: gettext("Delete"),\u000a                    onproceed: function () {\u000a                        OctoPrint.access.groups\u000a                            .delete(group.key)\u000a                            .done(function (response) {\u000a                                self.fromResponse(response);\u000a                                access.users.requestData();\u000a                            });\u000a                    }\u000a                });\u000a            };\u000a\u000a            self.updateGroup = function (group) {\u000a                if (!group) {\u000a                    throw OctoPrint.InvalidArgumentError("group must be set");\u000a                }\u000a\u000a                return OctoPrint.access.groups.update(group).done(self.fromResponse);\u000a            };\u000a\u000a            return self;\u000a        })();\u000a\u000a        //~~ Permissions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u000a\u000a        access.permissions = (function () {\u000a            var self = {};\u000a\u000a            self.need = function (method, value) {\u000a                return {method: method, value: value};\u000a            };\u000a            self.roleNeed = function (value) {\u000a                return self.need("role", value);\u000a            };\u000a\u000a            self.permissionList = ko.observableArray([]);\u000a            self.lookup = {};\u000a\u000a            var registeredPermissions = [];\u000a            var registerPermission = function (key, permission) {\u000a                Object.defineProperty(self, key, {\u000a                    value: permission,\u000a                    enumerable: true,\u000a                    configurable: true\u000a                });\u000a                registeredPermissions.push(key);\u000a            };\u000a            var clearAllRegisteredPermissions = function () {\u000a                _.each(registeredPermissions, function (key) {\u000a                    delete self[key];\u000a                });\u000a                registeredPermissions = [];\u000a            };\u000a\u000a            self.initialize = function () {\u000a                clearAllRegisteredPermissions();\u000a\u000a                var permissionList = [];\u000a                var lookup = {};\u000a                _.each(PERMISSIONS, function (permission) {\u000a                    var needs = [];\u000a                    _.each(permission.needs, function (value, key) {\u000a                        needs.push(self.need(key, value));\u000a                    });\u000a\u000a                    if (needs.length > 0) {\u000a                        registerPermission(permission.key, needs);\u000a                    }\u000a\u000a                    if (!permission.combined) {\u000a                        permissionList.push(permission);\u000a                    }\u000a                    lookup[permission.key] = permission;\u000a                });\u000a\u000a                permissionList.sort(access.permissionComparator);\u000a                self.permissionList(permissionList);\u000a                self.lookup = lookup;\u000a            };\u000a\u000a            return self;\u000a        })();\u000a\u000a        //~~ helpers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u000a\u000a        access.groupComparator = function (a, b) {\u000a            var nameA = a.name ? a.name.toUpperCase() : "";\u000a            var nameB = b.name ? b.name.toUpperCase() : "";\u000a\u000a            if (nameA < nameB) {\u000a                return -1;\u000a            } else if (nameA > nameB) {\u000a                return 1;\u000a            } else {\u000a                return 0;\u000a            }\u000a        };\u000a\u000a        access.permissionComparator = function (a, b) {\u000a            var nameA = a.name ? a.name.toUpperCase() : "";\u000a            var nameB = b.name ? b.name.toUpperCase() : "";\u000a\u000a            var pluginA = a.plugin || "";\u000a            var pluginB = b.plugin || "";\u000a\u000a            var compA = pluginA + ":" + nameA;\u000a            var compB = pluginB + ":" + nameB;\u000a\u000a            if (compA < compB) {\u000a                return -1;\u000a            } else if (compA > compB) {\u000a                return 1;\u000a            } else {\u000a                return 0;\u000a            }\u000a        };\u000a\u000a        // Maps the group names into a comma separated list\u000a        access.groupList = function (data) {\u000a            if (data.groups === undefined) return "";\u000a\u000a            var mappedGroups = _.filter(\u000a                _.map(data.groups, function (g) {\u000a                    return access.groups.lookup[g];\u000a                }),\u000a                function (g) {\u000a                    return g !== undefined;\u000a                }\u000a            );\u000a            mappedGroups.sort(access.groupComparator);\u000a            return _.map(mappedGroups, function (g) {\u000a                return g.name;\u000a            }).join(", ");\u000a        };\u000a\u000a        // Maps the sub group names into a comma separated list\u000a        access.subgroupList = function (data) {\u000a            if (data.subgroups === undefined) return "";\u000a\u000a            var mappedGroups = _.filter(\u000a                _.map(data.subgroups, function (g) {\u000a                    return access.groups.lookup[g];\u000a                }),\u000a                function (g) {\u000a                    return g !== undefined;\u000a                }\u000a            );\u000a            mappedGroups.sort(access.groupComparator);\u000a            return _.map(mappedGroups, function (g) {\u000a                return g.name;\u000a            }).join(", ");\u000a        };\u000a\u000a        // Maps the permission names into a comma separated list\u000a        access.permissionList = function (data) {\u000a            if (!data || data.permissions === undefined) return "";\u000a\u000a            var mappedPermissions = _.filter(\u000a                _.map(data.permissions, function (p) {\u000a                    return access.permissions.lookup[p];\u000a                }),\u000a                function (p) {\u000a                    return p !== undefined;\u000a                }\u000a            );\u000a            mappedPermissions.sort(access.permissionComparator);\u000a            return _.map(mappedPermissions, function (p) {\u000a                return p.name;\u000a            }).join(", ");\u000a        };\u000a\u000a        //~~ API Calls\u000a        access.onStartup = function () {\u000a            access.groups.onStartup();\u000a            access.users.onStartup();\u000a        };\u000a\u000a        access.onServerConnect = function () {\u000a            access.permissions.initialize();\u000a        };\u000a\u000a        access.onServerReconnect = function () {\u000a            access.permissions.initialize();\u000a        };\u000a\u000a        access.onUserPermissionsChanged = access.onUserLoggedIn = access.onUserLoggedOut = function (\u000a            user\u000a        ) {\u000a            if (access.loginState.hasPermission(access.permissions.SETTINGS)) {\u000a                access.groups.requestData().done(function () {\u000a                    access.users.requestData();\u000a                });\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([AccessViewModel, ["loginStateViewModel"], []]);\u000a});\u000a\u000a;\u000a
p0
.