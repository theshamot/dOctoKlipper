V// source: plugin/errortracking/js/errortracking.js\u000a$(function () {\u000a    function ErrorTrackingViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settings = parameters[0];\u000a        self.loginState = parameters[1];\u000a\u000a        var notification = undefined;\u000a        var performCheck = function () {\u000a            if (!self.loginState.isAdmin()) return;\u000a\u000a            // already enabled?\u000a            if (self.settings.settings.plugins.errortracking.enabled()) return;\u000a\u000a            // RC release channel?\u000a            var releaseChannel = self.settings.settings.plugins.softwareupdate.octoprint_release_channel();\u000a            if (releaseChannel === "rc/maintenance" || releaseChannel === "rc/devel") {\u000a                if (notification !== undefined) return;\u000a\u000a                // ignored?\u000a                try {\u000a                    var ignoredString =\u000a                        localStorage["plugin.errortracking.notification_ignored"];\u000a                    var ignored = false;\u000a\u000a                    if (ignoredString) {\u000a                        ignored = JSON.parse(ignoredString);\u000a                    }\u000a\u000a                    if (ignored) return;\u000a                } catch (ex) {\u000a                    log.error(\u000a                        "Error while reading plugin.errortracking.notification_ignored from local storage"\u000a                    );\u000a                }\u000a\u000a                // show notification\u000a                notification = new PNotify({\u000a                    title: gettext("Enable error reporting?"),\u000a                    text: gettext(\u000a                        "<p>It looks like you are tracking an OctoPrint RC release channel. It " +\u000a                            "would be great if you would enable error reporting so that any kind of errors that occur " +\u000a                            "with an RC can be looked into more easily. Thank you!</p>" +\u000a                            "<p><small>You can find more information on error reporting " +\u000a                            "under Settings > Error Tracking</small></p>"\u000a                    ),\u000a                    hide: false,\u000a                    confirm: {\u000a                        confirm: true,\u000a                        buttons: [\u000a                            {\u000a                                text: gettext("Ignore"),\u000a                                click: function () {\u000a                                    notification.remove();\u000a                                    notification = undefined;\u000a                                    new PNotify({\u000a                                        text: gettext(\u000a                                            'You can still enable error tracking via "Settings" > "Error Tracking"'\u000a                                        )\u000a                                    });\u000a\u000a                                    if (Modernizr.localstorage) {\u000a                                        localStorage[\u000a                                            "plugin.errortracking.notification_ignored"\u000a                                        ] = JSON.stringify(true);\u000a                                    }\u000a                                }\u000a                            },\u000a                            {\u000a                                text: gettext("Enable"),\u000a                                addClass: "btn-primary",\u000a                                click: function () {\u000a                                    self.settings\u000a                                        .saveData({\u000a                                            plugins: {\u000a                                                errortracking: {\u000a                                                    enabled: true\u000a                                                }\u000a                                            }\u000a                                        })\u000a                                        .done(function () {\u000a                                            notification.remove();\u000a                                            notification = undefined;\u000a                                            location.reload(true);\u000a                                        });\u000a                                }\u000a                            }\u000a                        ]\u000a                    },\u000a                    buttons: {\u000a                        closer: false,\u000a                        sticker: false\u000a                    }\u000a                });\u000a\u000a                // not an RC release channel, close notification\u000a            } else if (notification !== undefined) {\u000a                notification.remove();\u000a                notification = undefined;\u000a            }\u000a        };\u000a\u000a        var subbed = false;\u000a        self.onStartup = self.onUserLoggedIn = self.onUserLoggedOut = function () {\u000a            performCheck();\u000a            if (\u000a                self.settings &&\u000a                self.settings.settings &&\u000a                self.settings.settings.plugins &&\u000a                self.settings.settings.plugins.softwareupdate &&\u000a                !subbed\u000a            ) {\u000a                subbed = true;\u000a                self.settings.settings.plugins.softwareupdate.octoprint_release_channel.subscribe(\u000a                    performCheck\u000a                );\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: ErrorTrackingViewModel,\u000a        dependencies: ["settingsViewModel", "loginStateViewModel"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.