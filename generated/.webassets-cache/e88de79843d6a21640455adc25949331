V// source: plugin/DisplayLayerProgress/js/DisplayLayerProgress.js\u000a/*\u000a * View model for DisplayLayerProgress\u000a *\u000a * Author: Olli\u000a * License: AGPLv3\u000a */\u000a$(function () {\u000a    function DisplaylayerprogressViewModel(parameters) {\u000a        var PLUGIN_ID = "DisplayLayerProgress";\u000a        // enable support of resetSettings\u000a        new ResetSettingsUtil().assignResetSettingsFeature(PLUGIN_ID, function(data){\u000a                                // assign new settings-values // TODO find a more generic way\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.addLayerIndicators(data.addLayerIndicators);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnState(data.showOnState);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnNavBar(data.showOnNavBar);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnPrinterDisplay(data.showOnPrinterDisplay);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnBrowserTitle(data.showOnBrowserTitle);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnFileListView(data.showOnFileListView);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showAllPrinterMessages(data.showAllPrinterMessages);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.stateMessagePattern(data.stateMessagePattern);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.navBarMessagePattern(data.navBarMessagePattern);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.printerDisplayMessagePattern(data.printerDisplayMessagePattern);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.browserTitleMessagePattern(data.browserTitleMessagePattern);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.browserTitleMode(data.browserTitleMode);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.appendActualBedTempBrowserTitle(data.appendActualBedTempBrowserTitle);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.appendTargetBedTempBrowserTitle(data.appendTargetBedTempBrowserTitle);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.printerDisplayScreenLocation(data.printerDisplayScreenLocation);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.printerDisplayWidth(data.printerDisplayWidth);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.addTrailingChar(data.addTrailingChar);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.layerExpressions(data.layerExpressions);\u000a//                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showLayerInStatusBar(data.showLayerInStatusBar);\u000a//                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showHeightInStatusBar(data.showHeightInStatusBar);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.updatePrinterDisplayWhilePrinting(data.updatePrinterDisplayWhilePrinting);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.heightFormat(data.heightFormat);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.etaFormat(data.etaFormat);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.feedrateFactor(data.feedrateFactor);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.feedrateFormat(data.feedrateFormat);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.debuggingEnabled(data.debuggingEnabled);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.layerAverageDurationCount(data.layerAverageDurationCount);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.layerAverageFormatPattern(data.layerAverageFormatPattern);\u000a//                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.zMaxExpressionPattern(data.zMaxExpressionPattern);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.sendLayerInformationsViaWebSocket(data.sendLayerInformationsViaWebSocket);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.excludeFolders(data.excludeFolders);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.excludeFoldersExpression(data.excludeFoldersExpression);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.showTimeInNavBar(data.showTimeInNavBar);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.printerDisplayScreenLocationClass(data.printerDisplayScreenLocationClass);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.timeInNavBarPosition(data.timeInNavBarPosition);\u000a                                self.settingsViewModel.settings.plugins.DisplayLayerProgress.printTimeLeftWithoutSeconds(data.printTimeLeftWithoutSeconds);\u000a        });\u000a\u000a        var self = this;\u000a\u000a        // assign the injected parameters, e.g.:\u000a        self.loginStateViewModel = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a        self.temperatureModel = parameters[2];\u000a        self.filesViewModel = parameters[3];\u000a        self.printerStateViewModel = parameters[4];\u000a\u000a        self.temperatureModel.bedTemp.actual.subscribe(function(newValue){\u000a            self.updateBedTemperatureInBrowserTitle();\u000a        });\u000a\u000a        self.temperatureModel.bedTemp.target.subscribe(function(newValue){\u000a            self.updateBedTemperatureInBrowserTitle();\u000a        });\u000a        self.updateBedTemperatureInBrowserTitle = function(){\u000a            var temperatureText = ""\u000a            var doUpdate = false;\u000a            if (self.settingsViewModel.settings.plugins.DisplayLayerProgress.appendActualBedTempBrowserTitle() == true){\u000a                temperatureText = Math.round(self.temperatureModel.bedTemp.actual()) + "°C";\u000a                doUpdate = true;\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.DisplayLayerProgress.appendTargetBedTempBrowserTitle() == true){\u000a                if (self.settingsViewModel.settings.plugins.DisplayLayerProgress.appendActualBedTempBrowserTitle() == true){\u000a                    temperatureText = temperatureText + "/"+ Math.round(self.temperatureModel.bedTemp.target()) + "°C";\u000a                } else {\u000a                    temperatureText = temperatureText + Math.round(self.temperatureModel.bedTemp.target()) + "°C";\u000a                }\u000a                doUpdate = true;\u000a            }\u000a\u000a            if (doUpdate == true && self.temperatureModel.hasBed() == true){\u000a                var currentTitle = document.title;\u000a                if (currentTitle.endsWith("°C")){\u000a                    var spaceIndex = currentTitle.lastIndexOf(' ');\u000a                    if (spaceIndex != -1){\u000a                        currentTitle = currentTitle.substring(0, spaceIndex);\u000a                    } else {\u000a                        currentTitle = "";\u000a                    }\u000a                }\u000a                currentTitle = currentTitle + " " + temperatureText;\u000a                document.title = currentTitle.trim();\u000a            }\u000a        }\u000a\u000a        self.stateMessage = ko.observable();\u000a        self.navBarMessage = ko.observable();\u000a        self.defaultBrowserTitleMessage = "";\u000a\u000a\u000a        self.filesViewModel.getLayerInformation = function(fileItem){\u000a            if (fileItem.DisplayLayerProgress != null){\u000a                return parseInt(fileItem.DisplayLayerProgress.totalLayerCountWithoutOffset) + parseInt(self.settingsViewModel.settings.plugins.DisplayLayerProgress.layerOffset());\u000a            }\u000a            return "-"\u000a        }\u000a\u000a        // startup\u000a        self.onStartup = function () {\u000a//            console(self.settingsViewModel.settings.plugins.DisplayLayerProgress.layerOffset());\u000a            // get orig file-item html and add "Layers:"\u000a            $("#files_template_machinecode").text(function(){\u000a                var origFileListHtml = $(this).text();\u000a                var patchedFileItemHtml = origFileListHtml.replace('formatSize(size)"></span></div>', 'formatSize(size)"></span></div>' +\u000a                                        '<div class="size" data-bind="visible: ($root.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnFileListView() == true)" >Layers: <span data-bind="text: $root.getLayerInformation($data)"></span></div>');\u000a                return patchedFileItemHtml;\u000a            });\u000a\u000a            var element = $("#state").find(".accordion-inner .progress");\u000a            if (element.length) {\u000a                element.before("<span id='dlp-stateOutputMessage'></span>");\u000a\u000a                self.stateMessage.subscribe(function(newValue){\u000a                    $("#dlp-stateOutputMessage").html(newValue);\u000a                });\u000a\u000a//                // call backend for update navbar and printer-display\u000a                OctoPrint.get("api/plugin/"+PLUGIN_ID);\u000a            }\u000a\u000a            $("#layerExpressionTextArea").numberedtextarea();\u000a        };\u000a\u000a        self.onAllBound = function() {\u000a            self.defaultBrowserTitleMessage = document.title;\u000a            self.settingsViewModel.settings.plugins.DisplayLayerProgress.showOnBrowserTitle.subscribe(function(newValue){\u000a                if (newValue == false){\u000a                    document.title = self.defaultBrowserTitleMessage\u000a                }\u000a            });\u000a\u000a            self.settingsViewModel.settings.plugins.DisplayLayerProgress.showAllPrinterMessages.subscribe(function(newValue){\u000a                if (printerDisplay != null){\u000a                    if (newValue == true){\u000a                        printerDisplay.open();\u000a                    } else {\u000a                        printerDisplay.remove();\u000a                    }\u000a\u000a                }\u000a            });\u000a\u000a            self.updateClock = function() {\u000a                var clockVisible = self.settingsViewModel.settings.plugins.DisplayLayerProgress.showTimeInNavBar();\u000a                if (clockVisible) {\u000a                    // start and show Clock\u000a                    var position = self.settingsViewModel.settings.plugins.DisplayLayerProgress.timeInNavBarPosition();\u000a\u000a                    var clockElement = null;\u000a                    if ("left" == position)\u000a                        clockElement = $("#dlpNavBarTime-left");\u000a                    else {\u000a                        clockElement = $("#dlpNavBarTime-right");\u000a                    }\u000a                    // start clock\u000a                    clockElement.show();\u000a                    var dt = new Date();\u000a                    clockElement.html( dt.toLocaleTimeString() );\u000a                    window.setTimeout(self.updateClock, 1000);\u000a                } else {\u000a                    // hide clock and stop clock\u000a                    $("#dlpNavBarTime-left").hide();\u000a                    $("#dlpNavBarTime-right").hide();\u000a                }\u000a            };\u000a\u000a            self.settingsViewModel.settings.plugins.DisplayLayerProgress.showTimeInNavBar.subscribe(function(newValue){\u000a                    self.updateClock();\u000a            });\u000a            self.settingsViewModel.settings.plugins.DisplayLayerProgress.timeInNavBarPosition.subscribe(function(newValue){\u000a                    $("#dlpNavBarTime-left").hide();\u000a                    $("#dlpNavBarTime-right").hide();\u000a                    self.updateClock();\u000a            });\u000a\u000a//            self.origGetAdditionDataFunction = self.filesViewModel.getAdditionalData;\u000a//            self.filesViewModel.getAdditionalData = function(data){\u000a//                var additionDataAsHtml = "Layers: 123<br>" + self.origGetAdditionDataFunction(data);\u000a//                console.info("hallo");\u000a//                return additionDataAsHtml;\u000a//            }\u000a        }\u000a\u000a\u000a        var printerDisplay = null;\u000a\u000a\u000a\u000a        // receive data from server\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a\u000a            if (plugin != PLUGIN_ID) {\u000a                return;\u000a            }\u000a\u000a            if ("reloadFileView" == data.action){\u000a                self.filesViewModel.requestData({force: true});\u000a                return;\u000a            }\u000a\u000a            if (data.disablePrint){\u000a                $("#job_print").attr("disabled", "disabled");\u000a                return\u000a            }\u000a            if (data.enablePrint){\u000a                if (self.printerStateViewModel.enablePrint() == true){\u000a                    $("#job_print").removeAttr("disabled");\u000a                }\u000a                return\u000a            }\u000a\u000a            if ("busy" in data){\u000a                if (data.busy == true) {\u000a                    $(".dlp-state-busyIndicator").show();\u000a                } else {\u000a                    $(".dlp-state-busyIndicator").hide();\u000a                    if (self.printerStateViewModel.enablePrint() == true){\u000a                        $("#job_print").removeAttr("disabled");\u000a                    }\u000a                }\u000a            } else {\u000a                $(".dlp-state-busyIndicator").hide();\u000a                if (self.printerStateViewModel.enablePrint() == true){\u000a                    $("#job_print").removeAttr("disabled");\u000a                }\u000a            }\u000a\u000a            // State\u000a            if (data.stateMessage){\u000a                self.stateMessage(data.stateMessage);\u000a            }\u000a\u000a            // NavBar\u000a            if (data.navBarMessage){\u000a                self.navBarMessage(data.navBarMessage);\u000a            }\u000a\u000a            // BrowserTitle\u000a            if (data.browserTitle){\u000a                if (data.browserTitle.browserTitleMode == "overwrite"){\u000a                    document.title = data.browserTitle.message;\u000a                } else {\u000a                    document.title = self.defaultBrowserTitleMessage + " " + data.browserTitle.message;\u000a                }\u000a            }\u000a\u000a			// Printer Display\u000a            if ( (printerDisplay == null && data.initPrinterDisplay) ||\u000a                  data.initPrinterDisplay){\u000a                if (printerDisplay != null){\u000a                    $("h4.ui-pnotify-title:contains('Printer Display')").parent().parent().remove();\u000a                }\u000a                //var stack_bar_bottom = {"dir1": "up", "dir2": "left", "spacing1": 0, "spacing2": 0};\u000a                var stack_bar_bottom = JSON.parse("{"+data.printerDisplayScreenLocation+"}");\u000a                printerDisplay = new PNotify({\u000a                    title: 'Printer Display',\u000a                    type: 'info',\u000a                    width: data.printerDisplayWidth,\u000a                    //addclass: "stack-bottomleft",\u000a                    addclass: data.classDefinition,\u000a                    stack: stack_bar_bottom,\u000a                    hide: false\u000a                    });\u000a            }\u000a			if (data.showDesktopPrinterDisplay && data.printerDisplay && printerDisplay != null){\u000a                printerDisplay.update({\u000a                    text: '<h3 class="fontsforweb_fontid_507"><font color="lightblue" style="background-color:blue;">'+data.printerDisplay+'</font></h3>'\u000a                });\u000a			}\u000a\u000a			// NotificationMessages\u000a			if (data.notifyType){\u000a			    var notfiyType = data.notifyType;\u000a			    var notifyMessage = data.notifyMessage;\u000a                new PNotify({\u000a                    title: 'Attention',\u000a                    text: notifyMessage,\u000a                    type: notfiyType,\u000a                    hide: false\u000a                    });\u000a\u000a			}\u000a\u000a        };\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.settings = self.settingsViewModel.settings.plugins.DisplayLayerProgress;\u000a            // From server-settings to client-settings\u000a        };\u000a\u000a        self.onSettingsBeforeSave = function () {\u000a        }\u000a    }\u000a\u000a    /* view model class, parameters for constructor, container to bind to\u000a     * Please see http://docs.octoprint.org/en/master/plugins/viewmodels.html#registering-custom-viewmodels for more details\u000a     * and a full list of the available options.\u000a     */\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: DisplaylayerprogressViewModel,\u000a        // ViewModels your plugin depends on, e.g. loginStateViewModel, settingsViewModel, ...\u000a        dependencies: ["loginStateViewModel", "settingsViewModel", "temperatureViewModel", "filesViewModel", "printerStateViewModel"],\u000a        // Elements to bind to, e.g. #settings_plugin_DisplayLayerProgress, #tab_plugin_DisplayLayerProgress, ...\u000a        //elements: [document.getElementById("progressinfo_plugin_navbar")]\u000a        elements: [\u000a            document.getElementById("displayLayerProgress_plugin_navbar"),\u000a            document.getElementById("displayLayerProgress_plugin_settings")\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.