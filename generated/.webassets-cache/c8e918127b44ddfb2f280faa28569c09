V// source: plugin/PrintJobHistory/js/PrintJobHistory-EditJobDialog.js\u000a\u000afunction PrintJobHistoryEditDialog(){\u000a\u000a    var self = this;\u000a\u000a    this.apiClient = null;\u000a\u000a    this.editPrintJobItemDialog = null;\u000a    this.printJobItemForEdit = null;\u000a    this.closeDialogHandler = null;\u000a\u000a    this.lastSnapshotImageSource = null;\u000a    this.snapshotSuccessMessageSpan = null;\u000a    this.snapshotErrorMessageSpan = null;\u000a\u000a    this.snapshotImage = null;\u000a    this.captureButtonText = null;\u000a    this.cameraShutterUrl = null;\u000a\u000a    this.noteEditor = null;\u000a\u000a    this.shouldPrintJobTableReload = false;\u000a\u000a    var SHUTTER_DURATION = 4;   // in seconds\u000a    var IMAGEDISPLAYMODE_SNAPSHOTIMAGE = "snapshotImage";\u000a    var IMAGEDISPLAYMODE_VIDEOSTREAM = "videoStream";\u000a    var IMAGEDISPLAYMODE_VIDEOSTREAM_WITH_SHUTTER = "videoStreamWithShutter";\u000a    var IMAGEDISPLAYMODE_VIDEOSTREAM_LOADING = "videoStreamLoading";\u000a    var IMAGEDISPLAYMODE_VIDEOSTREAM_ERROR = "videoStreamError";\u000a\u000a    this.imageDisplayMode = ko.observable(IMAGEDISPLAYMODE_SNAPSHOTIMAGE);\u000a\u000a    this.snapshotUploadName = ko.observable();\u000a    this.snapshotUploadInProgress = ko.observable(false);\u000a\u000a    self.webCamSettings = null;\u000a\u000a    // "Computed" field-binding\u000a    self.webCamEnabled = ko.pureComputed(function(){\u000a        if (self.webCamSettings.webcamEnabled != null){\u000a            return self.webCamSettings.webcamEnabled();\u000a        } else {\u000a            return self.webCamSettings.snapshotUrl() != null && self.webCamSettings.streamUrl();\u000a        }\u000a    });\u000a    // "Computed" field-binding\u000a    self.webcamRatioClass = ko.pureComputed(function() {\u000a        if (self.webCamSettings.streamRatio() == "4:3") {\u000a            return "ratio43";\u000a        } else {\u000a            return "ratio169";\u000a        }\u000a    });\u000a\u000a\u000a    // Image functions\u000a    function _setSnapshotImageSource(snapshotUrl){\u000a        self.lastSnapshotImageSource = self.snapshotImage.attr("src")\u000a        if (self.lastSnapshotImageSource="#"){\u000a            self.lastSnapshotImageSource = snapshotUrl;\u000a        }\u000a        self.snapshotImage.attr("src", snapshotUrl+"?" + new Date().getTime()); // new Date == cache breaker\u000a    }\u000a\u000a    function _restoreSnapshotImageSource(){\u000a        _setSnapshotImageSource(self.lastSnapshotImageSource);\u000a    }\u000a\u000a    self.isSlicerSettingsPresent = ko.observable(false);\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// INIT\u000a\u000a    this.init = function(apiClient, webCamSettings){\u000a        self.apiClient = apiClient;\u000a\u000a        self.webCamSettings = webCamSettings\u000a\u000a        self.editPrintJobItemDialog = $("#dialog_printJobHistory_editPrintJobItem");\u000a        self.snapshotSuccessMessageSpan = $("#printJobHistory-editdialog-success-message");\u000a        self.snapshotErrorMessageSpan = $("#printJobHistory-editdialog-error-message");\u000a        self.snapshotImage = $("#printJobHistory-snapshotImage");\u000a        self.captureButtonText = $("#printJobHistory-captureButtonText");\u000a        self.cameraShutterUrl = "plugin/PrintJobHistory/static/images/camera-shutter.png";   // TODO replace with PLUGIN_ID\u000a\u000a        // INIT Note Editor\u000a        self.noteEditor = new Quill('#note-quill-editor', {\u000a            modules: {\u000a                toolbar: [\u000a                    ['bold', 'italic', 'underline'],\u000a                    [{ 'color': [] }, { 'background': [] }],\u000a                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\u000a                    ['link']\u000a                ]\u000a            },\u000a            theme: 'snow'\u000a        });\u000a        Quill.prototype.getHtml = function() {\u000a            return this.container.querySelector('.ql-editor').innerHTML;\u000a        };\u000a\u000a        // INIT FileUpload\u000a        self.snapshotUploadData = undefined;    // data with submit function\u000a        self.snapshotUploadButton = $("#printJobHistory-snapshotUploadButton");\u000a        self.snapshotUploadButton.fileupload({\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            headers: OctoPrint.getRequestHeaders(),\u000a            add: function(e, data) {\u000a                self.snapshotSuccessMessageSpan.hide();\u000a                self.snapshotErrorMessageSpan.hide();\u000a                if (data.files.length === 0) {\u000a                    // no files? ignore\u000a                    return false;\u000a                }\u000a                data.url = self.apiClient.uploadSnapshotUrl(self.printJobItemForEdit.snapshotFilename());\u000a                self.snapshotUploadName(data.files[0].name);\u000a                self.snapshotUploadData = data;\u000a            },\u000a            done: function(e, data) {\u000a                self.snapshotSuccessMessageSpan.show();\u000a                self.snapshotSuccessMessageSpan.text("Snapshot uploaded!");\u000a                self.snapshotUploadName(undefined);\u000a                self.snapshotUploadData = undefined;\u000a                _setSnapshotImageSource(self.apiClient.getSnapshotUrl(data.result.snapshotFilename));\u000a\u000a                self.snapshotUploadInProgress(false);\u000a            },\u000a            fail: function(e, data) {\u000a                new PNotify({\u000a                    title: gettext("Something went wrong"),\u000a                    text: gettext("Maybe the filesize was to big (limit 5MB). Please consult octoprint.log for details"),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a\u000a//                self.uploadButton.unbind("click");\u000a                self.snapshotUploadName(undefined);\u000a                self.snapshotUploadInProgress(false);\u000a            }\u000a        });\u000a\u000a        self.slicerSettingsDialog = $("#dialog_printJobHistory_slicerSettings");\u000a        self.changePrintStatusDialog = $("#dialog_printJobHistory_changePrintStatus");\u000a    }\u000a\u000a    this.showPrintStatusDialog = function(){\u000a        self.changePrintStatusDialog.modal({\u000a            //minHeight: function() { return Math.max($.fn.modal.defaults.maxHeight() - 80, 250); }\u000a            keyboard: false,\u000a            clickClose: false,\u000a            showClose: false,\u000a            backdrop: "static"\u000a        }).css({\u000a            width: 'auto',\u000a            'margin-left': function() { return -($(this).width() /2); }\u000a        });\u000a    }\u000a\u000a    this.closePrintStatusDialog = function(){\u000a        self.changePrintStatusDialog.modal('hide');\u000a    }\u000a    this.selectedPrintStatus = function(selectedColor){\u000a        if ("green" == selectedColor){\u000a            self.printJobItemForEdit.printStatusResult("success");\u000a        } else {\u000a            self.printJobItemForEdit.printStatusResult("failed");\u000a        }\u000a        self.closePrintStatusDialog();\u000a    }\u000a\u000a    this.showSlicerSettingsDialog = function(){\u000a        self.slicerSettingsDialog.modal({\u000a            //minHeight: function() { return Math.max($.fn.modal.defaults.maxHeight() - 80, 250); }\u000a            keyboard: false,\u000a            clickClose: false,\u000a            showClose: false,\u000a            backdrop: "static"\u000a        }).css({\u000a            width: 'auto',\u000a            'margin-left': function() { return -($(this).width() /2); }\u000a        });\u000a    }\u000a\u000a\u000a    this.closeSlicerSettingsDialog = function(){\u000a        self.slicerSettingsDialog.modal('hide');\u000a    }\u000a\u000a\u000a    this.isInitialized = function() {\u000a        return self.apiClient != null;\u000a    }\u000a\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// SHOW DIALOG\u000a    this.showDialog = function(printJobItemForEdit, closeDialogHandler, fullEditMode){\u000a\u000a        if (fullEditMode != null){\u000a            self.fullEditMode(fullEditMode);\u000a        } else {\u000a            self.fullEditMode(false);\u000a        }\u000a        self.printJobItemForEdit = printJobItemForEdit;\u000a        self.closeDialogHandler = closeDialogHandler;\u000a\u000a        self.shouldPrintJobTableReload = false;\u000a//        TODO Wieso this statt self????\u000a        _setSnapshotImageSource(self.apiClient.getSnapshotUrl(printJobItemForEdit.snapshotFilename()));\u000a\u000a//        reset message\u000a        self.snapshotSuccessMessageSpan.hide();\u000a        self.snapshotErrorMessageSpan.hide();\u000a        self.imageDisplayMode(IMAGEDISPLAYMODE_SNAPSHOTIMAGE);\u000a\u000a        // assign content to the Note-Section\u000a        var noteContent = null;\u000a        if (printJobItemForEdit.noteDeltaFormat() == null){\u000a            // Fallback is text (if present), not Html\u000a            if (printJobItemForEdit.noteText() != null){\u000a                self.noteEditor.setText(printJobItemForEdit.noteText(), 'api');\u000a            }\u000a        } else {\u000a            deltaFormat = JSON.parse(printJobItemForEdit.noteDeltaFormat());\u000a            self.noteEditor.setContents(deltaFormat, 'api');\u000a        }\u000a\u000a        slicerSettingsPresent = self.printJobItemForEdit.slicerSettingsAsText();\u000a        if (slicerSettingsPresent != null && slicerSettingsPresent.length != 0){\u000a            self.isSlicerSettingsPresent(true);\u000a        }\u000a\u000a        // some magic, if in edit mode\u000a\u000a\u000a        calcDuration = function(){\u000a            // update duration only in edit-mode\u000a            if (self.fullEditMode() == false){\u000a                return;\u000a            }\u000a            var noDatetime = isEmpty(self.printJobItemForEdit.printStartDateTimeFormatted()) || isEmpty(self.printJobItemForEdit.printEndDateTimeFormatted());\u000a            if (noDatetime){\u000a                self.printJobItemForEdit.duration(0);\u000a            } else {\u000a                const startDateTime = Date.parse(self.printJobItemForEdit.printStartDateTimeFormatted());\u000a                const endDateTime = Date.parse(self.printJobItemForEdit.printEndDateTimeFormatted());\u000a                const duration = (endDateTime - startDateTime) / 1000;\u000a                if (duration > 0){\u000a                    self.printJobItemForEdit.duration(duration);\u000a                } else {\u000a                    self.printJobItemForEdit.duration(0);\u000a                }\u000a            }\u000a        }\u000a        self.printJobItemForEdit.printStartDateTimeFormatted.subscribe(function(newValue){\u000a            calcDuration();\u000a        });\u000a        self.printJobItemForEdit.printEndDateTimeFormatted.subscribe(function(newValue){\u000a            calcDuration();\u000a        });\u000a\u000a\u000a        self.editPrintJobItemDialog.modal({\u000a            //minHeight: function() { return Math.max($.fn.modal.defaults.maxHeight() - 80, 250); }\u000a            keyboard: false,\u000a            clickClose: false,\u000a            showClose: false,\u000a            backdrop: "static"\u000a        }).css({\u000a            width: 'auto',\u000a            'margin-left': function() { return -($(this).width() /2); }\u000a        });\u000a\u000a\u000a    }\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// CLOSE DIALOG\u000a    this.closeDialog = function(){\u000a        var visible = self.editPrintJobItemDialog.hasClass('in');\u000a        if (visible == true){\u000a            self.editPrintJobItemDialog.modal('hide');\u000a        }\u000a    }\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// ABORT PRINT JOB ITEM\u000a    this.abortPrintJobItem  = function(){\u000a        self.editPrintJobItemDialog.modal('hide');\u000a        self.closeDialogHandler(self.shouldPrintJobTableReload);\u000a    }\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// SAVE PRINT JOB ITEM\u000a    isEmpty = function(value){\u000a        if (value == null){\u000a            return true;\u000a        }\u000a        value = "" + value;\u000a        if (value.trim().length == 0 || value.replace(/\u005cs/g,"") == ""){\u000a            return true;\u000a        }\u000a        return false;\u000a    }\u000a\u000a    this.savePrintJobItem  = function(){\u000a\u000a        // check for mandatory fields\u000a        if (\u000a            isEmpty(self.printJobItemForEdit.fileName()) ||\u000a            isEmpty(self.printJobItemForEdit.printStartDateTimeFormatted()) ||\u000a            isEmpty(self.printJobItemForEdit.printEndDateTimeFormatted()) ||\u000a            isEmpty(self.printJobItemForEdit.duration())\u000a\u000a        ){\u000a            alert("fields are required: filename, start/end datetime, duration")\u000a            return;\u000a        }\u000a\u000a\u000a        var noteText = self.noteEditor.getText();\u000a        var noteDeltaFormat = self.noteEditor.getContents();\u000a        var noteHtml = self.noteEditor.getHtml();\u000a        self.printJobItemForEdit.noteText(noteText);\u000a        self.printJobItemForEdit.noteDeltaFormat(noteDeltaFormat);\u000a        self.printJobItemForEdit.noteHtml(noteHtml);\u000a\u000a        self.apiClient.callStorePrintJob(self.printJobItemForEdit.databaseId(), self.printJobItemForEdit, function(allPrintJobsResponse){\u000a            self.editPrintJobItemDialog.modal('hide');\u000a            self.closeDialogHandler(true);\u000a        });\u000a\u000a    }\u000a\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// DELETE PRINT JOB\u000a    this.deletePrintJobItem  = function(){\u000a        var result = confirm("Do you really want to delete the print job?");\u000a        if (result == true){\u000a            self.apiClient.callRemovePrintJob(self.printJobItemForEdit.databaseId(), function(responseData) {\u000a                self.editPrintJobItemDialog.modal('hide');\u000a                self.closeDialogHandler(true);\u000a            });\u000a        }\u000a    }\u000a\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// DELETE IMAGE\u000a    this.deleteImage  = function(){\u000a\u000a\u000a        var result = confirm("Do you really want to delete the image?");\u000a        if (result == true){\u000a            self.apiClient.callDeleteSnapshotImage(self.printJobItemForEdit.snapshotFilename(), function(responseData){\u000a                // Update Image URL is the same, backend send the "no photo"-image\u000a                _setSnapshotImageSource(self.apiClient.getSnapshotUrl(responseData.snapshotFilename));\u000a                self.shouldPrintJobTableReload = true;\u000a            });\u000a        }\u000a    }\u000a\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// CAPTURE IMAGE\u000a    var reCaptureText = "Capture";\u000a    var takeSnapshotText = "Take snapshot";\u000a\u000a    this.captureImage = function(){\u000a        self.snapshotSuccessMessageSpan.hide();\u000a        self.snapshotErrorMessageSpan.hide();\u000a\u000a        var newImageUrl = null;\u000a        // check is in capture mode\u000a        if (self.captureButtonText.text() == reCaptureText){\u000a            // SHOW VIDEOSTREAM\u000a            self.imageDisplayMode(IMAGEDISPLAYMODE_VIDEOSTREAM_LOADING);\u000a\u000a            snapshotUrl = self.webCamSettings.snapshotUrl();\u000a            streamUrl = self.webCamSettings.streamUrl();\u000a\u000a            if (snapshotUrl == null || streamUrl == null || snapshotUrl.length == 0 || streamUrl.length == 0) {\u000a                alert("Camera-Error: Please make sure that both stream- and snapshot-url is configured in your camera-settings")\u000a            }\u000a\u000a            OctoPrint.util.testUrl(snapshotUrl, {\u000a                method: "GET",\u000a                response: "bytes",\u000a                timeout: self.webCamSettings.streamTimeout(),\u000a//                validSsl: self.webcam_snapshotSslValidation(),\u000a                content_type_whitelist: ["image/*"]\u000a            })\u000a            .done(function(response){\u000a                // Check if videoStream is available\u000a                if (response.status == 200 && response.result == true){\u000a                    //show stream in image\u000a                    self.imageDisplayMode(IMAGEDISPLAYMODE_VIDEOSTREAM);\u000a\u000a                    $("#printJobHistory-videoStream").attr("src", self.webCamSettings.streamUrl());\u000a                    self.captureButtonText.text(takeSnapshotText);\u000a                } else {\u000a                    // VideoStream is not available\u000a                    self.imageDisplayMode(IMAGEDISPLAYMODE_VIDEOSTREAM_ERROR);\u000a                }\u000a            })\u000a            .fail(function() {\u000a                self.imageDisplayMode(IMAGEDISPLAYMODE_VIDEOSTREAM_ERROR);\u000a\u000a                self.snapshotErrorMessageSpan.show();\u000a                self.snapshotErrorMessageSpan.text("Something went wrong. Try again!");\u000a            });\u000a        } else {\u000a            // TAKE SNAPSHOT\u000a            var startShutter = new Date().getTime();\u000a            self.imageDisplayMode(IMAGEDISPLAYMODE_VIDEOSTREAM_WITH_SHUTTER);\u000a            // freeze video stream -> show current tken snapshot\u000a            var mySnapshotUrl = self.apiClient.getProxiedSnapshotUrl();\u000a            $("#printJobHistory-videoStream").attr("src", mySnapshotUrl);\u000a\u000a            self.apiClient.callTakeSnapshot(self.printJobItemForEdit.snapshotFilename(), function(responseData){\u000a                if (responseData["snapshotFilename"] != undefined){\u000a                    self.snapshotSuccessMessageSpan.show();\u000a                    self.snapshotSuccessMessageSpan.text("Snapshot captured!");\u000a\u000a                } else {\u000a                    self.snapshotErrorMessageSpan.show();\u000a                    self.snapshotErrorMessageSpan.text("Something went wrong. Try again!");\u000a                }\u000a\u000a                self.snapshotImage.attr("src", self.apiClient.getSnapshotUrl(responseData.snapshotFilename));\u000a                self.captureButtonText.text(reCaptureText);\u000a\u000a                // SOME UI-SUGAR, if a minimum of time is not passed, just wait and after that remove the "nice" shutter\u000a                var now = new Date().getTime();\u000a                var captureDuration = now-startShutter;\u000a                if (captureDuration < (SHUTTER_DURATION*1000)){\u000a                    waitingDelta = (SHUTTER_DURATION*1000) - captureDuration\u000a                    setTimeout(function() {\u000a                        self.imageDisplayMode(IMAGEDISPLAYMODE_SNAPSHOTIMAGE);\u000a                    }, waitingDelta);\u000a                } else {\u000a                    // server call takes already a long time\u000a                    self.imageDisplayMode(IMAGEDISPLAYMODE_SNAPSHOTIMAGE);\u000a                }\u000a                self.shouldPrintJobTableReload = true;\u000a            });\u000a        }\u000a    }\u000a\u000a\u000a    this.cancelCaptureImage = function(){\u000a        self.imageDisplayMode(IMAGEDISPLAYMODE_SNAPSHOTIMAGE);\u000a        self.captureButtonText.text(reCaptureText);\u000a        $("#printJobHistory-cancelCaptureButton").hide();\u000a    }\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// UPLOAD IMAGE\u000a    this.performSnapshotUpload = function() {\u000a        if (self.snapshotUploadData === undefined) return;\u000a\u000a        var perform = function() {\u000a            self.snapshotUploadInProgress(true);\u000a//                self.loglines.removeAll();\u000a//                self.loglines.push({line: "Uploading backup, this can take a while. Please wait...", stream: "message"});\u000a//                self.loglines.push({line: " ", stream: "message"});\u000a//                self.restoreDialog.modal({keyboard: false, backdrop: "static", show: true});\u000a\u000a            self.snapshotUploadData.submit();\u000a            self.shouldPrintJobTableReload = true;\u000a        };\u000a        perform();\u000a//            showConfirmationDialog(_.sprintf(gettext("You are about to upload and restore the backup file \u005c"%(name)s\u005c". This cannot be undone."), {name: self.backupUploadName()}),\u000a//                perform);\u000a    };\u000a\u000a//        self.selectedSnapshotlFilenameUrl = ko.observable();\u000a//        self.selectedUploaadSnapshotlUrl =  ko.observable();\u000a\u000a\u000a    /////////////////////////////////////////////////////////////////////////////////////////////////// TOGGLE FULL EDIT MODE\u000a    this.fullEditMode = ko.observable(false);\u000a\u000a    self.toggleFullEditMode = function() {\u000a        self.fullEditMode(!this.fullEditMode());\u000a    };\u000a\u000a\u000a}\u000a\u000a;\u000a
p0
.