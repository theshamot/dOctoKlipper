V// source: js/app/dataupdater.js\u000afunction DataUpdater(allViewModels, connectCallback, disconnectCallback) {\u000a    var self = this;\u000a\u000a    self.allViewModels = allViewModels;\u000a    self.connectCallback = connectCallback;\u000a    self.disconnectCallback = disconnectCallback;\u000a\u000a    self._pluginHash = undefined;\u000a    self._configHash = undefined;\u000a\u000a    self._connectedDeferred = undefined;\u000a\u000a    self._initializedDeferred = undefined;\u000a\u000a    self._throttleFactor = 1;\u000a    self._baseProcessingLimit = 500.0;\u000a    self._lastProcessingTimes = [];\u000a    self._lastProcessingTimesSize = 20;\u000a\u000a    self._safeModePopup = undefined;\u000a\u000a    self.increaseThrottle = function () {\u000a        self.setThrottle(self._throttleFactor + 1);\u000a    };\u000a\u000a    self.decreaseThrottle = function () {\u000a        if (self._throttleFactor <= 1) {\u000a            return;\u000a        }\u000a        self.setThrottle(self._throttleFactor - 1);\u000a    };\u000a\u000a    self.setThrottle = function (throttle) {\u000a        self._throttleFactor = throttle;\u000a\u000a        self._send("throttle", self._throttleFactor);\u000a        log.debug(\u000a            "DataUpdater: New SockJS throttle factor:",\u000a            self._throttleFactor,\u000a            " new processing limit:",\u000a            self._baseProcessingLimit * self._throttleFactor\u000a        );\u000a    };\u000a\u000a    self._send = function (message, data) {\u000a        var payload = {};\u000a        payload[message] = data;\u000a        self._socket.send(JSON.stringify(payload));\u000a    };\u000a\u000a    self.connect = function () {\u000a        if (self._connectedDeferred) {\u000a            self._connectedDeferred.reject("reconnect");\u000a        }\u000a        self._connectedDeferred = $.Deferred();\u000a        OctoPrint.socket.connect({\u000a            debug: !!SOCKJS_DEBUG,\u000a            connectTimeout: SOCKJS_CONNECT_TIMEOUT\u000a        });\u000a        return self._connectedDeferred.promise();\u000a    };\u000a\u000a    self.reconnect = function () {\u000a        if (self._connectedDeferred) {\u000a            self._connectedDeferred.reject("reconnect");\u000a        }\u000a        self._connectedDeferred = $.Deferred();\u000a        OctoPrint.socket.reconnect();\u000a        return self._connectedDeferred.promise();\u000a    };\u000a\u000a    self.initialized = function () {\u000a        if (self._initializedDeferred) {\u000a            self._initializedDeferred.resolve();\u000a            self._initializedDeferred = undefined;\u000a        }\u000a    };\u000a\u000a    self._onReconnectAttempt = function (trial) {\u000a        if (trial <= 0) {\u000a            // Only consider it a real disconnect if the trial number has exceeded our threshold.\u000a            return;\u000a        }\u000a\u000a        var handled = false;\u000a        callViewModelsIf(\u000a            self.allViewModels,\u000a            "onServerDisconnect",\u000a            function () {\u000a                return !handled;\u000a            },\u000a            function (method) {\u000a                var result = method();\u000a                handled = (result !== undefined && !result) || handled;\u000a            }\u000a        );\u000a\u000a        if (handled) {\u000a            return true;\u000a        }\u000a\u000a        showOfflineOverlay(\u000a            gettext("Server is offline"),\u000a            gettext(\u000a                "The server appears to be offline, at least I'm not getting any response from it. I'll try to reconnect automatically <strong>over the next couple of minutes</strong>, however you are welcome to try a manual reconnect anytime using the button below."\u000a            ),\u000a            self.reconnect\u000a        );\u000a    };\u000a\u000a    self._onReconnectFailed = function () {\u000a        var handled = false;\u000a        callViewModelsIf(\u000a            self.allViewModels,\u000a            "onServerDisconnect",\u000a            function () {\u000a                return !handled;\u000a            },\u000a            function (method) {\u000a                var result = method();\u000a                handled = (result !== undefined && !result) || handled;\u000a            }\u000a        );\u000a\u000a        if (handled) {\u000a            return;\u000a        }\u000a\u000a        $("#offline_overlay_title").text(gettext("Server is offline"));\u000a        $("#offline_overlay_message").html(\u000a            gettext(\u000a                "The server appears to be offline, at least I'm not getting any response from it. I <strong>could not reconnect automatically</strong>, but you may try a manual reconnect using the button below."\u000a            )\u000a        );\u000a    };\u000a\u000a    self._onDisconnected = function (code) {\u000a        if (self._initializedDeferred) {\u000a            self._initializedDeferred.reject();\u000a        }\u000a        self._initializedDeferred = undefined;\u000a\u000a        if (self.disconnectCallback) {\u000a            self.disconnectCallback();\u000a        }\u000a    };\u000a\u000a    self._onConnectTimeout = function () {\u000a        if (self._connectedDeferred) {\u000a            self._connectedDeferred.reject("timeout");\u000a        }\u000a    };\u000a\u000a    self._onConnectMessage = function (event) {\u000a        if (self._initializedDeferred) {\u000a            self._initializedDeferred.reject();\u000a        }\u000a        self._initializedDeferred = $.Deferred();\u000a\u000a        if (self.connectCallback) {\u000a            self.connectCallback();\u000a        }\u000a\u000a        var data = event.data;\u000a\u000a        // update permissions\u000a        PERMISSIONS = data["permissions"];\u000a\u000a        // update version information\u000a        var oldVersion = VERSION;\u000a        VERSION = data["version"];\u000a        DISPLAY_VERSION = data["display_version"];\u000a        BRANCH = data["branch"];\u000a        $("span.version").text(DISPLAY_VERSION);\u000a\u000a        // update plugin hash\u000a        var oldPluginHash = self._pluginHash;\u000a        self._pluginHash = data["plugin_hash"];\u000a\u000a        // update config hash\u000a        var oldConfigHash = self._configHash;\u000a        self._configHash = data["config_hash"];\u000a\u000a        log.info("Connected to the server");\u000a\u000a        // if we have a connected promise, resolve it now\u000a        if (self._connectedDeferred) {\u000a            self._connectedDeferred.resolve();\u000a            self._connectedDeferred = undefined;\u000a        }\u000a\u000a        self._ifInitialized(function () {\u000a            // process safe mode\u000a            if (self._safeModePopup) self._safeModePopup.remove();\u000a            if (data["safe_mode"]) {\u000a                // safe mode is active, let's inform the user\u000a                log.info(\u000a                    "\u2757 Safe mode is active. Third party plugins and language packs are disabled and cannot be enabled."\u000a                );\u000a                log.info("\u2757 Reason for safe mode: " + data["safe_mode"]);\u000a\u000a                var reason = gettext("Unknown");\u000a                switch (data["safe_mode"]) {\u000a                    case "flag": {\u000a                        reason = gettext("Command line flag");\u000a                        break;\u000a                    }\u000a                    case "settings": {\u000a                        reason = gettext("Setting in config.yaml");\u000a                        break;\u000a                    }\u000a                    case "incomplete_startup": {\u000a                        reason = gettext("Problem during last startup");\u000a                        break;\u000a                    }\u000a                }\u000a\u000a                self._safeModePopup = new PNotify({\u000a                    title: gettext("Safe mode is active"),\u000a                    text: _.sprintf(\u000a                        gettext(\u000a                            "<p>The server is currently running in safe mode. Third party plugins and language packs are disabled and cannot be enabled.</p><p>Reason: %(reason)s</p>"\u000a                        ),\u000a                        {reason: _.escape(reason)}\u000a                    ),\u000a                    hide: false\u000a                });\u000a            }\u000a\u000a            // if the offline overlay is still showing, now's a good time to\u000a            // hide it, plus reload the camera feed if it's currently displayed\u000a            if ($("#offline_overlay").is(":visible")) {\u000a                hideOfflineOverlay();\u000a                log.info("Triggering reconnect on all view models");\u000a                callViewModels(self.allViewModels, "onServerReconnect");\u000a                callViewModels(self.allViewModels, "onDataUpdaterReconnect");\u000a            } else {\u000a                log.info("Triggering connect on all view models");\u000a                callViewModels(self.allViewModels, "onServerConnect");\u000a            }\u000a\u000a            // if the version, the plugin hash or the config hash changed, we\u000a            // want the user to reload the UI since it might be stale now\u000a            var versionChanged = oldVersion !== VERSION;\u000a            var pluginsChanged =\u000a                oldPluginHash !== undefined && oldPluginHash !== self._pluginHash;\u000a            var configChanged =\u000a                oldConfigHash !== undefined && oldConfigHash !== self._configHash;\u000a            if (versionChanged || pluginsChanged || configChanged) {\u000a                showReloadOverlay();\u000a            }\u000a\u000a            log.info("Server (re)connect processed");\u000a        });\u000a    };\u000a\u000a    self._onHistoryData = function (event) {\u000a        self._ifInitialized(function () {\u000a            callViewModels(self.allViewModels, "fromHistoryData", [event.data]);\u000a        });\u000a    };\u000a\u000a    self._onCurrentData = function (event) {\u000a        self._ifInitialized(function () {\u000a            callViewModels(self.allViewModels, "fromCurrentData", [event.data]);\u000a        });\u000a    };\u000a\u000a    self._onSlicingProgress = function (event) {\u000a        self._ifInitialized(function () {\u000a            $("#gcode_upload_progress")\u000a                .find(".bar")\u000a                .text(\u000a                    _.sprintf(gettext("Slicing ... (%(percentage)d%%)"), {\u000a                        percentage: Math.round(event.data["progress"])\u000a                    })\u000a                );\u000a\u000a            var data = event.data;\u000a            callViewModels(self.allViewModels, "onSlicingProgress", [\u000a                data["slicer"],\u000a                data["model_path"],\u000a                data["machinecode_path"],\u000a                data["progress"]\u000a            ]);\u000a        });\u000a    };\u000a\u000a    self._onRenderProgress = function (event) {\u000a        self._ifInitialized(function () {\u000a            var data = event.data;\u000a            callViewModels(self.allViewModels, "onRenderProgress", [data["progress"]]);\u000a        });\u000a    };\u000a\u000a    self._printerErrorCancelNotification = undefined;\u000a    self._printerErrorDisconnectNotification = undefined;\u000a    self._printerResetNotification = undefined;\u000a    self._onEvent = function (event) {\u000a        self._ifInitialized(function () {\u000a            var type = event.data["type"];\u000a            var payload = event.data["payload"];\u000a\u000a            var title, text, severity;\u000a\u000a            log.debug("Got event " + type + " with payload: " + JSON.stringify(payload));\u000a\u000a            if (type === "PrintCancelling" && payload.firmwareError) {\u000a                if (self._printerErrorCancelNotification !== undefined) {\u000a                    self._printerErrorCancelNotification.remove();\u000a                }\u000a                self._printerErrorCancelNotification = new PNotify({\u000a                    title: gettext("Error reported by printer"),\u000a                    text: _.sprintf(\u000a                        gettext(\u000a                            "Your printer's firmware reported an error. Due to that the ongoing print job will be cancelled. Reported error: %(firmwareError)s"\u000a                        ),\u000a                        {firmwareError: _.escape(payload.firmwareError)}\u000a                    ),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a            } else if (type === "Error" && payload.error) {\u000a                switch (payload.reason) {\u000a                    case "firmware": {\u000a                        title = gettext("Error reported by printer");\u000a                        text = _.sprintf(\u000a                            gettext(\u000a                                "Your printer's firmware reported an error. Due to that OctoPrint will disconnect. Reported error: %(error)s"\u000a                            ),\u000a                            {error: _.escape(payload.error)}\u000a                        );\u000a                        break;\u000a                    }\u000a                    case "resend":\u000a                    case "resend_loop":\u000a                    case "timeout": {\u000a                        title = gettext("Communication error");\u000a                        text = _.sprintf(\u000a                            gettext(\u000a                                "There was a communication error while talking to your printer. Please consult the terminal output and octoprint.log for details. Error: %(error)s"\u000a                            ),\u000a                            {error: _.escape(payload.error)}\u000a                        );\u000a                        break;\u000a                    }\u000a                    case "connection": {\u000a                        title = gettext("Error connecting to printer");\u000a                        text = _.sprintf(\u000a                            gettext(\u000a                                "There was an error while trying to connect to your printer. Error: %(error)s"\u000a                            ),\u000a                            {error: _.escape(payload.error)}\u000a                        );\u000a                        break;\u000a                    }\u000a                    case "start_print": {\u000a                        title = gettext("Error starting a print");\u000a                        text = _.sprintf(\u000a                            gettext(\u000a                                "There was an error while trying to start a print job. Error: %(error)s"\u000a                            ),\u000a                            {error: _.escape(payload.error)}\u000a                        );\u000a                        break;\u000a                    }\u000a                    case "autodetect": {\u000a                        // ignore\u000a                        break;\u000a                    }\u000a                    default: {\u000a                        title = gettext("Unknown error");\u000a                        text = _.sprintf(\u000a                            gettext(\u000a                                "There was an unknown error while talking to your printer. Please consult the terminal output and octoprint.log for details. Error: %(error)s"\u000a                            ),\u000a                            {error: _.escape(payload.error)}\u000a                        );\u000a                        break;\u000a                    }\u000a                }\u000a\u000a                if (title && text) {\u000a                    if (self._printerErrorDisconnectNotification !== undefined) {\u000a                        self._printerErrorDisconnectNotification.remove();\u000a                    }\u000a                    self._printerErrorDisconnectNotification = new PNotify({\u000a                        title: title,\u000a                        text: text,\u000a                        type: "error",\u000a                        hide: false\u000a                    });\u000a                }\u000a            } else if (type === "PrinterReset") {\u000a                if (payload.idle) {\u000a                    text = gettext(\u000a                        "It looks like your printer reset while a connection was active. If this was intentional you may safely ignore this message. Otherwise you should investigate why your printer reset itself, since this will interrupt prints and also file transfers to your printer's SD."\u000a                    );\u000a                    severity = "alert";\u000a                } else {\u000a                    text = gettext(\u000a                        "It looks like your printer reset while a connection was active. Due to this the ongoing job was aborted. If this was intentional you may safely ignore this message. Otherwise you should investigate why your printer reset itself, since this will interrupt prints and also file transfers to your printer's SD."\u000a                    );\u000a                    severity = "error";\u000a                }\u000a\u000a                if (self._printerResetNotification !== undefined) {\u000a                    self._printerResetNotification.remove();\u000a                }\u000a                self._printerResetNotification = new PNotify({\u000a                    title: gettext("Printer reset detected"),\u000a                    text: text,\u000a                    type: severity,\u000a                    hide: false\u000a                });\u000a            }\u000a\u000a            var legacyEventHandlers = {\u000a                UpdatedFiles: "onUpdatedFiles",\u000a                MetadataStatisticsUpdated: "onMetadataStatisticsUpdated",\u000a                MetadataAnalysisFinished: "onMetadataAnalysisFinished",\u000a                SlicingDone: "onSlicingDone",\u000a                SlicingCancelled: "onSlicingCancelled",\u000a                SlicingFailed: "onSlicingFailed"\u000a            };\u000a            _.each(self.allViewModels, function (viewModel) {\u000a                if (viewModel.hasOwnProperty("onEvent" + type)) {\u000a                    viewModel["onEvent" + type](payload);\u000a                } else if (\u000a                    legacyEventHandlers.hasOwnProperty(type) &&\u000a                    viewModel.hasOwnProperty(legacyEventHandlers[type])\u000a                ) {\u000a                    // there might still be code that uses the old callbacks, make sure those still get called\u000a                    // but log a warning\u000a                    log.warn(\u000a                        "View model " +\u000a                            viewModel.name +\u000a                            " is using legacy event handler " +\u000a                            legacyEventHandlers[type] +\u000a                            ", new handler is called " +\u000a                            legacyEventHandlers[type]\u000a                    );\u000a                    viewModel[legacyEventHandlers[type]](payload);\u000a                }\u000a            });\u000a        });\u000a    };\u000a\u000a    self._onTimelapse = function (event) {\u000a        self._ifInitialized(function () {\u000a            callViewModels(self.allViewModels, "fromTimelapseData", [event.data]);\u000a        });\u000a    };\u000a\u000a    self._onPluginMessage = function (event) {\u000a        self._ifInitialized(function () {\u000a            callViewModels(self.allViewModels, "onDataUpdaterPluginMessage", [\u000a                event.data.plugin,\u000a                event.data.data\u000a            ]);\u000a        });\u000a    };\u000a\u000a    self._onReauthMessage = function (event) {\u000a        self._ifInitialized(function () {\u000a            callViewModels(self.allViewModels, "onDataUpdaterReauthRequired", [\u000a                event.data.reason\u000a            ]);\u000a        });\u000a    };\u000a\u000a    self._onIncreaseRate = function (measurement, minimum) {\u000a        log.debug(\u000a            "We are fast (" + measurement + " < " + minimum + "), increasing refresh rate"\u000a        );\u000a        OctoPrint.socket.increaseRate();\u000a    };\u000a\u000a    self._onDecreaseRate = function (measurement, maximum) {\u000a        log.debug(\u000a            "We are slow (" + measurement + " > " + maximum + "), reducing refresh rate"\u000a        );\u000a        OctoPrint.socket.decreaseRate();\u000a    };\u000a\u000a    self._ifInitialized = function (callback) {\u000a        if (self._initializedDeferred) {\u000a            self._initializedDeferred.done(callback);\u000a        } else {\u000a            callback();\u000a        }\u000a    };\u000a\u000a    OctoPrint.socket.onDisconnected = self._onDisconnected;\u000a    OctoPrint.socket.onReconnectAttempt = self._onReconnectAttempt;\u000a    OctoPrint.socket.onReconnectFailed = self._onReconnectFailed;\u000a    OctoPrint.socket.onConnectTimeout = self._onConnectTimeout;\u000a    OctoPrint.socket.onRateTooHigh = self._onDecreaseRate;\u000a    OctoPrint.socket.onRateTooLow = self._onIncreaseRate;\u000a    OctoPrint.socket\u000a        .onMessage("connected", self._onConnectMessage)\u000a        .onMessage("history", self._onHistoryData)\u000a        .onMessage("current", self._onCurrentData)\u000a        .onMessage("slicingProgress", self._onSlicingProgress)\u000a        .onMessage("renderProgress", self._onRenderProgress)\u000a        .onMessage("event", self._onEvent)\u000a        .onMessage("timelapse", self._onTimelapse)\u000a        .onMessage("plugin", self._onPluginMessage)\u000a        .onMessage("reauthRequired", self._onReauthMessage);\u000a}\u000a\u000a;\u000a
p0
.