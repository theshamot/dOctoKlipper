V// source: plugin/PrintJobHistory/js/PrintJobHistory.js\u000a/*\u000a * View model for PrintJobHistory\u000a *\u000a * Author: OllisGit\u000a * License: AGPLv3\u000a */\u000a$(function() {\u000a\u000a    ////////////////////////////////////////////////////////////\u000a//    function formatFilamentLength(length){\u000a//        var pattern = "%.02fm"\u000a//        var result = _.sprintf(pattern, length)\u000a//        return result\u000a//    }\u000a\u000a    var global = this;\u000a    global.componentFactory = new PrintJobComponentFactory();\u000a    ////////////////////////////////////////////////////////////\u000a    var PrintJobItem = function(data) {\u000a\u000a        // Init Item\u000a		this.databaseId = ko.observable();\u000a		this.userName = ko.observable();\u000a		this.fileName = ko.observable();\u000a		this.filePathName = ko.observable();\u000a		this.fileSize = ko.observable();\u000a\u000a        var printStartDateTimeViewModel = global.componentFactory.createDateTimePicker("printStartDateTime-picker");\u000a		this.printStartDateTimeFormatted = printStartDateTimeViewModel.currentDateTime;\u000a		this.printStartDateTime = ko.observable();\u000a//		this.printStartDateTimeFormatted = ko.observable();\u000a\u000a        var printEndDateTimeViewModel = global.componentFactory.createDateTimePicker("printEndDateTime-picker");\u000a		this.printEndDateTimeFormatted = printEndDateTimeViewModel.currentDateTime;\u000a		this.printEndDateTime = ko.observable();\u000a//		this.printEndDateTimeFormatted = ko.observable();\u000a\u000a		this.printStatusResult = ko.observable();\u000a		this.duration = ko.observable();\u000a		this.durationFormatted = ko.observable();\u000a		this.noteText = ko.observable();\u000a		this.noteDeltaFormat = ko.observable();\u000a		this.noteHtml = ko.observable();\u000a		this.printedLayers = ko.observable();\u000a		this.printedHeight = ko.observable();\u000a		this.temperatureBed = ko.observable();\u000a		this.temperatureNozzle = ko.observable();\u000a\u000a//        this.usedSpoolManagerPlugin = ko.observable();\u000a//        this.spoolItem = ko.observable();\u000a		this.diameter = ko.observable();\u000a		this.density = ko.observable();\u000a		this.material = ko.observable();\u000a        this.spoolVendor = ko.observable();\u000a		this.spoolName = ko.observable();\u000a		this.spoolCost = ko.observable();\u000a		this.spoolCostUnit = ko.observable();\u000a		this.spoolWeight = ko.observable();\u000a		this.usedLengthFormatted = ko.observable();\u000a		this.calculatedLengthFormatted = ko.observable();\u000a		this.usedWeight = ko.observable();\u000a		this.usedCost = ko.observable();\u000a\u000a		this.snapshotFilename = ko.observable();\u000a		this.slicerSettingsAsText = ko.observable();\u000a/*\u000a        this.successful = ko.computed(function() {\u000a            return this.success() == 1;\u000a        }, this);\u000a        this.filamentUsage = ko.computed(self.formatFilament, this);\u000a        this.formattedDate = ko.computed(function () {\u000a            return formatDate(this.timestamp());\u000a        }, this);\u000a\u000a*/\u000a        // Fill Item with data\u000a        this.update(data);\u000a    }\u000a\u000a    PrintJobItem.prototype.update = function (data) {\u000a        var updateData = data || {}\u000a\u000a        this.databaseId(updateData.databaseId);\u000a        this.userName(updateData.userName);\u000a        this.fileName(updateData.fileName);\u000a        this.filePathName(updateData.filePathName);\u000a        if ( isNaN(updateData.fileSize)){\u000a            this.fileSize(updateData.fileSize);\u000a        } else {\u000a            this.fileSize(formatSize(updateData.fileSize));\u000a        }\u000a        this.printStartDateTime(updateData.printStartDateTime);\u000a        this.printEndDateTime(updateData.printEndDateTime);\u000a        this.printStartDateTimeFormatted(updateData.printStartDateTimeFormatted);\u000a        this.printEndDateTimeFormatted(updateData.printEndDateTimeFormatted);\u000a        this.printStatusResult(updateData.printStatusResult);\u000a        this.duration(updateData.duration);\u000a        this.durationFormatted(updateData.durationFormatted);\u000a        this.noteText(updateData.noteText);\u000a        this.noteDeltaFormat(updateData.noteDeltaFormat);\u000a        if (updateData.noteHtml != null){\u000a            this.noteHtml(updateData.noteHtml);\u000a        } else {\u000a            // Fallback text\u000a            this.noteHtml(updateData.noteText);\u000a        }\u000a\u000a        this.printedLayers(updateData.printedLayers);\u000a        this.printedHeight(updateData.printedHeight);\u000a\u000a        // Flatten all releations\u000a        // Temperature\u000a        tempDataArray = data["temperatureModels"];\u000a        // Just grab the first value\u000a        if (tempDataArray != null && tempDataArray.length >=2) {\u000a            this.temperatureBed(tempDataArray[0].sensorValue);\u000a            this.temperatureNozzle(tempDataArray[1].sensorValue);\u000a        } else {\u000a            this.temperatureBed(updateData.temperatureBed);\u000a            this.temperatureNozzle(updateData.temperatureNozzle);\u000a        }\u000a\u000a//        this.usedSpoolManagerPlugin(updateData.usedSpoolManagerPlugin);\u000a//        if (updateData.spoolItemData != null){\u000a//            this.spoolItem = self.spoolDialog.createSpoolItemForTable(updateData.spoolItemData);\u000a//        } else {\u000a//            this.spoolItem = null;\u000a//        }\u000a\u000a\u000a        //Filament\u000a        if (updateData.filamentModel != null){\u000a            this.diameter(updateData.filamentModel.diameter);\u000a            this.density(updateData.filamentModel.density);\u000a            this.material(updateData.filamentModel.material);\u000a            this.spoolVendor(updateData.filamentModel.profileVendor);\u000a            this.spoolName(updateData.filamentModel.spoolName);\u000a            this.spoolCost(updateData.filamentModel.spoolCost);\u000a            this.spoolCostUnit(updateData.filamentModel.spoolCostUnit);\u000a            this.spoolWeight(updateData.filamentModel.spoolWeight);\u000a//            this.usedLength( formatFilamentLength(updateData.filamentEntity.usedLength) );\u000a//            this.calculatedLength( formatFilamentLength(updateData.filamentEntity.calculatedLength) );\u000a            this.usedLengthFormatted( updateData.filamentModel.usedLengthFormatted );\u000a            this.calculatedLengthFormatted( updateData.filamentModel.calculatedLengthFormatted );\u000a            this.usedWeight( updateData.filamentModel.usedWeight );\u000a            this.usedCost( updateData.filamentModel.usedCost );\u000a        } else {\u000a            this.diameter(updateData.diameter);\u000a            this.density(updateData.density);\u000a            this.material(updateData.material);\u000a            this.spoolVendor(updateData.spoolVendor);\u000a            this.spoolName(updateData.spoolName);\u000a            this.spoolCost(updateData.spoolCost);\u000a            this.spoolCostUnit(updateData.spoolCostUnit);\u000a            this.spoolWeight(updateData.spoolWeight);\u000a//            this.usedLength( formatFilamentLength(updateData.filamentEntity.usedLength) );\u000a//            this.calculatedLength( formatFilamentLength(updateData.filamentEntity.calculatedLength) );\u000a            this.usedLengthFormatted( updateData.usedLengthFormatted );\u000a            this.calculatedLengthFormatted( updateData.calculatedLengthFormatted );\u000a            this.usedWeight( updateData.usedWeight );\u000a            this.usedCost( updateData.usedCost );\u000a        }\u000a\u000a		this.snapshotFilename(updateData.snapshotFilename);\u000a		this.slicerSettingsAsText(updateData.slicerSettingsAsText)\u000a    };\u000a\u000a\u000a    var TableAttributeVisibility = function (){\u000a        this.status = ko.observable(true);\u000a        this.user = ko.observable(true);\u000a        this.date = ko.observable(true);\u000a        this.startDateTime = ko.observable(true);\u000a        this.endDateTime = ko.observable(true);\u000a        this.duration = ko.observable(true);\u000a        this.file = ko.observable(true);\u000a        this.fileName = ko.observable(true);\u000a        this.fileSize = ko.observable(true);\u000a        this.tempBed = ko.observable(true);\u000a        this.tempTool = ko.observable(true);\u000a        this.height = ko.observable(true);\u000a        this.layer = ko.observable(true);\u000a        this.usage = ko.observable(true);\u000a        this.material = ko.observable(true);\u000a        this.spoolVendor = ko.observable(true);\u000a        this.spool = ko.observable(true);\u000a        this.usedLength = ko.observable(true);\u000a        this.usedWeight = ko.observable(true);\u000a        this.note = ko.observable(true);\u000a        this.image = ko.observable(true);\u000a    }\u000a\u000a\u000a    ////////////////////////////////////////////////////////////////////////////// VIEW MODEL\u000a    function PrintjobhistoryViewModel(parameters) {\u000a\u000a        var PLUGIN_ID = "PrintJobHistory"; // from setup.py plugin_identifier\u000a\u000a        var self = this;\u000a\u000a/// START MOCK MODEL\u000a        var emptyPrintJobItemAsJson = {\u000a                "databaseId" : null,\u000a                "printStartDateTimeFormatted" : "",\u000a                "printEndDateTimeFormatted" : "",\u000a                "printStatusResult" : "success",\u000a                "duration" : "",\u000a                "durationFormatted" : "",\u000a                "fileName" : "",\u000a                "fileSize" : "",\u000a                "temperatureBed" : "0.0",\u000a                "temperatureNozzle" : "0.0",\u000a                "printedHeight" : "0.0 / 0.0",\u000a                "printedLayers" : "0 / 0",\u000a                "spoolName" : "",\u000a                "spoolCost" : "",\u000a                "spoolCostUnit" : "TODO",\u000a                "material" : "",\u000a                "usedLengthFormatted" : "",\u000a                "calculatedLengthFormatted" : "",\u000a                "usedWeight" : "",\u000a                "usedCost" : "",\u000a                "noteText" : "",\u000a                "noteDeltaFormat" : null,\u000a                "noteHtml" : "",\u000a                "snapshotFilename" : "empty",\u000a                "slicerSettingsAsText" : ""\u000a        }\u000a\u000a        var printHistoryJobItems = [\u000a             {\u000a                "databaseId" : ko.observable(1),\u000a                "success" : ko.observable("1"),\u000a                "printStartDateTimeFormatted" : "19.09.2019 16:25",\u000a                "printEndDateTimeFormatted" : "19.09.2019 17:25",\u000a                "printStatusResult" : ko.observable("success"),\u000a                "duration" : "123",\u000a                "durationFormatted" : "1h12min",\u000a                "fileName" : "Legolas.gcode",\u000a                "fileSize" : "134KB",\u000a                "temperatureBed" : "50C",\u000a                "temperatureNozzle" : "200C",\u000a                "printedHeight" : "23 / 23mm",\u000a                "printedLayers" : "149 / 149",\u000a                "spoolName" : "myspool",\u000a                "spoolCost" : "2,23",\u000a                "spoolCostUnit" : "Euro",\u000a                "material" : "PLA",\u000a                "usedLengthFormatted" : "1m22mm",\u000a                "calculatedLengthFormatted" : "12,5g",\u000a                "usedWeight" : "12,5g",\u000a                "usedCost" : "0,003",\u000a                "noteText" : "Good output of Legolas",\u000a                "noteDeltaFormat" : "Good output of Legolas",\u000a                "noteHtml" : "<h1>Good output of Legolas</h1>",\u000a                "snapshotFilename" : ko.observable("20191003-123322"),\u000a                "slicerSettingsAsText" : ko.observable()\u000a//                "usedSpoolManagerPlugin": ko.observable()\u000a            },{\u000a                "databaseId" : ko.observable(2),\u000a                "success" : ko.observable("0"),\u000a                "printStartDateTimeFormatted" : "20.09.2019 15:25",\u000a                "printEndDateTimeFormatted" : "20.09.2019 17:25",\u000a                "printStatusResult" : ko.observable("fail"),\u000a                "duration" : "321",\u000a                "durationFormatted" : "2h34min",\u000a                "fileName" : "Benchy3D.gcode",\u000a                "fileSize" : "324KB",\u000a                "temperatureBed" : "60C",\u000a                "temperatureNozzle" : "220C",\u000a\u000a                "printedHeight" : "13 / 143mm",\u000a                "printedLayers" : "3 / 68",\u000a                "spoolName" : "Master",\u000a                "spoolCost" : "2,23",\u000a                "spoolCostUnit" : "Euro",\u000a                "material" : "ABS",\u000a                "usedLengthFormatted" : "2m22mm",\u000a                "calculatedLengthFormatted" : "312,6g",\u000a                "usedWeight" : "312,6g",\u000a                "usedCost" : "1,34",\u000a\u000a                "noteText" : "Bad quality",\u000a                "noteDeltaFormat" : "Bad quality",\u000a                "noteHtml" : "<h2>Bad quality,/h2>",\u000a                "snapshotFilename" : ko.observable("20191003-153312"),\u000a                "slicerSettingsAsText" : ko.observable()\u000a//                "usedSpoolManagerPlugin": ko.observable()\u000a            }\u000a        ];\u000a//        self.printJobHistorylistHelper.updateItems(printHistoryJobItems);\u000a\u000a/// END MOCK MODEL\u000a\u000a        // assign the injected parameters, e.g.:\u000a        self.loginStateViewModel = parameters[0];\u000a        self.loginState = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a//        self.spoolManagerViewModel = parameters[2];\u000a        self.pluginSettings = null;\u000a\u000a        self.apiClient = new PrintJobHistoryAPIClient(PLUGIN_ID, BASEURL);\u000a        self.componentFactory = new PrintJobComponentFactory(PLUGIN_ID);\u000a        self.printJobEditDialog = new PrintJobHistoryEditDialog(null, null);\u000a        self.pluginCheckDialog = new PrintJobHistoryPluginCheckDialog();\u000a        self.statisticDialog = new StatisticDialog();\u000a\u000a        self.printJobForEditing = ko.observable();\u000a        self.printJobForEditing(new PrintJobItem(printHistoryJobItems[0]));\u000a\u000a        self.printJobToShowAfterStartup = null;\u000a        self.missingPluginDialogMessage = null;\u000a\u000a        //self.tableAttributeVisibility = ko.observable();\u000a        self.tableAttributeVisibility = new TableAttributeVisibility();\u000a\u000a        self.csvFileUploadName = ko.observable();\u000a        self.csvImportInProgress = ko.observable(false);\u000a\u000a        self.isPrintHistoryPluginAvailable = ko.observable(false);\u000a//        self.isMultiSpoolManagerPluginsAvailable = ko.observable(false);\u000a\u000a        self.databaseFileLocation = ko.observable();\u000a        self.snapshotFileLocation = ko.observable();\u000a\u000a        self.csvImportDialog = new PrintJobHistoryImportDialog();\u000a\u000a//        self.usedNoneOrFilamentManagerPlugin = function(){\u000a//            var usedPlugin = self.printJobForEditing().usedSpoolManagerPlugin();\u000a//            if (usedPlugin == null || usedPlugin == "nonePlugin" || usedPlugin == "filamentManagerPlugin"){\u000a//                return true;\u000a//            }\u000a//            return false;\u000a//        }\u000a\u000a\u000a        ////////////////////////////////////////////////////// Knockout model-binding/observer\u000a\u000a\u000a        ///////////////////////////////////////////////////// START: SETTINGS\u000a        self.downloadDatabaseUrl = ko.observable();\u000a        self.takeSnapshotAfterPrintDisabled = ko.observable(false);\u000a        self.takeSnapshotOnGCodeCommndDisabled = ko.observable(false);\u000a        self.takeSnapshotGCodeCommndPatternDisabled = ko.observable(false);\u000a        self.cameraSnapShotURLAvailable = ko.observable(false);\u000a\u000a        isSnapshotUrlPresent = function(snapshotUrl){\u000a            return snapshotUrl != null && snapshotUrl.trim().length != 0;\u000a        }\u000a        self.initCameraSettingsBehaviour = function(){\u000a\u000a            if (self.settingsViewModel.settings.webcam.snapshotUrl != null){\u000a                // assign inital values\u000a                self.cameraSnapShotURLAvailable(isSnapshotUrlPresent(self.settingsViewModel.settings.webcam.snapshotUrl()));\u000a\u000a                self.settingsViewModel.settings.webcam.snapshotUrl.subscribe(function(newSnapShotUrl){\u000a                    self.cameraSnapShotURLAvailable(isSnapshotUrlPresent(newSnapShotUrl));\u000a                });\u000a            }\u000a\u000a            // Checkbox - stuff\u000a            self.pluginSettings.takeSnapshotAfterPrint.subscribe(function(newValue){\u000a\u000a                    if (newValue == true){\u000a                        self.pluginSettings.takeSnapshotOnGCodeCommnd(false);\u000a                    }\u000a            });\u000a            self.pluginSettings.takeSnapshotOnGCodeCommnd.subscribe(function(newValue){\u000a\u000a                    if (newValue == true){\u000a                        self.pluginSettings.takeSnapshotAfterPrint(false);\u000a                    }\u000a            });\u000a        }\u000a\u000a        self.deleteDatabaseAction = function() {\u000a            var result = confirm("Do you really want to delete all PrintJobHistory data?");\u000a            if (result == true){\u000a                self.apiClient.callDeleteDatabase(function(responseData) {\u000a                    self.printJobHistoryTableHelper.reloadItems();\u000a                });\u000a            }\u000a        };\u000a\u000a        self.csvImportUploadButton = $("#settings-pjh-importcsv-upload");\u000a        self.csvImportUploadData = undefined;\u000a        self.csvImportUploadButton.fileupload({\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            headers: OctoPrint.getRequestHeaders(),\u000a            add: function(e, data) {\u000a                if (data.files.length === 0) {\u000a                    // no files? ignore\u000a                    return false;\u000a                }\u000a                self.csvFileUploadName(data.files[0].name);\u000a                self.csvImportUploadData = data;\u000a            },\u000a            done: function(e, data) {\u000a                self.csvImportInProgress(false);\u000a                self.csvFileUploadName(undefined);\u000a                self.csvImportUploadData = undefined;\u000a            },\u000a            error: function(response, data, errorMessage){\u000a                self.csvImportInProgress(false);\u000a                statusCode = response.status;       // e.g. 400\u000a                statusText = response.statusText;   // e.g. BAD REQUEST\u000a                responseText = response.responseText; // e.g. Invalid request\u000a            }\u000a        });\u000a\u000a        self.performCSVImportFromUpload = function() {\u000a            if (self.csvImportUploadData === undefined) return;\u000a\u000a            self.csvImportInProgress(true);\u000a            self.csvImportDialog.showDialog(function(shouldTableReload){\u000a                    //\u000a                    if (shouldTableReload == true){\u000a                        self.printJobHistoryTableHelper.reloadItems();\u000a                    }\u000a                }\u000a            );\u000a            self.csvImportUploadData.submit();\u000a        };\u000a\u000a        // download sample csv-file\u000a        self.sampleCSVUrl = function(printJobItem){\u000a            return self.apiClient.getSampleCSVUrl();\u000a        }\u000a\u000a        ///////////////////////////////////////////////////// END: SETTINGS\u000a\u000a        ///////////////////////////////////////////////////// START: OctoPrint Hooks\u000a\u000a        self.onBeforeBinding = function() {\u000a            // assign current pluginSettings\u000a            self.pluginSettings = self.settingsViewModel.settings.plugins[PLUGIN_ID];\u000a            self.printJobEditDialog.init(self.apiClient, self.settingsViewModel.settings.webcam);\u000a            self.pluginCheckDialog.init(self.apiClient, self.pluginSettings);\u000a            self.csvImportDialog.init(self.apiClient);\u000a            self.statisticDialog.init(self.apiClient);\u000a\u000a            initTableVisibilities();\u000a\u000a            // resetSettings-Stuff\u000a             new ResetSettingsUtilV2(self.pluginSettings).assignResetSettingsFeature(PLUGIN_ID, function(data){\u000a                // no additional reset function\u000a             });\u000a\u000a            self.initCameraSettingsBehaviour();\u000a        }\u000a\u000a        self.onAfterBinding = function() {\u000a            // all inits were done\u000a            self.downloadDatabaseUrl(self.apiClient.getDownloadDatabaseUrl());\u000a            // to bring up dialogs the binding must be already done\u000a            if (self.printJobToShowAfterStartup != null){\u000a                self.showPrintJobDetailsDialogAction(self.printJobToShowAfterStartup, true);\u000a            }\u000a            if (self.missingPluginDialogMessage != null){\u000a                self.pluginCheckDialog.showMissingPluginsDialog(self.missingPluginDialogMessage);\u000a                self.missingPluginDialogMessage = null;\u000a            }\u000a        }\u000a\u000a        // receive data from server\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a\u000a            if (plugin != PLUGIN_ID) {\u000a                return;\u000a            }\u000a\u000a            if ("initalData" == data.action){\u000a                self.databaseFileLocation(data.databaseFileLocation);\u000a                self.snapshotFileLocation(data.snapshotFileLocation);\u000a                self.isPrintHistoryPluginAvailable(data.isPrintHistoryPluginAvailable);\u000a//                self.isMultiSpoolManagerPluginsAvailable(data.isMultiSpoolManagerPluginsAvailable);\u000a                return;\u000a            }\u000a\u000a            if ("missingPlugin" == data.action){\u000a                // NOT POSSIBLE, because init not done\u000a                if (self.pluginCheckDialog != null && self.pluginCheckDialog.isInitialized()){\u000a                    self.pluginCheckDialog.showMissingPluginsDialog(data.message);\u000a                } else {\u000a                    // save message for later use\u000a                    self.missingPluginDialogMessage = data.message;\u000a                }\u000a                return;\u000a            }\u000a\u000a            if ("printFinished" == data.action){\u000a                self.printJobHistoryTableHelper.reloadItems();\u000a                if (data.printJobItem != null){\u000a                    self.printJobToShowAfterStartup = data.printJobItem;\u000a                    self.showPrintJobDetailsDialogAction(data.printJobItem, true);\u000a                }\u000a                return;\u000a            }\u000a\u000a            if ("reloadTableItems" == data.action){\u000a                self.printJobHistoryTableHelper.reloadItems();\u000a                return;\u000a            }\u000a\u000a            if ("closeEditDialog" == data.action){\u000a                self.printJobEditDialog.closeDialog();\u000a                return;\u000a            }\u000a\u000a\u000a            if ("showPrintJobDialogAfterClientConnection" == data.action){\u000a                if (data.printJobItem != null){\u000a                    self.printJobToShowAfterStartup = data.printJobItem;\u000a                    self.showPrintJobDetailsDialogAction(data.printJobItem, true);\u000a                }\u000a                return;\u000a            }\u000a\u000a            if ("csvImportStatus" == data.action){\u000a                self.csvImportDialog.updateText(data);\u000a            }\u000a\u000a//            self.csvImportInProgress(false);\u000a            if ("errorPopUp" == data.action){\u000a                new PNotify({\u000a                    title: 'ERROR:' + data.title,\u000a                    text: data.message,\u000a                    type: "error",\u000a                    hide: false\u000a                    });\u000a\u000a                return;\u000a            }\u000a        }\u000a\u000a        self.onTabChange = function(next, current){\u000a            //alert("Next:"+next +" Current:"+current);\u000a            if ("#tab_plugin_PrintJobHistory" == next){\u000a                //self.reloadTableData();\u000a            }\u000a        }\u000a\u000a        ///////////////////////////////////////////////////// END: OctoPrint Hooks\u000a\u000a\u000a\u000a        ///////////////////////////////////////////////////// START: DIALOG Stuff\u000a\u000a        self.showStatisticDialog = function(){\u000a            self.statisticDialog.showDialog(self.printJobHistoryTableHelper.getTableQuery(), function(shouldTableReload){\u000a            });\u000a        }\u000a\u000a\u000a        printJobDialogCloseHandler = function(shouldTableReload){\u000a            // refresh snapshotImage\u000a            printJob = self.printJobForEditing();\u000a            var snapshotImageId = "#"+self.snapshotImageId(printJob);\u000a            var snapshotImage = $(snapshotImageId);\u000a            var snapshotUrl = snapshotImage.attr("src");\u000a            snapshotImage.attr("src", snapshotUrl+"?" + new Date().getTime()); // cache - break\u000a\u000a            if (shouldTableReload == true){\u000a                self.printJobHistoryTableHelper.reloadItems();\u000a            }\u000a\u000a            if (self.printJobToShowAfterStartup != null){\u000a                // PrintJob was presented to user and user confirmed\u000a                self.printJobToShowAfterStartup = null;\u000a                payload = {\u000a                    "showPrintJobDialogAfterPrint_jobId": null\u000a                };\u000a                OctoPrint.settings.savePluginSettings(PLUGIN_ID, payload);\u000a            }\u000a        }\u000a\u000a        self.showPrintJobDetailsDialogAction = function(selectedPrintJobItem, forceCloseDialog) {\u000a\u000a            if (forceCloseDialog == null){\u000a                forceCloseDialog = false;\u000a            }\u000a            self.printJobForEditing(new PrintJobItem(ko.mapping.toJS(selectedPrintJobItem)));\u000a//            self.printJobEditDialog.showDialog(self.printJobForEditing(), printJobDialogCloseHandler);\u000a            self.printJobEditDialog.showDialog(self.printJobForEditing(), function(shouldTableReload){\u000a                // delegate to default close handler\u000a                printJobDialogCloseHandler(shouldTableReload);\u000a                if (forceCloseDialog == true){\u000a\u000a                    self.apiClient.callForceCloseEditDialog(function(responseData){\u000a                        // do nothing\u000a                    });\u000a                }\u000a            });\u000a        };\u000a\u000a        ///////////////////////////////////////////////////// END: DIALOG Stuff\u000a\u000a        self.addNewPrintJobItem = function(){\u000a//            debugger\u000a            var emptyItem = new PrintJobItem(emptyPrintJobItemAsJson);\u000a            self.printJobForEditing(emptyItem);\u000a\u000a            self.printJobEditDialog.showDialog(self.printJobForEditing(), printJobDialogCloseHandler, true);\u000a        }\u000a\u000a        ///////////////////////////////////////////////////// STAR: TABLE BEHAVIOR\u000a\u000a        initTableVisibilities = function(){\u000a            // load all settings from browser storage\u000a            if (!Modernizr.localstorage) {\u000a                // damn!!!\u000a                return false;\u000a            }\u000a\u000a            assignVisibility = function(attributeName){\u000a                var storageKey = "pjh.table.visible." + attributeName;\u000a                if (localStorage[storageKey] == null){\u000a                    localStorage[storageKey] = true\u000a                } else {\u000a                    self.tableAttributeVisibility[attributeName]( "true" == localStorage[storageKey]);\u000a                }\u000a                self.tableAttributeVisibility[attributeName].subscribe(function(newValue){\u000a                    localStorage[storageKey] = newValue;\u000a                });\u000a            }\u000a\u000a            assignVisibility("status");\u000a            assignVisibility("user");\u000a            assignVisibility("date");\u000a            assignVisibility("startDateTime");\u000a            assignVisibility("endDateTime");\u000a            assignVisibility("duration");\u000a            assignVisibility("file");\u000a            assignVisibility("fileName");\u000a            assignVisibility("fileSize");\u000a            assignVisibility("tempBed");\u000a            assignVisibility("tempTool");\u000a            assignVisibility("height");\u000a            assignVisibility("layer");\u000a            assignVisibility("usage");\u000a            assignVisibility("material");\u000a            assignVisibility("spoolVendor");\u000a            assignVisibility("spool");\u000a            assignVisibility("usedLength");\u000a            assignVisibility("usedWeight");\u000a            assignVisibility("note");\u000a            assignVisibility("image");\u000a        }\u000a\u000a        loadJobFunction = function(tableQuery, observableTableModel, observableTotalItemCount, observableCurrentItemCount){\u000a            // api-call\u000a            self.apiClient.callLoadPrintJobsByQuery(tableQuery, function(responseData){\u000a                // handle response\u000a                totalItemCount = responseData["totalItemCount"];\u000a                allPrintJobs = responseData["allPrintJobs"];\u000a                var dataRows = ko.utils.arrayMap(allPrintJobs, function (data) {\u000a                    return new PrintJobItem(data);\u000a                });\u000a                observableTotalItemCount(totalItemCount);\u000a                observableCurrentItemCount(dataRows.length);\u000a                observableTableModel(dataRows);\u000a\u000a            });\u000a        }\u000a\u000a        self.printJobHistoryTableHelper = new PrintJobTableItemHelper(loadJobFunction, 25, "printStartDateTime", "all");\u000a\u000a        // - timeframe query\u000a        self.allTimeFrames = ko.observableArray([\u000a            { key: "all", label: "all" },\u000a            { key: "custom", label: "custom" },\u000a            { key: "lastWeek", label: "last 7 days" },\u000a            { key: "lastMonth", label: "last 30 days" },\u000a            { key: "lastThreeMonth", label: "last 90 days" },\u000a            { key: "lastYear", label: "last 365 days" },\u000a        ]);\u000a\u000a        self.selectedTimeFrame = ko.observable("all");\u000a        self.isCustomTimeFrame = ko.observable(false);\u000a\u000a        self.selectedTimeFrame.subscribe(function(newValue){\u000a                    self.isCustomTimeFrame("custom" == newValue);\u000a\u000a\u000a                    if ("custom" == newValue){\u000a                        self.isQueryStartEnabled(true);\u000a                        self.isQueryEndEnabled(true);\u000a                        return\u000a                    }\u000a                    self.isQueryStartEnabled(false);\u000a                    self.isQueryEndEnabled(false);\u000a                    // calculate new start/end date\u000a                    var startDate = new Date(Date.now());\u000a                    var endDate = new Date(Date.now());\u000a\u000a                    if ("lastWeek" == newValue){\u000a                        startDate.setDate(startDate.getDate() - 7);\u000a                    } else\u000a                    if ("lastMonth" == newValue){\u000a                        startDate.setDate(startDate.getDate() - 30);\u000a                    } else\u000a                    if ("lastThreeMonth" == newValue){\u000a                        startDate.setDate(startDate.getDate() - 90);\u000a                    } else\u000a                    if ("lastYear" == newValue){\u000a                        startDate.setDate(startDate.getDate() - 365);\u000a                    } else\u000a                    if ("all" == newValue ){\u000a                        startDate = null;\u000a                        endDate = null;\u000a                        self.printJobHistoryTableHelper.queryStartDate("");\u000a                        self.printJobHistoryTableHelper.queryEndDate("");\u000a                    }\u000a\u000a                    if (startDate != null && endDate != null){\u000a                        var yyyy = startDate.getFullYear().toString();\u000a                        var mm = (startDate.getMonth() + 101).toString().slice(-2);\u000a                        var dd = (startDate.getDate() + 100).toString().slice(-2);\u000a                        self.printJobHistoryTableHelper.queryStartDate(dd + "." + mm + "." + yyyy);\u000a\u000a                        yyyy = endDate.getFullYear().toString();\u000a                        mm = (endDate.getMonth() + 101).toString().slice(-2);\u000a                        dd = (endDate.getDate() + 100).toString().slice(-2);\u000a                        self.printJobHistoryTableHelper.queryEndDate(dd + "." + mm + "." + yyyy);\u000a                    }\u000a                    self.printJobHistoryTableHelper.reloadItems();\u000a            });\u000a        var queryStartViewModel = self.componentFactory.createDateTimePicker("queryStart-date-picker", false);\u000a        self.printJobHistoryTableHelper.queryStartDate = queryStartViewModel.currentDateTime;\u000a        self.isQueryStartEnabled = queryStartViewModel.isEnabled;\u000a        self.isQueryStartEnabled(false);\u000a\u000a        var queryEndViewModel = self.componentFactory.createDateTimePicker("queryEnd-date-picker", false);\u000a        self.printJobHistoryTableHelper.queryEndDate = queryEndViewModel.currentDateTime;\u000a        self.isQueryEndEnabled = queryEndViewModel.isEnabled;\u000a        self.isQueryEndEnabled(false);\u000a\u000a        // TODO range picker\u000a\u000a        // - export csv data\u000a        self.exportUrl = function(exportType) {\u000a            if (self.printJobHistoryTableHelper.items().length > 0) {\u000a                var defaultURL =  self.apiClient.getExportUrl(exportType)\u000a                return defaultURL;\u000a            } else {\u000a                return false;\u000a            }\u000a        };\u000a        self.exportedSelectedURL = ko.observable();\u000a\u000a        // - delete\u000a        self.exportUrl = function(exportType) {\u000a            if (self.printJobHistoryTableHelper.items().length > 0) {\u000a                var defaultURL =  self.apiClient.getExportUrl(exportType)\u000a                return defaultURL;\u000a            } else {\u000a                return false;\u000a            }\u000a        };\u000a        self.exportedSelectedURL = ko.observable();\u000a\u000a        self.selectedDatabaseIdsAsCSV = "";\u000a        self.deleteSelectedPrintJobs = function(){\u000a\u000a            var result = confirm("Do you really want to delete all selected("+self.printJobHistoryTableHelper.selectedTableItems().length+") printjobs?");\u000a            if (result == true){\u000a                self.apiClient.callRemovePrintJob("0?databaseIds="+self.selectedDatabaseIdsAsCSV, function(responseData) {\u000a\u000a                    self.printJobHistoryTableHelper.selectedTableItems.removeAll();\u000a                    self.printJobHistoryTableHelper.reloadItems();\u000a\u000a                });\u000a            }\u000a            return false;\u000a\u000a        }\u000a\u000a        self.printJobHistoryTableHelper.selectedTableItems.subscribe(function(newValue) {\u000a\u000a            var newCSVUrl = self.apiClient.getExportUrl("CSV");\u000a            if (newValue != null && newValue.length > 0){\u000a                var databaseIds = "";\u000a                for (var itemIndex = 0; itemIndex<newValue.length; itemIndex++){\u000a                    databaseIds = databaseIds + newValue[itemIndex].databaseId();\u000a                    if (itemIndex+1 < newValue.length){\u000a                        databaseIds = databaseIds + ",";\u000a                    }\u000a                }\u000a                newCSVUrl = newCSVUrl + "?databaseIds="+ databaseIds;\u000a                self.selectedDatabaseIdsAsCSV = databaseIds;\u000a            }\u000a\u000a            self.exportedSelectedURL(newCSVUrl);\u000a        });\u000a\u000a        self.sortOrderLabel = function(orderType) {\u000a            var order = "";\u000a\u000a            if (orderType == "fileName") {\u000a                order = (self.printJobHistorylistHelper.currentSorting() == 'fileNameAsc') ? '(' + _('ascending') + ')' : (self.printJobHistorylistHelper.currentSorting() == 'fileNameDesc') ? '(' + _('descending') + ')' : '';\u000a            } else if (orderType == "startDateTime") {\u000a                order = (self.printJobHistorylistHelper.currentSorting() == 'startDateTimeAsc') ? '(' + _('ascending') + ')' : (self.printJobHistorylistHelper.currentSorting() == 'startDateTimeDesc') ? '(' + _('descending') + ')' : '';\u000a            }\u000a            return order;\u000a        };\u000a\u000a\u000a        self.changeSortOrder = function(columnToSort) {\u000a            if ("fileName" == columnToSort){\u000a                if (self.printJobHistorylistHelper.currentSorting() == "fileNameAsc") {\u000a                    self.printJobHistorylistHelper.changeSorting("fileNameDesc");\u000a                } else {\u000a                    self.printJobHistorylistHelper.changeSorting("fileNameAsc");\u000a                }\u000a            }\u000a            if ("startDateTime" == columnToSort){\u000a                if (self.printJobHistorylistHelper.currentSorting() == "startDateTimeAsc") {\u000a                    self.printJobHistorylistHelper.changeSorting("startDateTimeDesc");\u000a                } else {\u000a                    self.printJobHistorylistHelper.changeSorting("startDateTimeAsc");\u000a                }\u000a            }\u000a        };\u000a\u000a        self.snapshotUrl = function(printJobItem){\u000a            return self.apiClient.getSnapshotUrl(printJobItem.snapshotFilename()) + "?" + new Date().getTime();\u000a        }\u000a\u000a        self.snapshotImageId = function(printJobItem){\u000a            return "pjh-imageid-" + printJobItem.databaseId();\u000a        }\u000a\u000a\u000a\u000a\u000a\u000a\u000a        ///////////////////////////////////////////////////// END: TABLE BEHAVIOR\u000a\u000a//        self.removePrintJobAction = function(printJobItem) {\u000a//            var result = confirm("Do you really want to delete the print job?");\u000a//            if (result == true){\u000a//                self.apiClient.callRemovePrintJob(printJobItem.databaseId(), function(responseData) {\u000a//                    self.printJobHistoryTableHelper.reloadItems();\u000a//                });\u000a//            }\u000a//        };\u000a\u000a    }\u000a\u000a    /* view model class, parameters for constructor, container to bind to\u000a     * Please see http://docs.octoprint.org/en/master/plugins/viewmodels.html#registering-custom-viewmodels for more details\u000a     * and a full list of the available options.\u000a     */\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: PrintjobhistoryViewModel,\u000a        // ViewModels your plugin depends on, e.g. loginStateViewModel, settingsViewModel, ...\u000a        dependencies: [\u000a            "loginStateViewModel",\u000a            "settingsViewModel",\u000a//            "spoolManagerViewModel"\u000a        ],\u000a        // Elements to bind to, e.g. #settings_plugin_PrintJobHistory, #tab_plugin_PrintJobHistory, ...\u000a        elements: [\u000a            document.getElementById("tab_printJobHistory"),\u000a            document.getElementById("settings_printJobHistory"),\u000a            document.getElementById("modal-dialogs-printJobHistory")\u000a        ]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.