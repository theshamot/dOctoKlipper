V// source: js/app/client/socket.js\u000a(function (global, factory) {\u000a    if (typeof define === "function" && define.amd) {\u000a        define(["OctoPrintClient", "jquery", "lodash", "sockjs"], factory);\u000a    } else {\u000a        factory(global.OctoPrintClient, global.$, global._, global.SockJS);\u000a    }\u000a})(this, function (OctoPrintClient, $, _, SockJS) {\u000a    var normalClose = 1000;\u000a\u000a    var OctoPrintSocketClient = function (base) {\u000a        var self = this;\u000a\u000a        this.base = base;\u000a\u000a        this.options = {\u000a            timeouts: [0, 1, 1, 2, 3, 5, 8, 13, 20, 40, 100],\u000a            connectTimeout: 5000,\u000a            rateSlidingWindowSize: 20\u000a        };\u000a\u000a        this.socket = undefined;\u000a        this.reconnecting = false;\u000a        this.reconnectTrial = 0;\u000a        this.registeredHandlers = {};\u000a\u000a        this.rateThrottleFactor = 1;\u000a        this.rateBase = 500;\u000a        this.rateLastMeasurements = [];\u000a\u000a        this.connectTimeout = undefined;\u000a\u000a        this.onMessage("connected", function () {\u000a            // Make sure to clear connection timeout on connect\u000a            if (self.connectTimeout) {\u000a                clearTimeout(self.connectTimeout);\u000a                self.connectTimeout = undefined;\u000a            }\u000a        });\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.propagateMessage = function (event, data) {\u000a        var start = new Date().getTime();\u000a\u000a        var eventObj = {event: event, data: data};\u000a\u000a        var catchAllHandlers = this.registeredHandlers["*"];\u000a        if (catchAllHandlers && catchAllHandlers.length) {\u000a            _.each(catchAllHandlers, function (handler) {\u000a                handler(eventObj);\u000a            });\u000a        }\u000a\u000a        var handlers = this.registeredHandlers[event];\u000a        if (handlers && handlers.length) {\u000a            _.each(handlers, function (handler) {\u000a                handler(eventObj);\u000a            });\u000a        }\u000a\u000a        var end = new Date().getTime();\u000a        this.analyzeTiming(end - start);\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.analyzeTiming = function (measurement) {\u000a        while (this.rateLastMeasurements.length >= this.options.rateSlidingWindowSize) {\u000a            this.rateLastMeasurements.shift();\u000a        }\u000a        this.rateLastMeasurements.push(measurement);\u000a\u000a        var processingLimit = this.rateThrottleFactor * this.rateBase;\u000a        if (measurement > processingLimit) {\u000a            this.onRateTooHigh(measurement, processingLimit);\u000a        } else if (this.rateThrottleFactor > 1) {\u000a            var maxProcessingTime = Math.max.apply(null, this.rateLastMeasurements);\u000a            var lowerProcessingLimit = (this.rateThrottleFactor - 1) * this.rateBase;\u000a            if (maxProcessingTime < lowerProcessingLimit) {\u000a                this.onRateTooLow(maxProcessingTime, lowerProcessingLimit);\u000a            }\u000a        }\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.increaseRate = function () {\u000a        if (this.rateThrottleFactor <= 1) {\u000a            this.rateThrottleFactor = 1;\u000a            return;\u000a        }\u000a        this.rateThrottleFactor--;\u000a        this.sendThrottleFactor();\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.decreaseRate = function () {\u000a        this.rateThrottleFactor++;\u000a        this.sendThrottleFactor();\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.sendThrottleFactor = function () {\u000a        this.sendMessage("throttle", this.rateThrottleFactor);\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.sendAuth = function (userId, session) {\u000a        this.sendMessage("auth", userId + ":" + session);\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.sendMessage = function (type, payload) {\u000a        var data = {};\u000a        data[type] = payload;\u000a        this.socket.send(JSON.stringify(data));\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.connect = function (opts) {\u000a        opts = opts || {};\u000a\u000a        var self = this;\u000a\u000a        self.disconnect();\u000a\u000a        var url = self.base.options.baseurl;\u000a        if (!_.endsWith(url, "/")) {\u000a            url += "/";\u000a        }\u000a\u000a        var timeout = self.options.connectTimeout;\u000a        if (opts.hasOwnProperty("connectTimeout")) {\u000a            timeout = opts.connectTimeout;\u000a            delete opts.connectTimeout;\u000a        }\u000a\u000a        var onOpen = function () {\u000a            self.reconnecting = false;\u000a            self.reconnectTrial = 0;\u000a            self.onConnected();\u000a        };\u000a\u000a        var onClose = function (e) {\u000a            if (e.code === normalClose) {\u000a                return;\u000a            }\u000a\u000a            if (self.onReconnectAttempt(self.reconnectTrial)) {\u000a                return;\u000a            }\u000a\u000a            self.onDisconnected(e.code);\u000a\u000a            if (self.reconnectTrial < self.options.timeouts.length) {\u000a                var timeout = self.options.timeouts[self.reconnectTrial];\u000a                setTimeout(function () {\u000a                    self.reconnect();\u000a                }, timeout * 1000);\u000a                self.reconnectTrial++;\u000a            } else {\u000a                self.onReconnectFailed();\u000a            }\u000a        };\u000a\u000a        var onMessage = function (msg) {\u000a            _.each(msg.data, function (data, key) {\u000a                self.propagateMessage(key, data);\u000a            });\u000a        };\u000a\u000a        if (self.connectTimeout) {\u000a            clearTimeout(self.connectTimeout);\u000a        }\u000a        if (timeout > 0) {\u000a            self.connectTimeout = setTimeout(function () {\u000a                self.onConnectTimeout();\u000a            }, timeout);\u000a        }\u000a\u000a        self.socket = new SockJS(url + "sockjs", undefined, opts);\u000a        self.socket.onopen = onOpen;\u000a        self.socket.onclose = onClose;\u000a        self.socket.onmessage = onMessage;\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.reconnect = function () {\u000a        this.disconnect();\u000a        this.socket = undefined;\u000a        this.connect();\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.disconnect = function () {\u000a        if (this.socket !== undefined) {\u000a            this.socket.close();\u000a        }\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.onMessage = function (message, handler) {\u000a        if (!this.registeredHandlers.hasOwnProperty(message)) {\u000a            this.registeredHandlers[message] = [];\u000a        }\u000a        this.registeredHandlers[message].push(handler);\u000a        return this;\u000a    };\u000a\u000a    OctoPrintSocketClient.prototype.onReconnectAttempt = function (trial) {};\u000a    OctoPrintSocketClient.prototype.onReconnectFailed = function () {};\u000a    OctoPrintSocketClient.prototype.onConnected = function () {};\u000a    OctoPrintSocketClient.prototype.onDisconnected = function (code) {};\u000a    OctoPrintSocketClient.prototype.onConnectTimeout = function () {};\u000a\u000a    OctoPrintSocketClient.prototype.onRateTooLow = function (measured, minimum) {\u000a        this.increaseRate();\u000a    };\u000a    OctoPrintSocketClient.prototype.onRateTooHigh = function (measured, maximum) {\u000a        this.decreaseRate();\u000a    };\u000a\u000a    OctoPrintClient.registerComponent("socket", OctoPrintSocketClient);\u000a    return OctoPrintSocketClient;\u000a});\u000a\u000a;\u000a
p0
.